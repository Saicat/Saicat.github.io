<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>理解LLM位置编码:RoPE</title>
    <url>/a051710f.html</url>
    <content><![CDATA[<p>最近在做LLM窗口外推的相关工作，因此刚好也回顾一下目前最流行的位置编码RoPE。</p>
<h1 id="关于rope">关于RoPE</h1>
<p>RoPE（Rotary Position
Embedding），是苏剑林大神在2021年就提出的一种Transformer模型的位置编码。RoPE是一种可以<big><u><strong>以绝对位置编码形式实现的相对位置编码</strong></u></big>，兼顾了模型性能和效率。</p>
<p>2023年上半年的时候，大模型位置编码尚有Alibi和RoPE在相互比拼，而到了2023年下半年，及今2024年，新开源出来的模型，大部分都是使用RoPE了。当然Alibi也有其优势，这个在讲Alibi的时候来说。</p>
<p>苏神在他的个人网站科学空间中对RoPE有相关文章进行了介绍，本篇是在这个基础上，对RoPE进行理解（公式和符号上也会沿用苏神的写法）。</p>
<h1 id="以绝对位置编码的方式实现相对位置编码">以绝对位置编码的方式实现相对位置编码</h1>
<p>前面提到，RoPE是一种一绝对位置编码的方式实现的相对位置编码，那么这么做能带来什么收益？</p>
<p>先说原因：</p>
<p>在文本长度不长的情况下（比如Bert时代基本都是256/512token的长度），相对位置编码和绝对位置编码在使用效果上可以说没有显著差别。<br>
如果要处理更大长度的输入输出，使用绝对位置编码就需要把训练数据也加长到推理所需长度，否则对于没训练过的长度（训练时没见过的位置编码），效果多少会打些折扣。<br>
而使用相对位置编码则<u><strong>更容易外推</strong></u>，毕竟token-2和token-1的距离，与token-10002和token-10001的距离是一样的，也因此可以缓解对巨量长文本数据的需求。<br>
但是传统相对位置编码的实现相对<u><strong>复杂</strong></u>，有些也会有<u><strong>计算效率低</strong></u>的问题。由于修改了self-attention的计算方式，也比较难推广到<u><strong>线性注意力</strong></u>计算法模型中。<br>
总结来说，就是绝对位置编码<u><strong>好实现</strong></u>，<u><strong>效率高</strong></u>，<u><strong>适用线性注意力</strong></u>，而相对位置编码<u><strong>易外推</strong></u>，因此就有了对“绝对位置编码的方式实现相对位置编码”的追求，去把二者的优点结合起来。</p>
<p>下面简单回顾一下绝对位置编码和相对位置编码。</p>
<p>（对位置编码比较熟悉的朋友可以直接跳到第3节。）</p>
<h2 id="绝对位置编码">绝对位置编码</h2>
<p>先回顾一下带绝对位置编码的self-attention。</p>
<p><span class="math display">\[\left.\left\{\begin{array}{l}q_\mathrm{i}=(x_\mathrm{i}+p_\mathrm{i})W_\mathrm{Q}\\k_\mathrm{j}=(x_\mathrm{j}+p_\mathrm{j})W_\mathrm{K}\\\nu_\mathrm{j}=(x_\mathrm{j}+p_\mathrm{j})W_\mathrm{V}\\\mathrm{a_\mathrm{i,j}}=\mathrm{softmax}\left(q_\mathrm{i}k_\mathrm{j}^\top\right)\\o_\mathrm{i}=\sum_\mathrm{j}a_\mathrm{i,j}\nu_\mathrm{j}\end{array}\right.\right.\tag{1}\]</span></p>
<p><span class="math inline">\(x_i\)</span> 和 <span class="math inline">\(x_j\)</span> 分别是位置 <span class="math inline">\(i\)</span> 和 <span class="math inline">\(j\)</span> 的输入，<span class="math inline">\(p\)</span> 是对应位置的位置编码向量。</p>
<p>这里的位置编码<span class="math inline">\(p\)</span>可以是三角函数式，或者直接训练式。但是无论是哪种，其实现方式都很简单，就是在输入端把词向量
<span class="math inline">\(x\)</span> 和位置向量 <span class="math inline">\(p\)</span>
相加即可，相比attention中的softmax计算，element-wise
addition操作的计算量非常小，是可以忽略不计的。</p>
<p>大部分绝对位置编码使用的是这样向量相加的形式，即加性编码，也有一些用乘性编码的工作，把
<span class="math inline">\(x + p\)</span> 变成 <span class="math inline">\(x * p\)</span> 这样，效果上也是大差不差。</p>
<h2 id="相对位置编码">相对位置编码</h2>
<p>在绝对位置编码中，可以在输入阶段就把 <span class="math inline">\(x\)</span> 和 <span class="math inline">\(p\)</span>
直接相加，是因为这里把位置信息当做是这个位置的词的固有特征。</p>
<p>比如“我”这个词放在位置1时，形成一个 <span class="math inline">\(e_1 =
x_我 + p_1\)</span>
这么一个向量来代表【“我”在位置1】这一个情况；而当同样的词“我”放在位置8时，形成了另一个向量
<span class="math inline">\(e_8 = x_我 + p_8\)</span> 。两个向量 <span class="math inline">\(e_1\)</span> 和 <span class="math inline">\(e_8\)</span>
虽然包含同一个词，但是对于模型来说，这两个输入是不同的（因为每个数值都包含了位置向量），词向量和位置向量<u><strong>耦合</strong></u>在一起共同构成了一个完整的输入。</p>
<p>直观来说，比如词表大小是1万，模型训练窗口最大长度是512，那么对于模型来说，实际上要区分的输入是1万×512=512万个。看起来虽然不少，但是在海量的数据和训练量下，这也不算什么事儿，模型确实能handle。</p>
<p>扯远了，现在回来看一下相对位置编码。把公式（1）中的 <span class="math inline">\(q_{i}k_{j}^{T}\)</span>展开来</p>
<p><span class="math display">\[\begin{align*}q_ik_j^\top&amp;=\left(x_i+p_i\right)W_\mathbb{Q}W_K^\top\left(x_j+p_j\right)^\top\\&amp;=\left(x_iW_\mathbb{Q}+{\color{red}p_iW_\mathbb{Q}}\right)\left(W_K^\top
x_j^\top+{\color{red}W_K^\top
p_j^\top}\right)\end{align*}\tag{2}\]</span></p>
<p>和位置相关的有 <span class="math inline">\(p_iW_\mathbb{Q}\)</span>
和 <span class="math inline">\(W_K^\top p_j^\top\)</span> 两项。</p>
<h3 id="google式">Google式</h3>
<p>在最早引入相对位置编码的Google的论文《Self-Attention with Relative
Position Representations》中，把第一项 <span class="math inline">\(p_iW_\mathbb{Q}\)</span>
去掉了（因为要搞相对位置编码，只要能把相对位置信息加到其中一项输入就可以了，这里加在了位置
<span class="math inline">\(j\)</span>），把第二项 <span class="math inline">\(W_K^\top p_j^\top\)</span> 改成和位置 <span class="math inline">\(i\)</span>、<span class="math inline">\(j\)</span>
都相关的位置向量 <span class="math inline">\(R_{ij}^K\)</span>，于是在这个使用相对位置编码的attention计算中，<u><strong>不再是直接计算input
projection的内积来获取权重</strong></u>，而变成</p>
<p><span class="math display">\[
\mathrm{a_{ij}=softmax}\left(x_{i}W_{\mathbb{Q}}\left(x_{j}W_{\mathbb{K}}+R_{\mathbf{i,j}}^{\mathbf{K}}\right)^{\top}\right)\tag{3}
\]</span></p>
<p><span class="math inline">\(R_{ij}^K\)</span>
是什么呢？可以是可训练式的向量，也可以是类似三角函数式的，在这个基础上增加了一个clip操作。</p>
<p><span class="math display">\[
R_{\mathrm{i,j}}^\mathrm{K}=p_\mathrm{K}\left[\mathrm{clip(i-j,p_{min},p_{max})}\right]
\]</span></p>
<p>其中 <span class="math inline">\(p_\mathrm{K}\)</span>
就是可训练的向量或者三角函数向量。</p>
<p>为什么要增加一个clip操作？因为直观上，一个词对其左右附近的其他词的位置关系<strong>理应</strong>更加敏感，比如“我请你吃饭”中，“吃饭”这个词需要以高分辨率明确区分出前面三个词“我”、“请”、“你”的位置，以免理解成了“你请我吃饭”；而随着距离越来越远，这种高分辨率的需求也就越来越低，十万个token之前的内容顺序对于当前token来说，影响比较小了，在位置向量上可以一视同仁。另外这也是方便了位置信息的外推，比如我们可以只训练256个相对位置编码信息，而在应用是可以外推到&gt;256的长度。</p>
<p>本来到这里就可以了，相对位置信息已经加入了，但是Google除了在input端增加了相对位置信息，在输出端也增加了相对位置信息。本来输出端的计算是</p>
<p><span class="math display">\[\begin{align*}
o_\mathrm{i}&amp;=\sum_\mathrm{j}a_\mathrm{i,j}\nu_\mathrm{j}\\
&amp;=\sum_{\mathrm{j}}\mathrm{a_{i,j}}(x_{j} + p_{j})W_{\mathrm{V}}\\
&amp;=\sum_{\mathrm{j}}\mathrm{a_{i,j}}(x_{j}W_{\mathrm{V}} +
{\color{red}p_{j}W_{\mathrm{V}}})\\
\end{align*}\tag{4}\]</span></p>
<p>Google的方法把 <span class="math inline">\(p_{j}W_{\mathrm{V}}\)</span>
也改成了包含相对位置信息的向量</p>
<p><span class="math display">\[\begin{align*}
o_{\mathrm{i}}=\sum_{\mathrm{j}}\mathrm{a_{i,j}}\left(x_{j}W_{\mathrm{V}}+R_{\mathrm{i,j}}^{\mathrm{V}}\right)\tag{5}
\end{align*}\]</span></p>
<p><span class="math inline">\(R_{\mathrm{i,j}}^{\mathrm{V}}\)</span> 和
<span class="math inline">\(R_{ij}^K\)</span> 相似，都是一个相对位置向量
+ clip操作。</p>
<h3 id="xlnet式">XLNET式</h3>
<p>XLNET也使用了相对位置编码，思路类似Google，只是具体的操作不同。</p>
<p>在公式（2）的基础上继续展开</p>
<p><span class="math display">\[\begin{align*}
q_ik_j^T
&amp;= \left(x_iW_\mathbb{Q}+{p_iW_\mathbb{Q}}\right)\left(W_K^\top
x_j^\top+{W_K^\top p_j^\top}\right)\\
&amp;=
x_iW_\mathbb{Q}W_\mathbb{K}^Tx_j^T
+x_iW_\mathbb{Q}W_\mathbb{K}^T{\color{red}p_j^T}
+{\color{red}p_i}W_\mathbb{Q}W_\mathbb{K}^T{x_j^T}
+{\color{red}p_i}W_\mathbb{Q}W_\mathbb{K}^T{\color{red}p_j^T}\\
\end{align*}\tag{6}
\]</span></p>
<p>把绝对位置相关的几个参数改成相对位置相关的参数，变成：</p>
<p><span class="math display">\[
\mathrm{a_{ij}=softmax}\left
(x_iW_\mathrm{Q}W_\mathrm{K}^\top x_\mathrm{j}^\top
+x_iW_\mathrm{Q}W_\mathrm{K}^\top {\color{red}R_\mathrm{i-j}^\top}
+{\color{red}u}W_\mathrm{Q}W_\mathrm{K}^\top x_\mathrm{j}^\top
+{\color{red}\nu}
W_\mathrm{Q}W_\mathrm{K}^\top{\color{red}R_\mathrm{i-j}^\top}\right)
\tag{7}
\]</span></p>
<p>把 <span class="math inline">\(p_i\)</span> 变成了两个可训练的向量
<span class="math inline">\(u\)</span> 和 <span class="math inline">\(\nu\)</span> ，把 <span class="math inline">\(p_j\)</span> 变成相对位置向量 <span class="math inline">\(R_{i-j}^\top\)</span> 。</p>
<p>实际实现上可以把 <span class="math inline">\(u\)</span> 和 <span class="math inline">\(\nu\)</span>
后面跟着的矩阵省掉了，去掉这个线性变化不影响 <span class="math inline">\(u\)</span> 和 <span class="math inline">\(\nu\)</span> 的训练，变成</p>
<p><span class="math display">\[
x_iW_\mathrm{Q}W_\mathrm{K}^\top x_\mathrm{j}^\top
+x_iW_\mathrm{Q}W_\mathrm{K}^\top {\color{red}R_\mathrm{i-j}^\top}
+{\color{red}u}W_\mathrm{K}^\top x_\mathrm{j}^\top
+{\color{red}\nu} W_\mathrm{K}^\top{\color{red}R_\mathrm{i-j}^\top}
\tag{8}
\]</span></p>
<p>此外，XLNET只对输入端做了处理，输出端则直接把位置相关的计算去掉了，即</p>
<p><span class="math display">\[\begin{align*}
o_\mathrm{i}
&amp;=\sum_{\mathrm{j}}\mathrm{a_{i,j}}x_{j}W_{\mathrm{V}}\\
\end{align*}\tag{9}\]</span></p>
<p>可以看到，Google式和XLNET式的相对位置编码在权重 <span class="math inline">\(\mathrm{a_{i,j}}\)</span>
的计算上都变得比较复杂了（相对绝对位置编码而言），并且到这里可以看到，获取相对位置信息的思路其实就是想办法把原来公式（2）中的绝对位置向量替换成和位置
<span class="math inline">\(i\)</span> 、 <span class="math inline">\(j\)</span>
都相关的向量。很多其他变体其实都大差不差，基本就是在怎么加入相对位置向量、怎么clip上下功夫。</p>
<p>当然，也有简单一点的实现，比如T5的方法。</p>
<h3 id="t5式">T5式</h3>
<p>公式（6）中展开了内积计算，一共有四项，第一项完全没有位置信息，只和词向量本身有关，第二三项分别包含了位置
<span class="math inline">\(i\)</span> 和位置 <span class="math inline">\(j\)</span>
的信息，而第四项只和位置相关，和词向量本身是什么内容无关。也就是说，位置相关的信息都是在后面三项引入的，那简单点，直接把后面三项替换成一个位置向量：</p>
<p><span class="math display">\[
\mathrm{a_{ij}=softmax}\left
(x_iW_\mathrm{Q}W_\mathrm{K}^\top x_\mathrm{j}^\top
+ \beta_{i,j}\right)
\tag{10}
\]</span></p>
<p>（从最早提出，到XLNET，以及DeBerta，T5等，可以看到相对位置编码的实现有一个简化的趋势，而效果也越来越好，正所谓大道至简，有时候有用的东西未必需要很复杂）</p>
<h2 id="对比">对比</h2>
<p>看来相对位置编码确实比较复杂，说个大概需要这么多篇幅；并且相对绝对位置编码，也没有那么直接明了，需要对attention计算做一些改造。</p>
<p>公式（1）的绝对位置编码中，可以看到在进softmax操作前需要做3次矩阵加法，3次矩阵乘法</p>
<p>从公式（8）可以看到，共有4组矩阵计算要做，每组要做3次矩阵乘法，相对会比较复杂。公式（3）也有类似的情况。当然同时也有一些针对相对位置编码的高效计算被提出，这些就需要针对不同的计算方案来优化了。</p>
<p>总之在实现方式上和计算效率上，绝对位置编码具有一些优势。</p>
<p>而在输入输出窗口外推方面，相对位置编码有着天然的优势。</p>
<p>另外，绝对位置编码保持self-attention的经典形式，使得应用面更广，如可以使用到linear
attention方案中去，这个以后再展开讲（又挖了个坑）。</p>
<h1 id="rope的设计思路">RoPE的设计思路</h1>
<h2 id="保持attention计算形式">保持attention计算形式</h2>
<p>回顾完经典的绝对位置编码和相对位置编码，回到RoPE上来。</p>
<p>先说设计思路：</p>
<p>首先我们想要保持经典self-attention的计算方式，即公式（1）中的形式，输入端
= 内积 +
softmax，至于输出端则保持完全不变。softmax我们不去动，那这里留给我们操作的就是内积。</p>
<p>也就说，现在问题是，我们怎么在只做内积的情况下，把内积结果变成只和相对位置有关，而和绝对位置无关的结果。写成公式就是</p>
<p><span class="math display">\[
\langle
f_q(\boldsymbol{q}_m,m),f_k(\boldsymbol{k}_n,n)\rangle=g(\boldsymbol{q}_m,\boldsymbol{k}_n,m-n)
\tag{11}
\]</span></p>
<p>其中 <span class="math inline">\(q_m\)</span> 是在位置 <span class="math inline">\(m\)</span> 的query向量，<span class="math inline">\(k_n\)</span> 是在位置 <span class="math inline">\(n\)</span> 的key向量，<span class="math inline">\(f_q\)</span> 和 <span class="math inline">\(f_k\)</span>
是分别针对这query和key向量的操作函数。</p>
<p>我们的任务就是要找到一组 <span class="math inline">\(f_q\)</span> 、
<span class="math inline">\(f_k\)</span> 和 <span class="math inline">\(g\)</span> ，使得公式（11）恒成立。</p>
<p>当然理论上这里是存在无数多组答案的，那么RoPE怎么找到一组好实现的组合呢？</p>
<h2 id="借用复数寻找组合">借用复数寻找组合</h2>
<p>式（11）中， <span class="math inline">\(g\)</span>
的结果是一个标量，我们需要一个能连接向量内积和标量的桥梁，这个桥梁就是复数。</p>
<p>这里先回顾一下复数的知识。任意复数都可以表示成复平面的一个2维向量</p>
<img src="/a051710f/complex_number.png" class width="282" height="401" title="复数平面">
<p>现在考虑query和key向量都是2维的情况，那么可以代入复数的操作<br>
（先把 hidden size = 2 的情况推理清楚，后续再推广到更高维的情况）</p>
<p>那么在2维复数平面上有什么操作可以满足公式（11）的要求呢？Roformer论文中提出的是这组：</p>
<p><span class="math display">\[
\begin{aligned}
f_q(\boldsymbol{q}_m,m)&amp;=\boldsymbol{q}_me^{im\theta}=\left(\boldsymbol{W}_q\boldsymbol{x}_m\right)e^{im\theta}
\\
f_k(\boldsymbol{k}_n,n)&amp;=\boldsymbol{k}_ne^{in\theta}=(\boldsymbol{W}_k\boldsymbol{x}_n)e^{in\theta}
\\
g(\boldsymbol{q}_m,\boldsymbol{k}_n,m-n)&amp;=\mathrm{Re}\left[\boldsymbol{q}_m\boldsymbol{k}_n^*e^{i(m-n)\theta}\right]
=\mathrm{Re}\left[(\boldsymbol{W}_q\boldsymbol{x}_m)(\boldsymbol{W}_k\boldsymbol{x}_n)^*e^{i(m-n)\theta}\right]\\
\end{aligned} \\
\tag{12}
\]</span></p>
<p>其中 <span class="math inline">\(\boldsymbol{k}_n^*\)</span> 是 <span class="math inline">\(\boldsymbol{k}_n\)</span> 的共轭复数。</p>
<p>（如果暂时理解不了是怎么想出这个组合来满足要求的的，先把它放一边，毕竟数学就是这么神奇）</p>
<p>共轭复数是这样的关系</p>
<p><span class="math display">\[
\begin{gathered}
z=a+ib \\
z^*=a-ib
\end{gathered}
\tag{13}
\]</span></p>
<p>先证明一下这个组合的正确性，是不是真的满足公式（11）。</p>
<p>（也可以先跳过证明，选择先相信这个组合）</p>
<p>回顾一下欧拉公式</p>
<p><span class="math display">\[
e^{ix}=\cos x+i\sin x
\tag{14}
\]</span></p>
<p>因为现在我们讨论的是2维的情况，那2维向量 <span class="math inline">\(q_m\)</span> 可以用一个复数来表示</p>
<p><span class="math display">\[
q_m = q_m^{(1)} + iq_m^{(2)}
\tag{15}
\]</span></p>
<p>那从复数角度来看，就有</p>
<p><span class="math display">\[
\begin{aligned}
f_q(\boldsymbol{q}_m,m)
&amp;= \boldsymbol{q}_me^{im\theta} \\
&amp;= (q_m^{(1)} + iq_m^{(2)})(\cos (m\theta)+i\sin (m\theta)) \\
&amp;=
(q_m^{(1)}cos(m\theta)-q_m^{(2)}\sin(m\theta))+i(q_m^{(1)}\sin(m\theta)
+ q_m^{(2)}\cos(m\theta))
\end{aligned}
\tag{16}
\]</span></p>
<p>式（16）的结果也是一个复数，那也可以用复平面上的一个向量来表示：</p>
<p><span class="math display">\[
f_q(\boldsymbol{q}_m,m) =
\left.\left[\begin{matrix}{q_m^{(1)}cos(m\theta)-q_m^{(2)}\sin(m\theta)}\\{q_m^{(1)}\sin(m\theta)
+ q_m^{(2)}\cos(m\theta)}\end{matrix}\right.\right]^\top
\tag{17}
\]</span></p>
<p>（这里沿用式（1）中，默认向量为行向量的设定，所有有个transpose，实际上是行向量还是列向量都没关系，只是推算的时候写法问题）</p>
<p>类似地，有</p>
<p><span class="math display">\[
\begin{aligned}
f_k(\boldsymbol{k}_n,n)
&amp;=
(k_n^{(1)}cos(n\theta)-k_n^{(2)}\sin(n\theta))+i(k_n^{(1)}\sin(n\theta)
+ k_n^{(2)}\cos(n\theta))
\end{aligned}
\tag{18}
\]</span></p>
<p>和</p>
<p><span class="math display">\[
f_k(\boldsymbol{k}_n,n) =
\left.\left[\begin{matrix}{k_n^{(1)}cos(n\theta)-k_n^{(2)}\sin(n\theta)}\\{k_n^{(1)}\sin(n\theta)
+ k_n^{(2)}\cos(n\theta)}\end{matrix}\right.\right]^\top
\tag{19}
\]</span></p>
<p>则有<br>
<span class="math display">\[
\begin{aligned}
&amp;\langle
f_q(\boldsymbol{q}_m,m),f_k(\boldsymbol{k}_n,n)\rangle\\=&amp;(q_m^{(1)}cos(m\theta)-q_m^{(2)}\sin(m\theta))(k_n^{(1)}cos(n\theta)-k_n^{(2)}\sin(n\theta))
\\&amp;+ (q_m^{(1)}\sin(m\theta) +
q_m^{(2)}\cos(m\theta))(k_n^{(1)}\sin(n\theta) +
k_n^{(2)}\cos(n\theta))\\
=&amp;q_m^{(1)}k_n^{(1)}\left(\cos(m\theta)\cos(n\theta)+\sin(m\theta)\sin(n\theta)\right)
\\
&amp;+q_m^{(1)}k_n^{(2)}\left(-\cos(m\theta)\sin(n\theta)+\sin(m\theta)\cos(n\theta)\right)
\\
&amp;+q_m^{(2)}k_n^{(1)}(-\sin(m\theta)\cos(n\theta)+\cos(m\theta)\sin(n\theta))
\\
&amp;+q_m^{(2)}k_n^{(2)}(\sin(m\theta)\sin(n\theta)+\cos(m\theta)\cos(n\theta))
\\
=&amp;q_m^{(1)}k_n^{(1)}\cos((m-n)\theta)+q_m^{(1)}k_n^{(2)}\sin((m-n)\theta)
\\
&amp;-\left.q_m^{(2)}k_n^{(1)}\right.\sin((m-n)\theta)
+q_m^{(2)}k_n^{(2)}\cos((m-n)\theta)\\
= &amp;(q_m^{(1)}k_n^{(1)} + q_m^{(2)}k_n^{(2)})\cos((m - n)\theta) +
(q_m^{(1)}k_n^2 - q_m^{(2)}k_n^{(1)})\sin((m-n)\theta)
\end{aligned}
\tag{20}
\]</span></p>
<p>用了三角函数和差公式 <span class="math display">\[
\sin(\alpha\pm\beta)=\sin\alpha\cos\beta\pm\cos\alpha\sin\beta\\
{\cos(\alpha\pm\beta)=\cos\alpha\cos\beta\mp\sin\alpha\sin\beta}
\]</span></p>
<p>再看 <span class="math inline">\(g\)</span></p>
<p><span class="math display">\[
\begin{aligned}
&amp;g(\boldsymbol{q}_m,\boldsymbol{k}_n,m-n)\\
=
&amp;\mathrm{Re}\left[\boldsymbol{q}_m\boldsymbol{k}_n^*e^{i(m-n)\theta}\right]
\\
= &amp;\mathrm{Re}\left[[(q_m^{(1)}k_n^{(1)} + q_m^{(2)}k_n^{(2)}) -
i(q_m^{(1)}k_n^2 - q_m^{(2)}k_n^{(1)})](\cos((m -
n)\theta) + i\sin((m-n)\theta))\right] \\
= &amp;(q_m^{(1)}k_n^{(1)} + q_m^{(2)}k_n^{(2)})\cos((m - n)\theta) +
(q_m^{(1)}k_n^2 -
q_m^{(2)}k_n^{(1)})\sin((m-n)\theta)\\
= &amp;\langle f_q(\boldsymbol{q}_m,m),f_k(\boldsymbol{k}_n,n)\rangle
\end{aligned}
\tag{21}
\]</span></p>
<p>证毕。</p>
<h2 id="旋转位置编码">“旋转”位置编码</h2>
<p>发现式（17）可以写成这样</p>
<p><span class="math display">\[
f_q(\boldsymbol{q}_m,m)^\top =
\left.\left[\begin{matrix}{\cos(m\theta)}&amp;{-\sin(m\theta)}\\{\sin(m\theta)}&amp;{\cos(m\theta)}\end{matrix}\right.\right]
{\left.\left[\begin{matrix}{q_m^{(1)}}\\{q_m^{(2)}}\end{matrix}\right.\right]}
\tag{22}
\]</span></p>
<p>同样地</p>
<p><span class="math display">\[
f_k(\boldsymbol{k}_n,n)^\top =
\left.\left[\begin{matrix}{\cos(n\theta)}&amp;{-\sin(n\theta)}\\{\sin(n\theta)}&amp;{\cos(n\theta)}\end{matrix}\right.\right]
{\left.\left[\begin{matrix}{k_n^{(1)}}\\{k_n^{(2)}}\end{matrix}\right.\right]}
\tag{23}
\]</span></p>
<p>如果从向量视角来看，则有</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\langle f_q(\boldsymbol{q}_m,m),f_k(\boldsymbol{k}_n,n)\rangle\\
=&amp;{\left.\left[\begin{matrix}{q_m^{(1)}}&amp;{q_m^{(2)}}\end{matrix}\right.\right]}
\left.\left[\begin{matrix}{\cos(m\theta)}&amp;{\sin(m\theta)}\\{-\sin(m\theta)}&amp;{\cos(m\theta)}\end{matrix}\right.\right]
\left.\left[\begin{matrix}{\cos(n\theta)}&amp;{-\sin(n\theta)}\\{\sin(n\theta)}&amp;{\cos(n\theta)}\end{matrix}\right.\right]
{\left.\left[\begin{matrix}{k_n^{(1)}}\\{k_n^{(2)}}\end{matrix}\right.\right]}\\
=&amp;{\left.\left[\begin{matrix}{q_m^{(1)}}&amp;{q_m^{(2)}}\end{matrix}\right.\right]}\left.\left[\begin{matrix}{\cos(m\theta)\cos(n\theta)
+ \sin(m\theta)\sin(n\theta)}&amp;
{-\cos(m\theta)\sin(n\theta) + \sin(m\theta)\cos(n\theta)}\\
{-\cos(n\theta)\sin(m\theta) + \cos(m\theta)\sin(n\theta)}&amp;
{\sin(m\theta)\sin(n\theta) + \cos(m\theta)\cos(n\theta)}
\end{matrix}\right.\right]
{\left.\left[\begin{matrix}{k_n^{(1)}}\\{k_n^{(2)}}\end{matrix}\right.\right]}\\
=&amp;{\left.\left[\begin{matrix}{q_m^{(1)}}&amp;{q_m^{(2)}}\end{matrix}\right.\right]}
\left.\left[\begin{matrix}{\cos((m-n)\theta)}&amp;{\sin((m-n)\theta)}\\{-\sin((m-n)\theta)}&amp;{\cos((m-n)\theta)}\end{matrix}\right.\right]
{\left.\left[\begin{matrix}{k_n^{(1)}}\\{k_n^{(2)}}\end{matrix}\right.\right]}
\end{aligned}
\tag{24}
\]</span></p>
<p>看式（22）和（23），可以看到等号右边都有</p>
<p><span class="math display">\[
\left.\left[\begin{matrix}{\cos(n\theta)}&amp;{-\sin(n\theta)}\\{\sin(n\theta)}&amp;{\cos(n\theta)}\end{matrix}\right.\right]
\]</span></p>
<p>这正是一个二维平面的旋转矩阵。 <span class="math inline">\(f_q\)</span> 、 <span class="math inline">\(f_k\)</span>
的操作相当于对输入向量进行了一次不改变大小，只改变方向的旋转。</p>
<p>这也是为什么叫做“旋转”位置编码。</p>
<h2 id="从2维推广到高维">从2维推广到高维</h2>
<p>我们现在已经确认，对于2维的情况，经过 <span class="math inline">\(f_q\)</span> 、 <span class="math inline">\(f_k\)</span> 和 <span class="math inline">\(g\)</span>
这么一波操作，能够满足式（11）的要求，但是实际上怎么在高维模型里实现呢？</p>
<p>答案是把高维输入拆分成两个两个一组（这要求输入是偶数维，目前的模型也都是偶数维，所以没问题），则高维的“旋转”矩阵有多个小旋转矩阵组成</p>
<p><span class="math display">\[
\boldsymbol{R}_{\Theta,m}^d=\begin{pmatrix}\cos m\theta_0&amp;-\sin
m\theta_0&amp;0&amp;0&amp;\cdots&amp;0&amp;0\\\sin m\theta_0&amp;\cos
m\theta_0&amp;0&amp;0&amp;\cdots&amp;0&amp;0\\0&amp;0&amp;\cos
m\theta_1&amp;-\sin m\theta_1&amp;\cdots&amp;0&amp;0\\0&amp;0&amp;\sin
m\theta_1&amp;\cos
m\theta_1&amp;\cdots&amp;0&amp;0\\\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\0&amp;0&amp;0&amp;0&amp;\cdots&amp;\cos
m\theta_{d/2-1}&amp;-\sin
m\theta_{d/2-1}\\0&amp;0&amp;0&amp;0&amp;\cdots&amp;\sin
m\theta_{d/2-1}&amp;\cos n\theta_{d/2-1}\end{pmatrix}
\tag{25}
\]</span></p>
<p><span class="math inline">\(d\)</span>
是的输入向量的维度，由于是两个两个一组，所以一共有 <span class="math inline">\(d/2\)</span> 组小旋转矩阵，这 <span class="math inline">\(d/2\)</span> 组矩阵为了区分，设计使用了不同的
<span class="math inline">\(\theta\)</span></p>
<p><span class="math display">\[
\Theta=\left\{\theta_i=10000^{-2(i-1)/d},i\in[1,2,\ldots,d/2]\right\}
\tag{26}
\]</span></p>
<p>那么在实际操作的时候，给位置 <span class="math inline">\(m\)</span>
和位置 <span class="math inline">\(n\)</span> 的输入向量分别乘以 <span class="math inline">\(R_m\)</span> 和 <span class="math inline">\(R_n\)</span>，再进行self-attention，就能获得仅使用相对位置信息编码的效果。</p>
<p>另外 <span class="math inline">\(\theta\)</span>
是怎么来的呢？这里是参考了Google最初在《Attention is All You
Need》中提出的，这里就先不展开了，可以看看论文原文。</p>
<h2 id="高效率实现">高效率实现</h2>
<p>式（25）中的矩阵在高维的情况下很稀疏，直接使用这么个矩阵来计算效率并不高，可以使用一个这样的高效率实现方式</p>
<p><span class="math display">\[
\boldsymbol{R}_{
m}\boldsymbol{q}=\begin{pmatrix}q_0\\q_1\\q_2\\q_3\\q_4\\\vdots\\q_{d-2}\\q_{d-1}\end{pmatrix}\otimes\begin{pmatrix}\cos
m\theta_0\\\cos m\theta_0\\\cos m\theta_1\\\cos m\theta_1\\\cos
m\theta_1\\\vdots\\\cos m\theta_{d/2-1}\\\cos
m\theta_{d/2-1}\end{pmatrix}
+\begin{pmatrix}-q_1\\q_0\\-q_3\\\vdots\\-q_{d-1}\\q_{d-2}\end{pmatrix}\otimes\begin{pmatrix}\sin
m\theta_0\\\sin m\theta_0\\\sin m\theta_1\\\sin m\theta_1\\\sin
m\theta_1\\\vdots\\\sin m\theta_{d/2-1}\\\sin
m\theta_{d/2-1}\end{pmatrix}
\tag{27}
\]</span></p>
<p>只需进行两组element-wise乘法即可。形式上看起来是类似乘性绝对位置编码的做法。</p>
<p>另外，看LLAMA中的实现，可以看到旋转位置编码是在每一个decoder层的输入都加了的。每次都强化一次位置信息，也有助于模型更好识别不同距离的内容。</p>
<h2 id="远程衰减的特性">远程衰减的特性</h2>
<p>至此，旋转位置编码已经完备，具备了计算高效，实现容易，便于外推，适用于线性注意力的特性。实际上它还具备另一项优点：有远程衰减的特性。</p>
<p>直观看起来远程衰减很符合直觉，毕竟注意力机制随着距离的衰减而降低，这个机制和人类也很像。</p>
<p>回顾训练式的绝对位置编码，由于每个位置的位置向量是模型在训练中自我学习的，所以并不保证能具备这样的特性。而这个
<span class="math inline">\(\theta\)</span>
的选择沿用了三角函数式编码的做法，就使得整体具有远程衰减的特性。</p>
<p>证明过程这里就偷偷懒略过了，具体可以看<a href="https://arxiv.org/abs/2104.09864">Roformer的论文</a>或者<a href="https://spaces.ac.cn/archives/8265">苏神的博客</a>。</p>
<p>当 <span class="math inline">\(d = 128\)</span>
时，画出来的图像如下</p>
<img src="/a051710f/remote_attenuation.png" class width="775" height="457" title="远程衰减">
<h1 id="小结">小结</h1>
<p>总之，RoPE在设计和实现上还是挺巧妙的，性质上也很有很多优势，所以被广泛应用到transformer模型中去了。</p>
<h1 id="reference">Reference</h1>
<p>【1】让研究人员绞尽脑汁的Transformer位置编码，https://spaces.ac.cn/archives/8130<br>
【2】Transformer升级之路：2、博采众长的旋转式位置编码，https://spaces.ac.cn/archives/8265<br>
【3】RoFormer: Enhanced Transformer with Rotary Position Embedding
https://arxiv.org/abs/2104.09864<br>
【4】十分钟读懂旋转编码（RoPE）
https://zhuanlan.zhihu.com/p/647109286</p>
<hr>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>positional encoding</tag>
        <tag>RoPE</tag>
      </tags>
  </entry>
  <entry>
    <title>LLM长上下文的问题</title>
    <url>/c4da56c0.html</url>
    <content><![CDATA[<p>最近长上下文的业务需求越来越多，刚好把这个能力现状和主流方案的基础内容简单梳理一下。</p>
<p>跟长文本最相关的自然就是位置编码，现在很多模型都使用了RoPE这种位置编码，之前已经把RoPE的基础内容梳理了一遍：<a href="http://www.linsight.cn/a051710f.html">博客</a> <a href="https://zhuanlan.zhihu.com/p/684072868">知乎</a> <a href="https://mp.weixin.qq.com/s?__biz=MzkyODY1MTA3Ng==&amp;mid=2247483759&amp;idx=1&amp;sn=f7b59b879476b8687a340606b5568eae&amp;chksm=c214c344f5634a52e299108c3deddfd2a0eccbf14d9392c205410723956c477925e89e791b9b&amp;token=88551061&amp;lang=zh_CN#rd">微信公众号</a></p>
<h1 id="关于长上下文">关于长上下文</h1>
<p>2023年中开始，各大LLM厂商开始关注到长上下文的问题。2023年5月，Claude把长度支持到100k
tokens；6、7月的时候，ChatGPT3.5也已经支持16k，而ChatGLM2-B最大长度已经可以到32k。</p>
<p>（插一句，ChatGLM系列做得一直很不错，从基础模型、长窗口、工具调用、Agent都一直保持在比较前沿的水平，个人最近用ChatGLM3、ChatGLM4体验还是很不错的）</p>
<p>差不多同时间还有LM-SYS的LongChat，MosaicLM的MPT也支持16k以及更长的上下文。</p>
<p>今年过年前刚出来的Qwen-1.5系列全家桶也都是32k起步了。还有一些支持超长窗口的模型</p>
<center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">模型</th>
<th style="text-align: center;">支持长度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Baichuan2</td>
<td style="text-align: center;">192k</td>
</tr>
<tr class="even">
<td style="text-align: center;">GPT4-turbo</td>
<td style="text-align: center;">128k</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Yi</td>
<td style="text-align: center;">200k</td>
</tr>
<tr class="even">
<td style="text-align: center;">Kimi Chat</td>
<td style="text-align: center;">128k(20万汉字)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Claude2</td>
<td style="text-align: center;">200k</td>
</tr>
</tbody>
</table>
</center>
<p>大厂商们卷完基础模型效果，把能刷的榜刷完，又盯上了长上下文能力（当然现在长上下文也有榜了）。</p>
<p>为什么要那么长？</p>
<h1 id="长上下文的需求">长上下文的需求</h1>
<p>取决于语言和所使用的tokenizer，每个token对应编码的文本有所不同。以中文为例，大部分模型每个token对应的中文字数都&gt;1.5个字（部分高效的tokenizer可以做到2个字以上）。那么200k的token就能对应处理30w字的上下文了。</p>
<p>最近刚看了刘震云的长篇小说《一句顶一万句》，全书差不多27万字，也就是说现在这些长上下文大模型可以秒读完一部长篇小说，然后和我交流心得，或者告诉我全书的概要，又或者帮我找到一些文中的细节描写。</p>
<p>上面这个场景对应的是大模型的<big><u><strong>工具化</strong></u></big>场景。我们可以借助大模型的能力，来阅读论文，总结研报或者阅读代码，这些场景都需要比较长的上下文输入。</p>
<p>另外还有一个也比较火的大模型应用场景，RAG（Retrieval-augmented
generation），也对长上下文输入有要求，只是在RAG中，大部分输入文本并不是直接来自于用户输入，而是通过检索得来的。</p>
<p>除了工具化的应用场景，还有一些<big><u><strong>个性化</strong></u></big>的场景也会对长上下文有需求。举例来说，就是一些智能助手需要对用户的偏好和设置做长期记忆，这些偏好和设置可以以prompt或者对话的形式持久化存储下来，在进行新的对话的时候就把这些内容连同用户新的输入一起给到模型进行处理。</p>
<p>实际上，哪怕是单次的聊天，也很有可能需要模型处理比较长的上下文。比如我们可能会让模型扮演一个特定的影视角色或者游戏角色和我们进行对话。这时通常会给模型一些设定，比如这是一个什么样的任务，故事背景世界观都是什么样的，以及现在要进行哪些方面的交流等。这些设定都会以prompt的形式在最开始输入给模型。而随着对话的进行，模型如果长文本能力比较差，就有可能忘记了我们之前给的设定，这样体验上就有问题了。</p>
<p>上面这个例子实际引出了对长文本需求更具体的内容：（1）在文本比较长的时候，还能说人话，ppl要低（2）说人话之余，还要能attention到前面提过的细节，不能出现自我矛盾。</p>
<h1 id="模型怎么支持长上下文">模型怎么支持长上下文</h1>
<p>看来目前的很多应用场景确实对长上下文有需求，那怎么实现呢？</p>
<p>如果我们直接训练2k/4k长度的模型，然后在推理的时候设定8k或者16k窗口，那么PPL会急剧上升，导致模型直接讲不了人话，原因之一在之前讲RoPE的时候也有提到，对于没有训练过的<u><strong>位置编码</strong></u>，模型不能很好地处理。</p>
<h2 id="直接训练">直接训练</h2>
<p>既然训练的时候用2k/4k不能很好地在8k/16k/32k+的上下文长度下推理，那直接在训练的时候用更长的数据进行训练不就可以了？</p>
<p>这个思路理论上可行，只是实操的时候会遇到一些问题（壕可能觉得不是问题）。</p>
<p>1.训练数据</p>
<p>直观上来说，要训练长上下文的模型，就需要长文本。要达到32k或者更大的长度，基本都只能是书籍。</p>
<p>当然，我们也可以通过把多个中等长度的文本进行拼接，再用来训练。比如筛选4k长度数据，那8条拼在一起也够长了。然后通过attention
mask来限制各段文本之间注意力，让它们可以在各自的位置上各训各的，互不干扰。甚至实际上即使不做attention
mask，效果也挺好。</p>
<p>总的来说，就是【连续长文本】&gt;【多个中等文本拼接】（也可用）</p>
<p>2.资源消耗</p>
<p>来简单看一下transformer在训练中所消耗的资源。</p>
<p>假设模型有 <span class="math inline">\(l\)</span> 层，词表大小为
<span class="math inline">\(V\)</span> ，hidden size为 <span class="math inline">\(h\)</span> ，batch size为 <span class="math inline">\(b\)</span> ，训练窗口长度为 <span class="math inline">\(s\)</span>
，使用Adam优化器训练（需要存一阶和二阶动量），为简化估算，可以假设注意力头数为1。</p>
<ol type="1">
<li>参数量</li>
</ol>
<p>模型总参数量 <span class="math inline">\(\Phi\)</span> = 词向量参数量
+ <span class="math inline">\(l\)</span> * decoder层参数量 = <span class="math inline">\(Vh + l(12h^2 + 13h)\)</span></p>
<p>可以看到参数量和窗口长度 <span class="math inline">\(s\)</span>
无关，模型确定了就是一个固定值。</p>
<ol start="2" type="1">
<li>计算量</li>
</ol>
<p>一次前向计算量 = 输出分类头logits计算 + <span class="math inline">\(l\)</span> * 每层计算量 <span class="math inline">\(\approx2bshV + l*(24bsh^2+4bs^2h)\)</span></p>
<p>（这里的计算忽略了softmax，实际上softmax计算量也是和长度 <span class="math inline">\(s\)</span> 成平方关系）</p>
<p>看一下计算量和参数量的关系。忽略参数量和计算量中的低次项，则有</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\frac{计算量}{参数量}
&amp;=\frac{2bshV + l*(24bsh^2+4bs^2h)}{Vh + l(12h^2 + 13h)}\\
&amp;\rightarrow bs\frac{6h+s}{3h}
\end{aligned}
\end{equation}
\]</span></p>
<p>可以看到，总计算量随着输入长度的增长是平方的。在 <span class="math inline">\(s &lt;&lt; h\)</span>
的时候，基本还可以认为是线性的。目前大部分模型的 <span class="math inline">\(h\)</span> 是在1k到1w这个范围，基本上可以认为
<span class="math inline">\(s\)</span> 和 <span class="math inline">\(sh\)</span>
在不是超级长的情况下，还是可比较的。计算量算是长度的“弱”二次方关系</p>
<ol start="3" type="1">
<li>显存</li>
</ol>
<p>训练过程中，显存主要有模型参数、梯度、optimizer状态值和中间激活值。</p>
<p>训练中，每个参数（<span class="math inline">\(\Phi\)</span>）有一个对应梯度（<span class="math inline">\(\Phi\)</span>），每个参数又对应优化器一个一阶动量和二阶动量（<span class="math inline">\(2\Phi\)</span>）。在混合精度训练中，使用半精度进行前向计算和梯度计算，同时优化器备份一份单精度的优化器状态、梯度和参数用于更新参数，因此共有
<span class="math inline">\((\Phi + \Phi) \times 2 + (\Phi + \Phi +
2\Phi) \times 4 = 20\Phi = 20[Vh + l(12h^2 + 13h)]\)</span>
的参数占用。</p>
<img src="/c4da56c0/mix_precision_fp16.png" class title="混合精度训练">
<p>这部分跟输入长度没有直接关系。</p>
<p>另外一个需要占用显存的部分是中间激活值。</p>
<p>保存激活值是为了计算梯度，因此每个矩阵相乘、softmax、dropout都需要保存输入值的中间的激活值。</p>
<p>对于attention层，输入时先要对 <span class="math inline">\(x\)</span>
做 <span class="math inline">\(Q、K、V\)</span> 投影，需要保存 <span class="math inline">\(x\)</span> 的中间值；计算权重的时候有 <span class="math inline">\(Q、K\)</span> 矩阵的相乘，需要保存 <span class="math inline">\(Q、K\)</span> 矩阵的值；做softmax的时候输入有
<span class="math inline">\(QK^T\)</span>
要保存；以此类推，则需要保存的所有中间激活值为 <span class="math inline">\(11bsh+5bs^2+19sh+4bsh=34bsh+5bs^2\)</span> 。对于
<span class="math inline">\(l\)</span> 层的模型，就再乘以 <span class="math inline">\(l\)</span> 。</p>
<p>可以看到中间激活值随着 <span class="math inline">\(s\)</span>
增大，是以平方关系在增长。训练4k长度的模型和32k长度的模型，激活值所需的显存增长到了64倍。这种情况下，要么扩大集群，加入更多的GPU，要么减小batch
size，或者提升gradient
accumulation的值，无论如何，都会增加<big><u><strong>训练成本</strong></u></big>。</p>
<p>小模型（比如2B、7B）可以硬刚，支持到16k或者32k长度，但是对于更大的长度（200k），或者更大的模型（34B、70B+），这么做就性价比就比较低了。</p>
<p>现在一般的做法是分两阶段，第一阶段用2k或者4k训练一个基础模型，等到模型把文本内容和短位置关系都学好之后，再来用相比第一阶段小的数据量优化在长上下文情况下的效果。</p>
<p>而第二阶段在如何用更少的训练量达到更好的效果这件事上，又有很多工作。</p>
<h2 id="线性插值-position-interpolation">线性插值 Position
Interpolation</h2>
<p>23年6月，Meta在<a href="https://arxiv.org/pdf/2306.15595.pdf">《EXTENDING CONTEXT WINDOW
OF LARGE LANGUAGE MODELS VIA POSITION
INTERPOLATION》</a>中就提出了针对RoPE的线性插值方法PI（Position
Interpolation），可以把2k的基础模型扩展到32k，并在1k个step的训练下就达到很好的效果。</p>
<img src="/c4da56c0/meta_pi.png" class title="PI效果">

<blockquote>
<p>In contrast, LLaMA models that are extended via direct fine-tuning
only saw a minimal increase of the effective context window size kmax
from 2048 to 2560, even after fine-tuning for more than 10000 steps,
with no clear indication of an acceleration in the increase of window
size.</p>
</blockquote>
<p>相比之下，直接基于基础模型进行长文本微调的效率就比较低，训练1w步后，有效长度只是从2048提升到2560。</p>
<p>看来RoPE虽然拥有诸多优点，长上下文外推这个事情却不在其中。</p>
<p>论文中对RoPE外推性能也进行了一些分析。本来RoPE是相对位置编码，而且具有远程衰减的特性，理论上应该具备一定的外推能力，但实际上却不是这样。简单地说，论文发现，在相对位置差
<span class="math inline">\(\left|m-n \right|\)</span>
不太大的时候（&lt;2048），确实能保持远程衰减且attention值保持在较小的区间，但是一旦
<span class="math inline">\(\left|m-n \right|\)</span>
超过这个区间，还是有可能出现很大的值。</p>
<img src="/c4da56c0/meta_rope_ext.png" class title="RoPE外推">
<p>看上图中间的这个图，在位置超过3000的时候，突然出现很大的attention
score。而右边的图使用了插值的方式，就相对稳定。</p>
<p>（远程衰减上界问题具体推导的过程就不展开了，感兴趣的朋友可以看下论文原文）</p>
<p>而另一方面，PI甚至可以在只使用插值，而没有训练的情况下，就拥有一定的长窗口能力。</p>
<img src="/c4da56c0/meta_pi_nosft.png" class title="PI效果">
<p>插值的思路是这样的：如下图所示，左上部分表示预训练过的2k长度的位置编码，右上部分表示在这个基础上直接外推，这样就会出现很多之前没有训练过的值，模型的学习成本会比较高；下半部分表示在已经训练好的2k模型基础上进行插值，类似于在每两个位置编码之间，插入一个位置点，这样总的位置表示就从2k增加到4k。在这个基础上再进行少量的微调，模型就可以很快学到新的位置表示。</p>
<img src="/c4da56c0/meta_pi_explanation.png" class title="PI效果">
<p>这个思路也很符合直觉，比如原来模型针对位置1，位置2，位置3...学到了一定的规律，现在告诉模型，位置不一定是整数，变成位置1，位置1.5，位置2，位置2.5...。虽然值变了，但是相对关系还在，因此模型也能借助原来学到的关系，快速推广到“0.5”的位置中。</p>
<p>由于三角函数光滑的特性，我们可以重新定义attention
score的计算，使得结果不要出现异常大的值，也就是 <span class="math inline">\(\tilde{a}(s)=a(Ls/L^{\prime})\)</span> ，<span class="math inline">\(L\)</span> 是原长度（也就是2048），<span class="math inline">\(L^{\prime}\)</span>
是我们想要增大的长度（8k/16k/32k等）。</p>
<p>更具体来说，就是对RoPE做一点修改</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\mathbf{f}&#39;(\mathbf{x},m)=\mathbf{f}\left(\mathbf{x},\frac{mL}{L&#39;}\right)
\end{aligned}
\end{equation}
\]</span></p>
<p>相当于位置 <span class="math inline">\(m\)</span> 的分辨率从1下降成了
<span class="math inline">\({L}/{L&#39;}\)</span>。</p>
<p>（一通分析，实现却很简单，工程师的福音，真希望以后论文都能给出这样的结果）</p>
<p>然后使用几万到几十万条样本进行预训练，就可以了。</p>
<p>（文章里还埋有一个后续的关注点，在对长上下文进行训练后，在短上下文的场景下，效果略略有所下降）</p>
<h2 id="ntk-aware-interpolation">NTK-Aware Interpolation</h2>
<p>线性插值相当于直接线性拉伸了cos函数，减小了不同位置之间的差异，使得模型对于相近位置的区分度有所下降，多少有点简单粗暴，而NTK-Aware
Interpolation就提出了理论上看起来更为“精致”方法，一种在RoPE上做<u><strong>非线性插值</strong></u>的方法，NTK-Aware
Scaled RoPE。CodeLlama就是用这种方法把长度推广到1M。</p>
<p>NTK，就是Neural Tangent
Kernel，神经正切核。具体是什么，让GLM4帮忙解答一下</p>
<blockquote>
<p>Neural Tangent Kernel (NTK)
是深度学习理论中的一个概念，它是在训练无限宽的神经网络时出现的一个理论工具。在深度学习领域，宽度通常指的是网络中每一层的神经元数量。NTK
的提出，为理解深度学习提供了一个新的视角，特别是在网络宽度趋于无穷大时，网络的行为可以用线性模型来近似。<br>
在理想情况下，当网络宽度趋于无穷大时，网络的训练过程可以用一个固定的核函数来描述，这个核函数就是
Neural Tangent
Kernel。这个核函数描述了网络输出与输入之间关系的性质，使得我们可以用核方法来分析这类网络的训练和泛化能力。<br>
具体来说，NTK
使得我们能够预测在无限宽的网络中，随着训练的进行，网络权重的演化情况，以及网络的损失函数如何随时间变化。这些预测在数学上更加清晰和可分析，有助于我们深入理解深度学习的工作原理，特别是在泛化和优化方面。<br>
NTK
的研究对设计新的网络架构、训练算法和理论分析提供了重要的理论基础。它也表明，在一定的条件下，深度学习可以简化为传统的统计学习理论，如核方法，这为将深度学习与经典机器学习理论联系起来提供了桥梁。</p>
</blockquote>
<p>这个了解各大概就行。那么具体在长上下文扩展这个事上，NTK有什么说法呢？</p>
<p>它认为，线性插值把所有方向上的分量一视同仁，把旋转速度统一变慢，这里有问题。</p>
<p>回顾一下在RoPE中，对位置 <span class="math inline">\(m\)</span>
的输入向量进行“旋转”的矩阵长这样</p>
<img src="/c4da56c0/rope_matrix.png" class title="RoPE旋转矩阵">
<p>它把输入向量的元素划分成2个2个一组，共有 <span class="math inline">\(d/2\)</span>
组，每组有两个元素，不同组分别旋转。这里可以发现每组的旋转速度并不相同，由于
<span class="math inline">\(\theta_j=10000^{-2j/d}\)</span> ，可以看到，
<span class="math inline">\(j\)</span> 越小越靠前的组旋转越快，<span class="math inline">\(j\)</span> 越大的旋转越慢。这里 <span class="math inline">\(base=10000\)</span> ， <span class="math inline">\(base\)</span>
越大，整体的旋转速度越慢，反之越快。同一个位置下，由于旋转速度不同，位置向量的信号频率有高低，前面的部分是高频，越往后越低频。</p>
<p>不加区分地对高低频信息进行拉伸，会丢失很多重要的高频信息，这样不是很好。高频信号应该外推，以防止分辨率太低，都挤在一起；而低频信号就适合插值。</p>
<p>怎么实现“高频外推，低频内插”？</p>
<p>先看回讲<a href="https://www.zhihu.com/people/us4ever">RoPE</a>的时候，对于2维情况，有</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
&amp;\langle f_q(\boldsymbol{q}_m,m),f_k(\boldsymbol{k}_n,n)\rangle=
\mathrm{Re}\left[\boldsymbol{q}_m\boldsymbol{k}_n^*e^{i(m-n)\theta}\right]
\end{aligned}
\end{equation}
\]</span></p>
<p>推广到高维的情况，则有</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\langle
f_q(\boldsymbol{q}_m,m),f_k(\boldsymbol{k}_n,n)\rangle=&amp;\mathrm{Re}[\sum_j^{d/2}h_je^{is\theta_j}]\\
\end{aligned}
\end{equation}
\]</span></p>
<p>其中 <span class="math inline">\(h_j=\boldsymbol{q}_m\boldsymbol{k}_n^*\)</span>
，<span class="math inline">\(s=m-n\)</span> 。</p>
<p>在这个公式下，线性插值相当于把</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\mathrm{Re}[\sum_j^{d/2}h_je^{is\theta_j}]\\
\end{aligned}
\end{equation}
\]</span></p>
<p>变成了</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\mathrm{Re}[\sum_j^{d/2}h_je^{i\frac{s}{\alpha}\theta_j}]\\
\end{aligned}
\end{equation}
\]</span></p>
<p>其中 <span class="math inline">\(\alpha=L&#39;/L&gt;1\)</span>
，相当于把 <span class="math inline">\(s\)</span> 压缩了。</p>
<p>而NTK-Aware Scaled RoPE则是对 <span class="math inline">\(\theta_j\)</span>
进行了改动，具体来说，是修改了其中的base值（RoPE中原来是10000）</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\hat{base}=base\times\alpha^{\frac{d}{d-2}}
\end{aligned}
\end{equation}
\]</span></p>
<p>则有</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\hat{\theta_j}=\hat{base}^{-2j/d}=base^{-2j/d}\times\alpha^{\frac{-2j}{d-2}}
\end{aligned}
\end{equation}
\]</span></p>
<p>相当于 <span class="math inline">\(\theta\)</span> 乘了一个系数 <span class="math inline">\(\alpha^{\frac{-2j}{d-2}}\)</span> ，当 <span class="math inline">\(j\)</span> 比较小的时候， <span class="math inline">\(\alpha^{\frac{-2j}{d-2}}\)</span>
接近1，相当于直接进行了外推，而当 <span class="math inline">\(j\)</span>
比较大的时候（注意 <span class="math inline">\(j\)</span> 的取值是从0到
<span class="math inline">\(d/2 - 1\)</span>），<span class="math inline">\(\alpha^{\frac{-2j}{d-2}}\)</span> 就接近 <span class="math inline">\(\alpha^{-1}\)</span> ，这就和线性插值趋近了。</p>
<p>引用来自<a href="https://zhuanlan.zhihu.com/p/645770522">知乎一篇文章</a>的一个视角来理解NTK-Aware
Interpolation</p>
<blockquote>
<p>有意思的解释一下，RoPE
的行为就像一个时钟。12小时时钟基本上是一个维度为 3、底数为 60 的
RoPE。因此，每秒钟，分针转动 1/60 分钟，每分钟，时针转动
1/60。现在，如果将时间减慢 4 倍，那就是二使用的线性RoPE
缩放。不幸的是，现在区分每一秒，因为现在秒针几乎每秒都不会移动。因此，如果有人给你两个不同的时间，仅相差一秒，你将无法从远处区分它们。NTK-Aware
RoPE 扩展不会减慢时间。一秒仍然是一秒，但它会使分钟减慢 1.5
倍，将小时减慢 2 倍。这样，您可以将 90 分钟容纳在一个小时中，将 24
小时容纳在半天中。所以现在你基本上有了一个可以测量 129.6k 秒而不是 43.2k
秒的时钟。由于在查看时间时不需要精确测量时针，因此与秒相比，更大程度地缩放小时至关重要。不想失去秒针的精度，但可以承受分针甚至时针的精度损失。</p>
</blockquote>
<p>另外苏剑林从“进制”角度对RoPE作了分析，感兴趣的朋友可以看下<a href="https://kexue.fm/archives/9675">原文</a>，也很巧妙。</p>
<p>在YaRN的<a href="https://arxiv.org/pdf/2309.00071.pdf">论文</a>中，对NTK的优缺点作了点评</p>
<blockquote>
<p>Given the results from [6], this method performs much better at
extending the context size of non-finetuned models compared to PI [9].
However, one major disadvantage of this method is that given it is not
just an interpolation scheme, some dimensions are slightly extrapolated
to "out-of-bound" values, thus fine-tuning with "NTK-aware"
interpolation [6] yields inferior results to PI [9]. Furthermore, due to
the "out-of-bound" values, the theoretical scale factor s does not
accurately describe the true context extension scale. In practice, the
scale value s has to be set higher than the expected scale for a given
context length extension.</p>
</blockquote>
<p>NTK的优点是不用微调的情况下，能比线性插值做得好。但是由于低频部分还是会有部分被外推到超出范围的值，因此在设定系数的时候，要比需要的设得更大才行。比如想4k模型要在32k的时候取得比较好的效果，那
<span class="math inline">\(\alpha=L&#39;/L\)</span>
就要选得比8更大一些，比如16。</p>
<h2 id="ntk-by-parts">NTK-by-parts</h2>
<p>NTK-by-parts的方法在NTK插值的基础上又多想了一层。它认为无论是线性插值还是NTK-aware插值，认为RoPE的所有分量都对网络有同样的重要性。而NTK-by-parts的思路认为，应该区别对待不同分量，他们对网络的影响有所不同。</p>
<p>对于分量 <span class="math inline">\(j\)</span> ，RoPE嵌入的波长</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\lambda_j=\frac{2\pi}{\theta_j}=2\pi\cdot base^{\frac{2j}{d}}
\end{aligned}
\end{equation}
\]</span></p>
<p><span class="math inline">\(\lambda_j\)</span>
代表旋转一周所需的长度。当 <span class="math inline">\(j\)</span>
比较小时，波长短，反之波长长，这也对应我们前面说的，前面的分量高频，后面的分量低频。</p>
<p>这里观察到，当 <span class="math inline">\(j\)</span>
比较大时，波长就可能比 <span class="math inline">\(L\)</span>
要大，这种情况下RoPE一圈都没有转完，会导致这个分量的分布不均匀（比如
<span class="math inline">\(sin\)</span>
只转了1/4圈，那值全都集中在0<sub>1之间，-1</sub>0的就没有值）。这种情况下，这个维度的编码相当于是绝对位置编码了，因为几乎每个位置都有自己独特的一个值。反之当
<span class="math inline">\(j\)</span>
比较小时，模型只能访问到相对位置信息。</p>
<p>此外，插值会导致相邻或相近位置的关系更近（因为旋转量小，点积更大），文章认为这样会损害模型理解局部关系的能力，因此选择不对高频部分进行插值。NTK-by-parts的思路是</p>
<ul>
<li>如果维度 <span class="math inline">\(j\)</span> 的波长 <span class="math inline">\(\lambda_j\)</span> 远小于上下文长度
，就不插值只外推<br>
</li>
<li>如果波长 <span class="math inline">\(\lambda_j\geq\)</span>
上下文长度，就只插值不外推<br>
</li>
<li>中间的部分就同时存在两种，类似NTK-aware interpolation</li>
</ul>
<p>引入一个比例 <span class="math inline">\(r(j)=\frac{L}{\lambda_j}\)</span>
来表示波长和上下文长度的关系。另外还需要两个阈值 <span class="math inline">\(\beta_1、\beta_2\)</span> 来区分以上三种情况。如果
<span class="math inline">\(r(j)&lt;\beta_1\)</span>
，就认为波长大，如果 <span class="math inline">\(r(j)\geq
\beta_2\)</span> ，就认为波长小。方便起见，定义一个斜坡函数</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\left.\gamma(r)=\left\{\begin{matrix}0&amp;if&amp;r(j)&lt;\beta_1\\1&amp;if&amp;r(j)\geq\beta_2\\\frac{r-\beta_1}{\beta_2-\beta_1}&amp;otherwise\end{matrix}\right.\right.
\end{aligned}
\end{equation}
\]</span></p>
<p>NTK-by-parts插值可以定义为对 <span class="math inline">\(\theta_j\)</span> 的一个操作</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\hat{\theta_j}=\left(1-\gamma(r(j))\right)\frac{\theta_j}s+\gamma(r(j))\theta_j
\end{aligned}
\end{equation}
\]</span></p>
<p>这里有两个超参 <span class="math inline">\(\beta_1、\beta_2\)</span>
要定，文中根据实验给出的推荐值是 <span class="math inline">\(\beta_1=1，\beta_2=32\)</span>
，也就是当波长和上下文长度一样长的时候，认为波长大，就只插值，当波长小于上下文长度1/32时，认为波长远小于上下文，就只外推。</p>
<h2 id="dynamically-ntk-scaled-rope">Dynamically NTK Scaled RoPE</h2>
<p>无论是线性插值还是NTK-Aware
Interpolation，都是通过使用一个固定的系数，对原RoPE做了一个缩放，这样就会有一些局限。一方面，这种情况下，模型能支持的最大上下文就由使用的这个缩放系数来决定了，超出这个范围的，依然会出现attention
score暴增的风险。另一方面，在解码过程中，当已解码的长度 <span class="math inline">\(l\)</span> 还没有达到训练长度 <span class="math inline">\(L\)</span> 时，就使用 <span class="math inline">\(\alpha\)</span>
来修改base，也可能带来一些损失。Dynamically NTK Scaled
RoPE是在NTK插值的基础上，把固定的系数改成动态的系数。</p>
<p>具体来说，就是</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\hat{\alpha}=max(1,\frac{l}{L})
\end{aligned}
\end{equation}
\]</span></p>
<p>这样随着解码长度 <span class="math inline">\(l\)</span> 的增长，当
<span class="math inline">\(l&gt;L\)</span> 之后 <span class="math inline">\(\alpha\)</span> 从1逐渐增大， <span class="math inline">\(l\leq L\)</span> 时则不需要改动。</p>
<p>有一点要注意的是，使用动态的系数时要注意kv-cache的缓存机制是否正确，记得要缓存使用应用RoPE之前的值。</p>
<h2 id="yarn">YaRN</h2>
<p>上面的方法都是使用插值，研究者发现，随着插值，token之间的距离变得更近（因为现在旋转角度变小了），平均最小距离在减小，这样注意力softmax的分布会变得更尖（也就是都集中在某个区间）。换句话说，就是RoPE原本远距离衰减的特性变弱了，衰减得更不明显，就会导致模型更平均地关注到更多的token，这样就削弱了注意力机制，导致输出质量下降。</p>
<p>当将RoPE插值到更长的上下文时，注意力softmax分布中的熵会减少，因此研究者的目标是逆转这种熵减（即增加注意力logit的“温度”）。这可以通过在softmax之前，将中间注意力矩阵乘以温度
<span class="math inline">\(t&gt;1\)</span>
来完成，但由于RoPE被编码为一个旋转矩阵，就可以简单地按常数因子 <span class="math inline">\(\sqrt{t}\)</span>
来扩展RoPE的长度。这样可以不必修改注意力的代码。</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\text{softmax}\left(\frac{\mathbf{q}_m^T\mathbf{k}_n}{t\sqrt{d}}\right)
\end{aligned}
\end{equation}
\]</span></p>
<p>通过对Llama 1和Llama 2的实验，文章提出了建议值<span class="math inline">\(\begin{aligned}\sqrt{\frac1t}&amp;=0.1\ln(\alpha)+1.\end{aligned}\)</span>。这个值的效果再Llama各个版本和规模的模型都能有比较好的效果，这样说明这样的熵变在长文本中是常见的。</p>
<p>YaRN最终的方法就是结合NTK-by-parts，以及使用这个温度值对attention
score进行调整。</p>
<p>YaRN在微调以及无微调的情况下，效果都比上面的几种都要好。</p>
<h2 id="logn">logn</h2>
<p>logn指的是对attention计算中的缩放因子 <span class="math inline">\(\sqrt{d}\)</span>
进行通过logn进行改进的一个方法，苏剑林在<a href="https://zhuanlan.zhihu.com/p/678755776">博客</a>中进行了分析。大致的思路和YaRN中的缩放颇有些相似。</p>
<p>简单来说，依然是希望在长上下文的时候，引入了更多token的情况下，已有的token还能保持聚焦在原来哪些token上，而不要被过分分散了注意力。因此提出了一个新的attention
score公式</p>
<p><span class="math display">\[
\begin{equation}
\begin{aligned}
\text{Attention}_E(\boldsymbol{Q},\boldsymbol{K},\boldsymbol{V})=\text{softmax}\left(\frac{\log_{L}{L&#39;}}{\sqrt{d}}\boldsymbol{Q}\boldsymbol{K}^\mathrm{T}\right)\boldsymbol{V}
\end{aligned}
\end{equation}
\]</span></p>
<p>可以看到，当 <span class="math inline">\(L&#39;&gt;L\)</span>
时，其效果和YaRN中的放缩是类似的。</p>
<h2 id="其他">其他</h2>
<p>在扩展推理长度上，还有很多其他有效的工作，比如各种window
attention，streaming LLM，LongLoRA，Focus
Transformer等，还有数据、评测等更方面的分析，待逐个梳理。</p>
<h1 id="小结">小结</h1>
<p>较短的预训练模型（2k、4k）应用在长上下文会因为训练和推理的两个不一致导致效果下降</p>
<ul>
<li>推理时用到了没训练过的位置编码<br>
</li>
<li>推理时注意力机制所处理的token数量远超训练时的数量，导致注意力机制的崩坏</li>
</ul>
<p>这两个问题分别可以从位置编码和attention score的放缩来缓解。</p>
<p>线性插值PI、NTK插值、分部NTK插值都可以缓解第一个问题，logn和YaRN则把第二个问题纳入的考虑。目前这些方法在实际应用中也有很多变体，包括超参的修改，函数的重定义等。</p>
<h1 id="reference">Reference</h1>
<p>【1】分析transformer模型的参数量、计算量、中间激活、KV cache
https://zhuanlan.zhihu.com/p/624740065<br>
【2】EXTENDING CONTEXT WINDOW OF LARGE LANGUAGE MODELS VIA POSITION
INTERPOLATION https://arxiv.org/pdf/2306.15595.pdf<br>
【3】Transformer升级之路：10、RoPE是一种β进制编码
https://kexue.fm/archives/9675<br>
【4】YaRN: Efficient Context Window Extension of Large Language Models
https://arxiv.org/pdf/2309.00071.pdf<br>
【5】详解基于调整RoPE旋转角度的大模型长度外推方法
https://mp.weixin.qq.com/s/RtI95hu-ZLxGkdGuNIkERQ<br>
【6】浅谈LLM的长度外推 https://zhuanlan.zhihu.com/p/645770522
【7】想让大模型在prompt中学习更多示例，这种方法能让你输入更多字符
https://cloud.tencent.com/developer/article/2330611<br>
【8】Transformer升级之路：8、长度外推性与位置鲁棒性
https://spaces.ac.cn/archives/9444<br>
【9】RoPE外推优化——支持192K上下文长度
https://zhuanlan.zhihu.com/p/678755776 ***</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>长上下文</tag>
        <tag>窗口外推</tag>
      </tags>
  </entry>
  <entry>
    <title>从代码实现看normalization-到底做了什么</title>
    <url>/b70b4a2d.html</url>
    <content><![CDATA[<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<hr>
<p>之前在<a href="http://www.linsight.cn/6a40bfa5.html">《transformer中normalization的二三事》</a>从思路上梳理了关于常用的normalization的内容。发出之后收到了一些反馈，关于这些norm在实际使用中是怎么实现的，有一些疑问。</p>
<p>因此本篇从实现的角度，来看下这些norm在不同的场景下，到底做了什么。</p>
<p>代码已上传至<a href="https://github.com/Saicat/normalization_exp">https://github.com/Saicat/normalization_exp</a></p>
<h1 id="二维数据">二维数据</h1>
<p>先看下二维数据的情况下normalization是怎么做的。二维数据一般可以对应到神经网络中的全连接层，比如CNN中分类网络最后几个特征层。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># epsilon</span></span><br><span class="line">eps = <span class="number">1e-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个随机二维输入</span></span><br><span class="line">batch_size = <span class="number">3</span></span><br><span class="line">feature_num = <span class="number">4</span></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">inputs = torch.randn(batch_size, feature_num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二维输入:\n&#x27;</span>, inputs)</span><br></pre></td></tr></table></figure>
<p>这里定义了一个3×4的矩阵，相当于batch
size=3，特征向量维度为4。得到的随机二维输入是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">二维输入:</span><br><span class="line"> tensor([[ <span class="number">1.5410</span>, -<span class="number">0.2934</span>, -<span class="number">2.1788</span>,  <span class="number">0.5684</span>],</span><br><span class="line">        [-<span class="number">1.0845</span>, -<span class="number">1.3986</span>,  <span class="number">0.4033</span>,  <span class="number">0.8380</span>],</span><br><span class="line">        [-<span class="number">0.7193</span>, -<span class="number">0.4033</span>, -<span class="number">0.5966</span>,  <span class="number">0.1820</span>]])</span><br></pre></td></tr></table></figure>
<h2 id="batchnorm">batchnorm</h2>
<p>用pytorch自带的BatchNorm1d对二维输入进行操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># torch自带的batchnorm</span></span><br><span class="line">torch_bn = nn.BatchNorm1d(num_features=feature_num, affine=<span class="literal">True</span>)  <span class="comment"># 注意完整的batchnorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿射变化初始化的weigh=1，bias=0，相当于没有进行变换，看不出效果</span></span><br><span class="line"><span class="comment"># 手动改成别的值，用于对比包含仿射变换的效果</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">torch_bn.weight = nn.Parameter(torch_bn.weight * torch.randn(feature_num))</span><br><span class="line">torch_bn.bias = nn.Parameter(torch_bn.bias + torch.randn(feature_num))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;weight:\n&#x27;</span>, torch_bn.weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bias:\n&#x27;</span>, torch_bn.bias, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_bn(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch bn结果:\n&#x27;</span>, torch_normed)</span><br></pre></td></tr></table></figure>
<p>注意完整的batchnorm/layernorm等，是包括①归一化和②仿射变换（缩放+平移，也就是有可训练参数这部分）两步的。在BatchNorm接口中通过参数"affine"来决定是否进行放射变换。如果"affine"为False，相当于只是在某个维度上对数据进行了归一化处理。</p>
<p>而且pytorch中各种norm的接口初始化都把缩放系数初始化为1.0，平移系数初始化为0，相当于没有进行变换。为了把仿射变换的影响也一起对比，这里手动给缩放和平移系数都添加了一个随机数，变成如下数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([<span class="number">0.6614</span>, <span class="number">0.2669</span>, <span class="number">0.0617</span>, <span class="number">0.6213</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">bias:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([-<span class="number">0.4519</span>, -<span class="number">0.1661</span>, -<span class="number">1.5228</span>,  <span class="number">0.3817</span>], requires_grad=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>
<p>这里缩放系数weight和平移系数bias的维度都是4，对应特征向量的维度。</p>
<p>输入矩阵用官方接口batchnorm之后得到的结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch bn结果:</span><br><span class="line"> tensor([[ <span class="number">0.4756</span>,  <span class="number">0.0513</span>, -<span class="number">1.6033</span>,  <span class="number">0.4715</span>],</span><br><span class="line">        [-<span class="number">1.0197</span>, -<span class="number">0.5421</span>, -<span class="number">1.4535</span>,  <span class="number">1.0937</span>],</span><br><span class="line">        [-<span class="number">0.8117</span>, -<span class="number">0.0077</span>, -<span class="number">1.5115</span>, -<span class="number">0.4202</span>]],</span><br><span class="line">       grad_fn=&lt;NativeBatchNormBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>接下来手动实现batchnorm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动bn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值和标准差</span></span><br><span class="line">mean = torch.mean(inputs, dim=<span class="number">0</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值:\n&#x27;</span>, mean)</span><br><span class="line">std = torch.std(inputs, dim=<span class="number">0</span>, keepdim=<span class="literal">True</span>, unbiased=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标准差:\n&#x27;</span>, std, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">manual_normed = (inputs - mean) / (std + eps) * torch_bn.weight + torch_bn.bias</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动bn结果:\n&#x27;</span>, manual_normed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动操作和torch自带操作有点误差，&lt;1e-4</span></span><br><span class="line">isclose = torch.isclose(torch_normed, manual_normed, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(isclose)</span><br></pre></td></tr></table></figure>
<p>在dim=0这个维度上计算均值和标准差，即对整个batch内所有sample的同一个feature，进行操作，获得结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">均值:</span><br><span class="line"> tensor([[-<span class="number">0.0876</span>, -<span class="number">0.6985</span>, -<span class="number">0.7907</span>,  <span class="number">0.5295</span>]])</span><br><span class="line">标准差:</span><br><span class="line"> tensor([[<span class="number">1.1612</span>, <span class="number">0.4971</span>, <span class="number">1.0630</span>, <span class="number">0.2692</span>]]) </span><br></pre></td></tr></table></figure>
<p>均值和标准差的维度也是和特征向量的维度一致。这里计算mean和std的时候keepdim设置为True和False都可以，最后都会自动broadcast。</p>
<p>一个要注意的点是，计算std的时候unbiased要设置为False，表明这里是对标准差的有偏估计，否则算出来的结果和torch的batchnorm接口不一致。</p>
<p>用手动计算出来的均值和标准差对输入进行归一化，再进行放射变换，得到手动计算的batchnorm结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">手动bn结果:</span><br><span class="line"> tensor([[ <span class="number">0.4756</span>,  <span class="number">0.0514</span>, -<span class="number">1.6033</span>,  <span class="number">0.4715</span>],</span><br><span class="line">        [-<span class="number">1.0197</span>, -<span class="number">0.5421</span>, -<span class="number">1.4535</span>,  <span class="number">1.0937</span>],</span><br><span class="line">        [-<span class="number">0.8117</span>, -<span class="number">0.0077</span>, -<span class="number">1.5115</span>, -<span class="number">0.4202</span>]], grad_fn=&lt;AddBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>这里用torch.isclose接口验证官方batchnorm和手动计算的batchnorm是否相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]])</span><br></pre></td></tr></table></figure>
<p>为什么没有用equal，因为发现两个结果会有一点点误差，相对误差大概在1e-5~1e-4之间，应该是因为使用的eps不同导致。</p>
<h2 id="layernorm">layernorm</h2>
<p>看下layernorm对于二维数据的操作，还是用同样的3×4的输入</p>
<p>使用torch官方接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># torch自带的layernorm</span></span><br><span class="line">torch_ln = nn.LayerNorm(normalized_shape=feature_num, elementwise_affine=<span class="literal">True</span>)  <span class="comment"># 注意完整的layernorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿射变化初始化的weigh=1，bias=0，相当于没有进行变换，看不出效果</span></span><br><span class="line"><span class="comment"># 手动改成别的值，用于对比包含仿射变换的效果</span></span><br><span class="line">torch.manual_seed(<span class="number">2</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">torch_ln.weight = nn.Parameter(torch_ln.weight * torch.randn(feature_num))</span><br><span class="line">torch_ln.bias = nn.Parameter(torch_ln.bias + torch.randn(feature_num))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;weight:\n&#x27;</span>, torch_ln.weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bias:\n&#x27;</span>, torch_ln.bias, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_ln(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch ln结果:\n&#x27;</span>, torch_normed)</span><br></pre></td></tr></table></figure>
<p>得到layernorm仿射变换的系数如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([ <span class="number">0.3923</span>, -<span class="number">0.2236</span>, -<span class="number">0.3195</span>, -<span class="number">1.2050</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">bias:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([ <span class="number">1.0445</span>, -<span class="number">0.6332</span>,  <span class="number">0.5731</span>,  <span class="number">0.5409</span>], requires_grad=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>
<p>维度依然是和特征向量的维度一致。</p>
<p>官方layernorm的结果是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch ln结果:</span><br><span class="line"> tensor([[ <span class="number">1.5120</span>, -<span class="number">0.6001</span>,  <span class="number">1.0604</span>, -<span class="number">0.0392</span>],</span><br><span class="line">        [ <span class="number">0.7249</span>, -<span class="number">0.3772</span>,  <span class="number">0.3331</span>, -<span class="number">0.9155</span>],</span><br><span class="line">        [ <span class="number">0.6645</span>, -<span class="number">0.6209</span>,  <span class="number">0.7693</span>, -<span class="number">1.4324</span>]],</span><br><span class="line">       grad_fn=&lt;NativeLayerNormBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>接下来手动实现一下，和官方结果作对比。</p>
<p>在dim=1计算均值和向量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动ln</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">mean = torch.mean(inputs, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值:\n&#x27;</span>, mean)</span><br><span class="line">std = torch.std(inputs, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>, unbiased=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标准差:\n&#x27;</span>, std, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">manual_normed = (inputs - mean) / (std + eps) * torch_ln.weight + torch_ln.bias</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动ln结果:\n&#x27;</span>, manual_normed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动操作和torch自带操作有点误差，&lt;1e-4</span></span><br><span class="line">isclose = torch.isclose(torch_normed, manual_normed, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(isclose)</span><br></pre></td></tr></table></figure>
<p>得到的均值和标准差是这样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">均值:</span><br><span class="line"> tensor([[-<span class="number">0.0907</span>],</span><br><span class="line">        [-<span class="number">0.3104</span>],</span><br><span class="line">        [-<span class="number">0.3843</span>]])</span><br><span class="line">标准差:</span><br><span class="line"> tensor([[<span class="number">1.3691</span>],</span><br><span class="line">        [<span class="number">0.9502</span>],</span><br><span class="line">        [<span class="number">0.3458</span>]]) </span><br></pre></td></tr></table></figure>
<p>对输入进行归一化和仿射变换，结果如下，和官方接口结果一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">手动ln结果:</span><br><span class="line"> tensor([[ <span class="number">1.5120</span>, -<span class="number">0.6001</span>,  <span class="number">1.0604</span>, -<span class="number">0.0392</span>],</span><br><span class="line">        [ <span class="number">0.7249</span>, -<span class="number">0.3772</span>,  <span class="number">0.3331</span>, -<span class="number">0.9155</span>],</span><br><span class="line">        [ <span class="number">0.6645</span>, -<span class="number">0.6209</span>,  <span class="number">0.7693</span>, -<span class="number">1.4325</span>]], grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]])</span><br></pre></td></tr></table></figure>
<h2 id="对比">对比</h2>
<p>对于二维输入，batchnorm和layernorm在做第①步归一化的时候，方向如下图</p>
<img src="/b70b4a2d/bn_and_ln.png" class title="bn和ln">
<p>batchnorm在dim=0，即batch方向操作；而layernorm在dim=1，即特征向量内部进行操作。</p>
<p>但是无论是batchnorm还是layernorm，在做仿射变换的时候，使用的系数形状都和输入的特征向量相同，可以认为在放射变化这一步上，二者的操作是一样。</p>
<h1 id="cv数据">CV数据</h1>
<p>再看下CV场景下的情况。</p>
<p>CV数据形状一般为[N,C,H,W]，N为batch
size，C为channel即特征数，H和W分别是feature
map的高和宽。先定义一个CV输入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个随机四维输入，[N,C,H,W]</span></span><br><span class="line">batch_size = <span class="number">2</span></span><br><span class="line">channel = <span class="number">2</span></span><br><span class="line">height = <span class="number">2</span></span><br><span class="line">width = <span class="number">3</span></span><br><span class="line">torch.manual_seed(<span class="number">3</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">inputs = torch.randn(batch_size, channel, height, width)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;四维输入:\n&#x27;</span>, inputs)</span><br></pre></td></tr></table></figure>
<p>输入如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">四维输入:</span><br><span class="line"> tensor([[[[-<span class="number">0.0766</span>,  <span class="number">0.3599</span>, -<span class="number">0.7820</span>],</span><br><span class="line">          [ <span class="number">0.0715</span>,  <span class="number">0.6648</span>, -<span class="number">0.2868</span>]],</span><br><span class="line"></span><br><span class="line">         [[ <span class="number">1.6206</span>, -<span class="number">1.5967</span>,  <span class="number">0.4046</span>],</span><br><span class="line">          [ <span class="number">0.6113</span>,  <span class="number">0.7604</span>, -<span class="number">0.0336</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[-<span class="number">0.3448</span>,  <span class="number">0.4937</span>, -<span class="number">0.0776</span>],</span><br><span class="line">          [-<span class="number">1.8054</span>,  <span class="number">0.4851</span>,  <span class="number">0.2052</span>]],</span><br><span class="line"></span><br><span class="line">         [[ <span class="number">0.3384</span>,  <span class="number">1.3528</span>,  <span class="number">0.3736</span>],</span><br><span class="line">          [ <span class="number">0.0134</span>,  <span class="number">0.7737</span>, -<span class="number">0.1092</span>]]]])</span><br></pre></td></tr></table></figure>
<h2 id="batchnorm-1">batchnorm</h2>
<p>图像数据需要用BatchNorm2d，设置的特征数为channel</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># torch自带的batchnorm</span></span><br><span class="line">torch_bn = nn.BatchNorm2d(num_features=channel, affine=<span class="literal">True</span>)  <span class="comment"># 注意完整的batchnorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿射变化初始化的weigh=1，bias=0，相当于没有进行变换，看不出效果</span></span><br><span class="line"><span class="comment"># 手动改成别的值，用于对比包含仿射变换的效果</span></span><br><span class="line">torch.manual_seed(<span class="number">4</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">torch_bn.weight = nn.Parameter(torch_bn.weight * torch.randn(channel))</span><br><span class="line">torch_bn.bias = nn.Parameter(torch_bn.bias + torch.randn(channel))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;weight:\n&#x27;</span>, torch_bn.weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bias:\n&#x27;</span>, torch_bn.bias, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_bn(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch bn结果:\n&#x27;</span>, torch_normed)</span><br></pre></td></tr></table></figure>
<p>仿射变换的参数如下，形状和channel数是一致的，和二维数据的情况一样。这里同样手动给缩放和平移系数加了个随机数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([-<span class="number">1.6053</span>,  <span class="number">0.2325</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">bias:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([<span class="number">2.2399</span>, <span class="number">0.8473</span>], requires_grad=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>
<p>用torch官方batchnorm2d得到的结果是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch bn结果:</span><br><span class="line"> tensor([[[[<span class="number">2.2043</span>, <span class="number">1.1275</span>, <span class="number">3.9442</span>],</span><br><span class="line">          [<span class="number">1.8388</span>, <span class="number">0.3753</span>, <span class="number">2.7226</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">1.2185</span>, <span class="number">0.2591</span>, <span class="number">0.8559</span>],</span><br><span class="line">          [<span class="number">0.9175</span>, <span class="number">0.9620</span>, <span class="number">0.7252</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[<span class="number">2.8658</span>, <span class="number">0.7975</span>, <span class="number">2.2066</span>],</span><br><span class="line">          [<span class="number">6.4684</span>, <span class="number">0.8186</span>, <span class="number">1.5090</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.8362</span>, <span class="number">1.1387</span>, <span class="number">0.8467</span>],</span><br><span class="line">          [<span class="number">0.7392</span>, <span class="number">0.9660</span>, <span class="number">0.7027</span>]]]], grad_fn=&lt;NativeBatchNormBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>再来手动实现一下batchnorm2d</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动bn</span></span><br><span class="line"></span><br><span class="line">manual_normed = []</span><br><span class="line"><span class="comment"># 每个channel分别处理</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(channel):</span><br><span class="line">    <span class="comment"># 计算均值和标准差</span></span><br><span class="line">    mean = torch.mean(inputs[:, c, :, :])</span><br><span class="line">    std = torch.std(inputs[:, c, :, :], unbiased=<span class="literal">False</span>)</span><br><span class="line">    normed = (inputs[:, c, :, :] - mean) / (std + eps) * torch_bn.weight[c] + torch_bn.bias[c]</span><br><span class="line">    normed = normed.unsqueeze(<span class="number">1</span>)</span><br><span class="line">    manual_normed.append(normed)</span><br><span class="line">manual_normed = torch.cat(manual_normed, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动bn结果:\n&#x27;</span>, manual_normed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动操作和torch自带操作有点误差，&lt;1e-4</span></span><br><span class="line">isclose = torch.isclose(torch_normed, manual_normed, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证结果:\n&#x27;</span>, isclose)</span><br></pre></td></tr></table></figure>
<p>如同之前文章所解释，由于CV的卷积计算是通过二维滑动窗口在同一个输入平面上遍历所有位置，因此同一个channel下的多个值对于这个卷积和也是一种"batch"。</p>
<p>相当于对于每一个特征值，计算平均和标准差的范围是N×H×W。</p>
<img src="/b70b4a2d/cv_batchnorm.png" class title="CV数据batchnorm">
<p>手动计算得到的结果如下，和官方接口一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">手动bn结果:</span><br><span class="line"> tensor([[[[<span class="number">2.2043</span>, <span class="number">1.1275</span>, <span class="number">3.9442</span>],</span><br><span class="line">          [<span class="number">1.8388</span>, <span class="number">0.3752</span>, <span class="number">2.7226</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">1.2185</span>, <span class="number">0.2591</span>, <span class="number">0.8559</span>],</span><br><span class="line">          [<span class="number">0.9175</span>, <span class="number">0.9620</span>, <span class="number">0.7252</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[<span class="number">2.8658</span>, <span class="number">0.7975</span>, <span class="number">2.2066</span>],</span><br><span class="line">          [<span class="number">6.4685</span>, <span class="number">0.8186</span>, <span class="number">1.5089</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.8362</span>, <span class="number">1.1387</span>, <span class="number">0.8467</span>],</span><br><span class="line">          [<span class="number">0.7392</span>, <span class="number">0.9660</span>, <span class="number">0.7027</span>]]]], grad_fn=&lt;CatBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]]])</span><br></pre></td></tr></table></figure>
<h2 id="layernorm-1">layernorm</h2>
<p>按照<a href="https://pytorch.org/docs/stable/generated/torch.nn.LayerNorm.html">torch的layernorm官方接口文档</a>，对于图像数据，layernorm是这样做的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># torch自带的layernorm</span></span><br><span class="line">torch_ln = nn.LayerNorm(</span><br><span class="line">    normalized_shape=[channel, height, width], </span><br><span class="line">    elementwise_affine=<span class="literal">True</span></span><br><span class="line">)  <span class="comment"># 注意完整的layernorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿射变化初始化的weigh=1，bias=0，相当于没有进行变换，看不出效果</span></span><br><span class="line"><span class="comment"># 手动改成别的值，用于对比包含仿射变换的效果</span></span><br><span class="line">torch.manual_seed(<span class="number">5</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">torch_ln.weight = nn.Parameter(torch_ln.weight * torch.randn(channel, height, width))</span><br><span class="line">torch_ln.bias = nn.Parameter(torch_ln.bias + torch.randn(channel, height, width))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;weight:\n&#x27;</span>, torch_ln.weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bias:\n&#x27;</span>, torch_ln.bias, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_ln(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch ln结果:\n&#x27;</span>, torch_normed)</span><br></pre></td></tr></table></figure>
<p>如同下面这个图所表示</p>
<img src="/b70b4a2d/cv_layernorm.jpeg" class title="CV数据layernorm">
<p>此时仿射变化系数的形状是这样的，为[channel, height, width]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([[[-<span class="number">0.4868</span>, -<span class="number">0.6038</span>, -<span class="number">0.5581</span>],</span><br><span class="line">         [ <span class="number">0.6675</span>, -<span class="number">0.1974</span>,  <span class="number">1.9428</span>]],</span><br><span class="line"></span><br><span class="line">        [[-<span class="number">1.4017</span>, -<span class="number">0.7626</span>,  <span class="number">0.6312</span>],</span><br><span class="line">         [-<span class="number">0.8991</span>, -<span class="number">0.5578</span>,  <span class="number">0.6907</span>]]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">bias:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([[[ <span class="number">0.2225</span>, -<span class="number">0.6662</span>,  <span class="number">0.6846</span>],</span><br><span class="line">         [ <span class="number">0.5740</span>, -<span class="number">0.5829</span>,  <span class="number">0.7679</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">0.0571</span>, -<span class="number">1.1894</span>, -<span class="number">0.5659</span>],</span><br><span class="line">         [-<span class="number">0.8327</span>,  <span class="number">0.9014</span>,  <span class="number">0.2116</span>]]], requires_grad=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>
<p>即每个channel内的每一个特征值，都有单独的可训练的仿射变换系数。</p>
<p>layernorm的结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch ln结果:</span><br><span class="line"> tensor([[[[ <span class="number">0.3594</span>, -<span class="number">0.8338</span>,  <span class="number">1.3456</span>],</span><br><span class="line">          [ <span class="number">0.5128</span>, -<span class="number">0.7147</span>, -<span class="number">0.3012</span>]],</span><br><span class="line"></span><br><span class="line">         [[-<span class="number">2.5939</span>,  <span class="number">0.5089</span>, -<span class="number">0.3546</span>],</span><br><span class="line">          [-<span class="number">1.3715</span>,  <span class="number">0.4607</span>,  <span class="number">0.0553</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[ <span class="number">0.5477</span>, -<span class="number">0.9583</span>,  <span class="number">0.8526</span>],</span><br><span class="line">          [-<span class="number">1.2112</span>, -<span class="number">0.6760</span>,  <span class="number">0.9378</span>]],</span><br><span class="line"></span><br><span class="line">         [[-<span class="number">0.3219</span>, -<span class="number">2.4580</span>, -<span class="number">0.3647</span>],</span><br><span class="line">          [-<span class="number">0.6744</span>,  <span class="number">0.4171</span>, -<span class="number">0.0264</span>]]]], grad_fn=&lt;NativeLayerNormBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>手动进行layernorm的归一化和仿射变换，和官方接口对比一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动ln</span></span><br><span class="line"></span><br><span class="line">manual_normed = []</span><br><span class="line"><span class="comment"># 每个channel分别处理</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">    <span class="comment"># 计算均值和标准差</span></span><br><span class="line">    mean = torch.mean(inputs[b, :, :, :])</span><br><span class="line">    std = torch.std(inputs[b, :, :, :], unbiased=<span class="literal">False</span>)</span><br><span class="line">    normed = (inputs[b, :, :, :] - mean) / (std + eps) * torch_ln.weight + torch_ln.bias</span><br><span class="line">    normed = normed.unsqueeze(<span class="number">0</span>)</span><br><span class="line">    manual_normed.append(normed)</span><br><span class="line">manual_normed = torch.cat(manual_normed, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动ln结果:\n&#x27;</span>, manual_normed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动操作和torch自带操作有点误差，&lt;1e-4</span></span><br><span class="line">isclose = torch.isclose(torch_normed, manual_normed, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证结果:\n&#x27;</span>, isclose)</span><br></pre></td></tr></table></figure>
<p>这里计算均值和标准差，是把所有channel内的所有特征值放在一起算的，即每个样本只有一个标量的均值和一个标量的标准差。但是仿射变换的时候就每个特征值都有自己的参数。</p>
<p>手动计算的结果如下，和官方接口一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">手动ln结果:</span><br><span class="line"> tensor([[[[ <span class="number">0.3594</span>, -<span class="number">0.8338</span>,  <span class="number">1.3456</span>],</span><br><span class="line">          [ <span class="number">0.5128</span>, -<span class="number">0.7147</span>, -<span class="number">0.3012</span>]],</span><br><span class="line"></span><br><span class="line">         [[-<span class="number">2.5939</span>,  <span class="number">0.5090</span>, -<span class="number">0.3546</span>],</span><br><span class="line">          [-<span class="number">1.3715</span>,  <span class="number">0.4607</span>,  <span class="number">0.0553</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[ <span class="number">0.5477</span>, -<span class="number">0.9583</span>,  <span class="number">0.8527</span>],</span><br><span class="line">          [-<span class="number">1.2112</span>, -<span class="number">0.6760</span>,  <span class="number">0.9378</span>]],</span><br><span class="line"></span><br><span class="line">         [[-<span class="number">0.3219</span>, -<span class="number">2.4581</span>, -<span class="number">0.3647</span>],</span><br><span class="line">          [-<span class="number">0.6744</span>,  <span class="number">0.4171</span>, -<span class="number">0.0264</span>]]]], grad_fn=&lt;CatBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">          [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]]])</span><br></pre></td></tr></table></figure>
<h1 id="nlp数据">NLP数据</h1>
<p>再看下在NLP场景下的情况。</p>
<p>先定义输入，N是batch size，S是sequence length，H是hidden size。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个随机三维输入，[N,S,H]</span></span><br><span class="line">batch_size = <span class="number">2</span></span><br><span class="line">seq_len = <span class="number">3</span></span><br><span class="line">hidden_size = <span class="number">4</span></span><br><span class="line">torch.manual_seed(<span class="number">6</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">inputs = torch.randn(batch_size, seq_len, hidden_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三维输入:\n&#x27;</span>, inputs)</span><br></pre></td></tr></table></figure>
<h2 id="batchnorm-2">batchnorm</h2>
<p>用官方接口计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># torch自带的batchnorm</span></span><br><span class="line">torch_bn = nn.BatchNorm1d(num_features=hidden_size, affine=<span class="literal">True</span>)  <span class="comment"># 注意完整的batchnorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿射变化初始化的weigh=1，bias=0，相当于没有进行变换，看不出效果</span></span><br><span class="line"><span class="comment"># 手动改成别的值，用于对比包含仿射变换的效果</span></span><br><span class="line">torch.manual_seed(<span class="number">7</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">torch_bn.weight = nn.Parameter(torch_bn.weight * torch.randn(hidden_size))</span><br><span class="line">torch_bn.bias = nn.Parameter(torch_bn.bias + torch.randn(hidden_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;weight:\n&#x27;</span>, torch_bn.weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bias:\n&#x27;</span>, torch_bn.bias, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 结果</span></span><br><span class="line">torch_normed = torch_bn(inputs.transpose(<span class="number">1</span>, <span class="number">2</span>)).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch bn结果:\n&#x27;</span>, torch_normed)</span><br></pre></td></tr></table></figure>
<p>根据官方接口的描述，输入的第二维应该为特征数，第三维为序列长度，因此这里对输入做了transpose，再把结果transpose回来。</p>
<p>结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([-<span class="number">0.1468</span>,  <span class="number">0.7861</span>,  <span class="number">0.9468</span>, -<span class="number">1.1143</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">bias:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([ <span class="number">1.6908</span>, -<span class="number">0.8948</span>, -<span class="number">0.3556</span>,  <span class="number">1.2324</span>], requires_grad=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">torch bn结果:</span><br><span class="line"> tensor([[[ <span class="number">1.8740</span>, -<span class="number">0.7037</span>, -<span class="number">1.8222</span>,  <span class="number">2.3385</span>],</span><br><span class="line">         [ <span class="number">1.7413</span>, -<span class="number">1.8119</span>,  <span class="number">0.3641</span>,  <span class="number">0.0200</span>],</span><br><span class="line">         [ <span class="number">1.4615</span>, -<span class="number">0.2676</span>,  <span class="number">0.1081</span>,  <span class="number">1.3450</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">1.7084</span>, -<span class="number">1.9653</span>,  <span class="number">1.0169</span>,  <span class="number">0.5785</span>],</span><br><span class="line">         [ <span class="number">1.8213</span>, -<span class="number">0.8614</span>, -<span class="number">0.8056</span>,  <span class="number">2.9892</span>],</span><br><span class="line">         [ <span class="number">1.5383</span>,  <span class="number">0.2409</span>, -<span class="number">0.9949</span>,  <span class="number">0.1231</span>]]], grad_fn=&lt;TransposeBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>可以看到batchnorm的仿射变化系数形状在各种情况下都保持和特征向量维度相同。</p>
<p>再来手动计算验证一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动bn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">mean = torch.mean(inputs, dim=(<span class="number">0</span>, <span class="number">1</span>) , keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值:\n&#x27;</span>, mean)</span><br><span class="line">std = torch.std(inputs, dim=(<span class="number">0</span>, <span class="number">1</span>), keepdim=<span class="literal">True</span>, unbiased=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标准差:\n&#x27;</span>, std, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">manual_normed = (inputs - mean) / (std + eps) * torch_bn.weight + torch_bn.bias</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动bn结果:\n&#x27;</span>, manual_normed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动操作和torch自带操作有点误差，&lt;1e-4</span></span><br><span class="line">isclose = torch.isclose(torch_normed, manual_normed, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证结果:\n&#x27;</span>, isclose)</span><br></pre></td></tr></table></figure>
<p>这里计算用于归一化均值和方差，是在dim=(0,1)范围内计算的，相当于把[N,
S, H]的输入拉平为[N×S,
H]的二维输入，再按二维输入的方式进行batchnorm。</p>
<p>结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">均值:</span><br><span class="line"> tensor([[[-<span class="number">0.2151</span>,  <span class="number">0.5444</span>, -<span class="number">0.2633</span>, -<span class="number">0.5424</span>]]])</span><br><span class="line">标准差:</span><br><span class="line"> tensor([[[<span class="number">0.7984</span>, <span class="number">0.3537</span>, <span class="number">0.7799</span>, <span class="number">0.7986</span>]]]) </span><br><span class="line"></span><br><span class="line">手动bn结果:</span><br><span class="line"> tensor([[[ <span class="number">1.8740</span>, -<span class="number">0.7037</span>, -<span class="number">1.8222</span>,  <span class="number">2.3385</span>],</span><br><span class="line">         [ <span class="number">1.7413</span>, -<span class="number">1.8119</span>,  <span class="number">0.3641</span>,  <span class="number">0.0200</span>],</span><br><span class="line">         [ <span class="number">1.4615</span>, -<span class="number">0.2676</span>,  <span class="number">0.1081</span>,  <span class="number">1.3450</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">1.7084</span>, -<span class="number">1.9653</span>,  <span class="number">1.0169</span>,  <span class="number">0.5785</span>],</span><br><span class="line">         [ <span class="number">1.8213</span>, -<span class="number">0.8614</span>, -<span class="number">0.8056</span>,  <span class="number">2.9892</span>],</span><br><span class="line">         [ <span class="number">1.5383</span>,  <span class="number">0.2409</span>, -<span class="number">0.9950</span>,  <span class="number">0.1231</span>]]], grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]])</span><br></pre></td></tr></table></figure>
<h2 id="layernorm-2">layernorm</h2>
<p>终于来到NLP数据的layernorm，先确认一下，huggingface中bert是这么使用layernorm的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BertSelfOutput</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, config</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.dense = nn.Linear(config.hidden_size, config.hidden_size)</span><br><span class="line">        self.LayerNorm = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)</span><br><span class="line">        self.dropout = nn.Dropout(config.hidden_dropout_prob)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, hidden_states: torch.normTensor, input_tensor: torch.Tensor</span>) -&gt; torch.Tensor:</span><br><span class="line">        hidden_states = self.dense(hidden_states)</span><br><span class="line">        hidden_states = self.dropout(hidden_states)</span><br><span class="line">        hidden_states = self.LayerNorm(hidden_states + input_tensor)</span><br><span class="line">        <span class="keyword">return</span> hidden_states</span><br></pre></td></tr></table></figure>
<p>用我们的数据跑一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># torch自带的layernorm</span></span><br><span class="line">torch_ln = nn.LayerNorm(normalized_shape=hidden_size, elementwise_affine=<span class="literal">True</span>)  <span class="comment"># 注意完整的layernorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿射变化初始化的weigh=1，bias=0，相当于没有进行变换，看不出效果</span></span><br><span class="line"><span class="comment"># 手动改成别的值，用于对比包含仿射变换的效果</span></span><br><span class="line">torch.manual_seed(<span class="number">8</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">torch_ln.weight = nn.Parameter(torch_ln.weight * torch.randn(hidden_size))</span><br><span class="line">torch_ln.bias = nn.Parameter(torch_ln.bias + torch.randn(hidden_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;weight:\n&#x27;</span>, torch_ln.weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bias:\n&#x27;</span>, torch_ln.bias, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_ln(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch ln结果:\n&#x27;</span>, torch_normed)</span><br></pre></td></tr></table></figure>
<p>仿射变化参数的形状和hidden size一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weight:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([ <span class="number">0.2713</span>, -<span class="number">1.2729</span>,  <span class="number">0.5027</span>,  <span class="number">0.4181</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">bias:</span><br><span class="line"> Parameter containing:</span><br><span class="line">tensor([-<span class="number">0.6394</span>, -<span class="number">0.6608</span>, -<span class="number">0.1433</span>, -<span class="number">0.1043</span>], requires_grad=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">torch ln结果:</span><br><span class="line"> tensor([[[-<span class="number">0.7547</span>, -<span class="number">2.8528</span>, -<span class="number">0.5092</span>, -<span class="number">0.3423</span>],</span><br><span class="line">         [-<span class="number">1.0957</span>, -<span class="number">0.8780</span>,  <span class="number">0.2388</span>,  <span class="number">0.2097</span>],</span><br><span class="line">         [-<span class="number">0.3502</span>, -<span class="number">1.6158</span>, -<span class="number">0.3133</span>, -<span class="number">0.7224</span>]],</span><br><span class="line"></span><br><span class="line">        [[-<span class="number">0.9134</span>, -<span class="number">0.4490</span>,  <span class="number">0.6868</span>, -<span class="number">0.3029</span>],</span><br><span class="line">         [-<span class="number">0.7116</span>, -<span class="number">2.5589</span>, -<span class="number">0.1039</span>, -<span class="number">0.6493</span>],</span><br><span class="line">         [-<span class="number">0.5076</span>, -<span class="number">2.1031</span>, -<span class="number">0.9346</span>, -<span class="number">0.1230</span>]]],</span><br><span class="line">       grad_fn=&lt;NativeLayerNormBackward0&gt;)</span><br></pre></td></tr></table></figure>
<p>再来手动验证一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动ln</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">mean = torch.mean(inputs, dim=<span class="number">2</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值:\n&#x27;</span>, mean)</span><br><span class="line">std = torch.std(inputs, dim=<span class="number">2</span>, keepdim=<span class="literal">True</span>, unbiased=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标准差:\n&#x27;</span>, std, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">manual_normed = (inputs - mean) / (std + eps) * torch_ln.weight + torch_ln.bias</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;手动ln结果:\n&#x27;</span>, manual_normed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动操作和torch自带操作有点误差，&lt;1e-4</span></span><br><span class="line">isclose = torch.isclose(torch_normed, manual_normed, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证结果:\n&#x27;</span>, isclose)</span><br></pre></td></tr></table></figure>
<p>得到的均值和标准差如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">均值:</span><br><span class="line"> tensor([[[-<span class="number">0.8469</span>],</span><br><span class="line">         [ <span class="number">0.0745</span>],</span><br><span class="line">         [ <span class="number">0.3386</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">0.1364</span>],</span><br><span class="line">         [-<span class="number">0.7003</span>],</span><br><span class="line">         [ <span class="number">0.2831</span>]]])</span><br><span class="line">标准差:</span><br><span class="line"> tensor([[[<span class="number">0.8578</span>],</span><br><span class="line">         [<span class="number">0.3354</span>],</span><br><span class="line">         [<span class="number">0.6505</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.4426</span>],</span><br><span class="line">         [<span class="number">0.8448</span>],</span><br><span class="line">         [<span class="number">0.6816</span>]]]) </span><br></pre></td></tr></table></figure>
<p>每个sample中的每个token，都有各自的均值和标准差，用于归一化。</p>
<p>最终结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">手动ln结果:</span><br><span class="line"> tensor([[[-<span class="number">0.7547</span>, -<span class="number">2.8528</span>, -<span class="number">0.5092</span>, -<span class="number">0.3423</span>],</span><br><span class="line">         [-<span class="number">1.0957</span>, -<span class="number">0.8780</span>,  <span class="number">0.2388</span>,  <span class="number">0.2097</span>],</span><br><span class="line">         [-<span class="number">0.3502</span>, -<span class="number">1.6158</span>, -<span class="number">0.3133</span>, -<span class="number">0.7224</span>]],</span><br><span class="line"></span><br><span class="line">        [[-<span class="number">0.9134</span>, -<span class="number">0.4490</span>,  <span class="number">0.6868</span>, -<span class="number">0.3029</span>],</span><br><span class="line">         [-<span class="number">0.7116</span>, -<span class="number">2.5590</span>, -<span class="number">0.1039</span>, -<span class="number">0.6493</span>],</span><br><span class="line">         [-<span class="number">0.5076</span>, -<span class="number">2.1031</span>, -<span class="number">0.9347</span>, -<span class="number">0.1230</span>]]], grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]])</span><br></pre></td></tr></table></figure>
<h1 id="归一化的输入能变回原输入吗">归一化的输入能变回原输入吗</h1>
<p>既然这些操作是先计算均值和标准差进行归一化，再进行仿射变换，那把仿射变换的参数设置为输入的均值和标准差，是不是就可以把归一化过的数据变回跟原数据一模一样了呢？</p>
<p>以二维情况为例，看下batchnorm是否能变回去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个随机二维输入</span></span><br><span class="line">batch_size = <span class="number">3</span></span><br><span class="line">feature_num = <span class="number">4</span></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)  <span class="comment"># 设置随机种子，方便复现</span></span><br><span class="line">inputs = torch.randn(batch_size, feature_num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二维输入:\n&#x27;</span>, inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值和标准差</span></span><br><span class="line">mean = torch.mean(inputs, dim=<span class="number">0</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(&#x27;均值:\n&#x27;, mean)</span></span><br><span class="line">std = torch.std(inputs, dim=<span class="number">0</span>, keepdim=<span class="literal">True</span>, unbiased=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># print(&#x27;标准差:\n&#x27;, std, &#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch自带的batchnorm</span></span><br><span class="line">torch_bn = nn.BatchNorm1d(num_features=feature_num, affine=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把仿射变换的缩放和平移替换为标准差和均值</span></span><br><span class="line">torch_bn.weight = nn.Parameter(std)</span><br><span class="line">torch_bn.bias =  nn.Parameter(mean)</span><br><span class="line"><span class="comment"># print(&#x27;weight:\n&#x27;, torch_bn.weight)</span></span><br><span class="line"><span class="comment"># print(&#x27;bias:\n&#x27;, torch_bn.bias, &#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_bn(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch bn结果:\n&#x27;</span>, torch_normed)</span><br><span class="line"></span><br><span class="line">isclose = torch.isclose(torch_normed, inputs, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证结果:\n&#x27;</span>, isclose)</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">二维输入:</span><br><span class="line"> tensor([[ <span class="number">1.5410</span>, -<span class="number">0.2934</span>, -<span class="number">2.1788</span>,  <span class="number">0.5684</span>],</span><br><span class="line">        [-<span class="number">1.0845</span>, -<span class="number">1.3986</span>,  <span class="number">0.4033</span>,  <span class="number">0.8380</span>],</span><br><span class="line">        [-<span class="number">0.7193</span>, -<span class="number">0.4033</span>, -<span class="number">0.5966</span>,  <span class="number">0.1820</span>]])</span><br><span class="line">torch bn结果:</span><br><span class="line"> tensor([[ <span class="number">1.5410</span>, -<span class="number">0.2934</span>, -<span class="number">2.1788</span>,  <span class="number">0.5684</span>],</span><br><span class="line">        [-<span class="number">1.0845</span>, -<span class="number">1.3986</span>,  <span class="number">0.4033</span>,  <span class="number">0.8380</span>],</span><br><span class="line">        [-<span class="number">0.7193</span>, -<span class="number">0.4033</span>, -<span class="number">0.5966</span>,  <span class="number">0.1821</span>]],</span><br><span class="line">       grad_fn=&lt;NativeBatchNormBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">        [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]])</span><br></pre></td></tr></table></figure>
<p>确认了batchnorm是可以变回去的。</p>
<p>再来看下layernorm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二维输入:\n&#x27;</span>, inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值和标准差</span></span><br><span class="line">mean = torch.mean(inputs, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(&#x27;均值:\n&#x27;, mean)</span></span><br><span class="line">std = torch.std(inputs, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>, unbiased=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># print(&#x27;标准差:\n&#x27;, std, &#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch自带的layernorm</span></span><br><span class="line">torch_ln = nn.LayerNorm(normalized_shape=feature_num, elementwise_affine=<span class="literal">True</span>)  <span class="comment"># 注意完整的layernorm要包括仿射变换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把仿射变换的缩放和平移替换为标准差和均值</span></span><br><span class="line">torch_bn.weight = nn.Parameter(std)</span><br><span class="line">torch_bn.bias =  nn.Parameter(mean)</span><br><span class="line"><span class="comment"># print(&#x27;weight:\n&#x27;, torch_bn.weight)</span></span><br><span class="line"><span class="comment"># print(&#x27;bias:\n&#x27;, torch_bn.bias, &#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">torch_normed = torch_ln(inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;torch ln结果:\n&#x27;</span>, torch_normed)</span><br><span class="line"></span><br><span class="line">isclose = torch.isclose(torch_normed, inputs, rtol=<span class="number">1e-4</span>, atol=<span class="number">1e-4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证结果:\n&#x27;</span>, isclose)</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">二维输入:</span><br><span class="line"> tensor([[ <span class="number">1.5410</span>, -<span class="number">0.2934</span>, -<span class="number">2.1788</span>,  <span class="number">0.5684</span>],</span><br><span class="line">        [-<span class="number">1.0845</span>, -<span class="number">1.3986</span>,  <span class="number">0.4033</span>,  <span class="number">0.8380</span>],</span><br><span class="line">        [-<span class="number">0.7193</span>, -<span class="number">0.4033</span>, -<span class="number">0.5966</span>,  <span class="number">0.1820</span>]])</span><br><span class="line">torch ln结果:</span><br><span class="line"> tensor([[ <span class="number">1.1918</span>, -<span class="number">0.1481</span>, -<span class="number">1.5251</span>,  <span class="number">0.4814</span>],</span><br><span class="line">        [-<span class="number">0.8146</span>, -<span class="number">1.1451</span>,  <span class="number">0.7512</span>,  <span class="number">1.2086</span>],</span><br><span class="line">        [-<span class="number">0.9685</span>, -<span class="number">0.0551</span>, -<span class="number">0.6140</span>,  <span class="number">1.6376</span>]],</span><br><span class="line">       grad_fn=&lt;NativeLayerNormBackward0&gt;)</span><br><span class="line">验证结果:</span><br><span class="line"> tensor([[<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">        [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">        [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br></pre></td></tr></table></figure>
<p>发现layernorm并不能通过这种方式把归一化的输入变回原始值，因为layernorm归一化是在特征向量内进行的，所有特征值共享一个均值和方差，但是仿射变换的时候每个特征却有单独的系数。</p>
<p>对于CV数据和NLP数据也有一样的结论。</p>
<p>可以认为batchnorm的归一化和仿射变换是互为可逆的一对操作，而layernorm的归一化和仿射变换是在不同范围内的操作，是不可逆的。</p>
<h1 id="小结">小结</h1>
<p>本篇从各种输入数据对batchnorm和layernorm做了手动复现。</p>
<p>需要注意到，batchnorm、layernorm等实际都包含两步操作：①归一化②仿射变换。</p>
<p>基本上，batchnorm可以总结为，对于特征向量中的每一个特征值，在一个"大范围"内进行归一化，这个"大范围"根据输入数据形状，可能是batch，可能是batch×序列长度，或者batch×feature
map大小。并且归一化和仿射变换在同一个方向上进行，因此这两个操作是互为可逆的。</p>
<p>而layernorm是在每个特征向量内部进行归一化处理，然后在另一个方向上使用仿射变换。由于归一化和仿射变换的方向不同，因此无法通过把仿射变换，把已经归一化的数据变换为原输入数据。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/41b6a819.html">Yi技术报告-划重点看细节</a><br>
<a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a><br>
<a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a><br>
<a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a><br>
<a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a><br>
<a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a><br>
<a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a><br>
<a href="http://www.linsight.cn/ad0bba9d.html">大模型算法题(2)</a></p>
<hr>
<h1 id="reference">Reference</h1>
<p>【1】LAYERNORM
https://pytorch.org/docs/stable/generated/torch.nn.LayerNorm.html<br>
【2】BATCHNORM1D
https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm1d.html<br>
【3】BATCHNORM2D
https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>layernorm</tag>
        <tag>normalization</tag>
        <tag>batchnorm</tag>
      </tags>
  </entry>
  <entry>
    <title>实现大模型长上下文能力之路</title>
    <url>/812c93f3.html</url>
    <content><![CDATA[<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<hr>
<p>步入2024年Q2，RAG、文档对话、大模型Agent能力等方向持续升温。在这些方向上，大模型长上下文能力都是基础。</p>
<p>本篇将从多个角度梳理现有大模型获取长上下文能力的工作，把相关内容串联起来。</p>
<h1 id="section"></h1>
<p>直接训 --&gt; 数据 --&gt; 训练效率 --&gt; 推理成本&amp;效率，kv
cache</p>
<p>改结构：MHA--&gt;GQA、MQA，swa，ring attention、线性注意力</p>
<p>技巧型，PoSE</p>
<p>低资源做法：外推，插值、ntk插值、logn、yarn，rope abf</p>
<p>无限长：</p>
<p>StreamingLLM</p>
<p>Leave No Context Behind:Efficient Infinite Context Transformers with
Infini-attention</p>
<h1 id="小结">小结</h1>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/41b6a819.html">Yi技术报告-划重点看细节</a><br>
<a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a><br>
<a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a><br>
<a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a><br>
<a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a><br>
<a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a><br>
<a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a><br>
<a href="http://www.linsight.cn/ad0bba9d.html">大模型算法题(2)</a></p>
<hr>
<h1 id="reference">Reference</h1>
<p>【1】<br>
【2】</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>长上下文</tag>
        <tag>预训练</tag>
        <tag>attention</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型算法题(3)</title>
    <url>/1736008.html</url>
    <content><![CDATA[<p><img src="/images/cover.png"></p>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
<hr>
<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<p>本系列将持续整理一些LLM中关键的、细节的、值得关注的内容，持续更新<sub>如有错漏，欢迎指正</sub></p>
<hr>
<h1 id="旋转位置编码rope有什么优缺点">1.旋转位置编码RoPE有什么优缺点？</h1>
<p>优点：RoPE以绝对位置编码的方式实现了相对位置编码，使得能够在不破坏注意力形式的情况下，以“加性编码”的方式让模型学习相对位置。①相比其他相对位置编码来说，实现简单，计算量少。②可以应用于线性注意力。③RoPE具有远程衰减的特性，使得每个位置天然能够更关注到附近的信息。</p>
<p>缺点：RoPE相比训练式的绝对位置编码具有一定的外推能力，如可以在2k数据长度训练的模型进行略长于2k的推理。但是相比于Alibi等位置编码，其直接外推能力并不算特别好，需要通过线性插值、NTK插值、YaRN等方式来优化外推能力。</p>
<h1 id="batchnorm中的momentum怎么影响训练效果">2.batchnorm中的momentum怎么影响训练效果</h1>
<p>batchnorm在训练时计算每个batch内的均值和方差用于normalization，同时统计一个全局均值和方差用于推理。全局均值和方差计算公式为：</p>
<p>moving_mean = momentum × moving_mean + (1.0 − momentum) × mean</p>
<p>moving_var = momentum × moving_var + (1.0 − momentum) × var</p>
<p>小的momentum值对应快的更新速度，能够更快地向真实分布靠近，但是同时也会导致更大的波动；如果更新过慢，则可能导致训练结束时还没有统计到真实的分布，是欠拟合的状态。如果batch
size比较小，每个mini batch和全局差异较大，就不应该用太大的momentum。</p>
<h1 id="多头注意力相比单头有什么好处">3.多头注意力相比单头有什么好处？</h1>
<p>多头注意力使用多个维度较低的子空间分别进行学习。</p>
<p>一般来说，相比单头的情况，多个头能够分别关注到不同的特征，增强了表达能力。多个头中，会有部分头能够学习到更高级的特征，并减少注意力权重对角线值过大的情况。</p>
<p>比如部分头关注语法信息，部分头关注知识内容，部分头关注近距离文本，部分头关注远距离文本，这样减少信息缺失，提升模型容量。</p>
<p>另外虽然多头注意力的整体计算量比单头要大一点，但是并行度也高一些。</p>
<h1 id="kv-cache为什么能加速推理">4.kv cache为什么能加速推理？</h1>
<p>对于GPT类模型，使用的是单向注意力，每个位置只能看到自己和前面的内容。</p>
<p>在进行自回归解码的时候，新生成的token会加入序列，一起作为下一次解码的输入。</p>
<p>由于单向注意力的存在，新加入的token并不会影响前面序列的计算，因此可以把已经计算过的每层的kv值保存起来，这样就节省了和本次生成无关的计算量。</p>
<p>通过把kv值存储在速度远快于显存的L2缓存中，可以大大减少kv值的保存和读取，这样就极大加快了模型推理的速度。</p>
<h1 id="relu有什么优缺点">5.ReLU有什么优缺点？</h1>
<p>优点：（1）计算快，前向只需要进行max(0,
x)计算，后向则是直接透传；（2）有激活值的时候，梯度恒定为1，不会爆炸/消失；</p>
<p>缺点：（1）均值不为0，分布产生偏移（2）输入值小于0时，梯度再也无法回传过来，导致神经元坏死。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型算法题(3)</title>
    <url>/1736008.html</url>
    <content><![CDATA[<p><img src="/images/cover.png"></p>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
<hr>
<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<p>本系列将持续整理一些LLM中关键的、细节的、值得关注的内容，持续更新<sub>如有错漏，欢迎指正</sub></p>
<hr>
<h1 id="为什么transformer用layernorm而不是batchnorm">1.为什么Transformer用layernorm而不是batchnorm</h1>
<p>首先，NLP数据中由于每条样本可能不一样长，会使用padding，如果对padding部分进行normalization，对效果有负面影响。直观来说，batchnorm会对同一个特征以batch为组进行归一化，而对于文本数据，同一个位置的token很可能是没有关联的两个token，对这样一组数据进行归一化没有什么实际意义。《PowerNorm:
Rethinking Batch Normalization in
Transformers》论文的实验也表明，在NLP数据使用batchnorm，均值和方差相对layernorm会更加震荡，因此效果欠佳。</p>
<h1 id="transformer中encdoer和decoder是怎么进行交互的">2.transformer中，encdoer和decoder是怎么进行交互的？</h1>
<p>decoder部分的输入，在每层中，先进行一次self-attention；之后用encoder的输出作为attention计算中的K、V，decoder的输入作为Q，进行cross-attention。</p>
<img src="/1736008/transformer.png" class title="transformer">
<h1 id="pytorch中tensor的view和reshape两个方法有什么区别">3.PyTorch中，Tensor的view()和reshape()两个方法有什么区别？</h1>
<p>1.功能上：view()与reshape()方法都可以用来改变tensor的形状，但是使用条件不同，view()能做的是reshape的子集。</p>
<p>2.view()方法需要tensor满足连续性，操作后返回一个引用，返回值是视图，没有改变原储存空间的值，多个视图共享同一个物理储存空间的内容。</p>
<p>3.reshape()方法不需要tensor一定满足连续性。如果tensor不满足连续性的要求，则会使用新的储存空间并返回。如果满足连续性需求，则功能和view()一致。</p>
<p>4.连续性：比如一个二维张量，如果按行优先展开成一维的结果，和物理储存顺序是一致的，就是连续的。可以用is_contiguous()来判断一个张量是否连续，如果不连续，可以用contiguous()得到一份新空间中的连续副本。</p>
<h1 id="rlhf中ppo需要哪几个模型分别是什么作用">4.RLHF中，PPO需要哪几个模型，分别是什么作用？</h1>
<p>一般来说，PPO需要使用4个模型。</p>
<p>1.Actor模型：由SFT初始化，就是进行强化学习的主模型，是我们想要最终获得的模型；它不断产生action并被Critic模型所评价，计算loss进行训练。</p>
<p>2.Reference模型：一般也是从SFT模型初始化，RLHF中Reference模型并不更新参数，只是作为Actor模型的参考使用；通过约束Actor模型和Reference模型的KL
penalty等，可以防止Actor模型被训得跑得太偏。</p>
<p>3.Reward模型：提前训练好的，对SFT模型进行打分的模型，RLHF中参数是冻结的。</p>
<p>4.Critic模型：一般由Reward模型进行初始化，参数可训练，用于预测Actor模型生成的token的收益。</p>
<h1 id="gpt类模型训练过程中消耗显存的主要有哪些部分分别是多少哪部分占用最多假设模型有l层词表大小为vhidden-size为hbatch-size为b训练窗口长度为s使用adam优化器混合精度训练需要存一阶和二阶动量注意力头数为n">5.GPT类模型训练过程中，消耗显存的主要有哪些部分？分别是多少？哪部分占用最多？假设模型有L层，词表大小为V，hidden
size为H，batch
size为B，训练窗口长度为S，使用Adam优化器混合精度训练（需要存一阶和二阶动量），注意力头数为N。</h1>
<p>训练过程中，显存消耗主要有模型参数、梯度、optimizer状态值和中间激活值。</p>
<p>1.模型参数Φ：词表部分VH，每层参数12H<sup>2+13H，总共有Φ=VH+L(12H</sup>2+13H)，如果是半精度就是2Φ</p>
<p>2.梯度：每个参数对应有一个梯度，总量为Φ，如果是半精度就是2Φ</p>
<p>3.optimizer状态值：每个参数有一个对应梯度，每个参数又对应优化器一个一阶动量和二阶动量。在混合精度训练中，使用半精度进行前向计算和梯度计算，同时优化器备份一份单精度的优化器状态、梯度和参数用于更新参数，因此共有(Φ+Φ)<em>2+(Φ+Φ+2Φ)</em>4=20Φ，除去参数和梯度，优化器占部分16Φ</p>
<p>4.激活值：保存激活值是为了计算梯度，因此每个矩阵相乘、softmax、dropout都需要保存输入值的中间的激活值。总共是34BSH+5BNS^2，如果都是半精度，就乘以2。</p>
<p>模型参数、梯度和优化器状态和输入长度无关，是固定值，而激活值随着长度增加，以平方速度增长。
以GPT3（175B）为例，H=12288，L=96，N=96。模型参数量显存越为350G。以B=1计算，如果S=1024，激活值约为90G；如果S=8192，激活值约为3420G。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
]]></content>
  </entry>
  <entry>
    <title>稀疏注意力计算:sliding window attention</title>
    <url>/c61d17e3.html</url>
    <content><![CDATA[<p>【本文已在同名微信公众号/知乎/个人博客同步上线】</p>
<p>LLM的长文本能力现在已经是各个大模型巨头的必争之地。</p>
<p>我们之前在<a href="http://www.linsight.cn/c4da56c0.html">《LLM长上下文的问题》</a>简单介绍了目前把大模型理解和生成能力推广到32k+/128k+的主流方法，在<a href="http://www.linsight.cn/3dc22f96.html">《理解Attention:从起源到MHA,MQA和GQA》</a>一文中也解析了MQA和GQA通过节省KV缓存的方式，支持模型在长上下文情况下推理加速的方案。</p>
<p>在这讲一下另一种（理论有损）提升注意力计算效率的方法：SWA（sliding
window attention）。</p>
<p>一些效果受到广泛关注的模型，如Qwen系列和Mistral就使用了SWA。</p>
<p>关于Mistral：</p>
<p>Mistral
AI是法国一家AI独角兽公司，2023年5月才成立，但是在2023年9月和12月就分别推出了Mistral
7B和MoE模型Mistral 8x7B并开源。</p>
<p>2024年2月，微软也投资了它。</p>
<img src="/c61d17e3/ms_invest_mistral.png" class title="MS">
<p>它在2024年2月发布的Mistral Large，支持多语言 &amp;
32k的上下文长度，在MMLU上也是获得了直逼GPT4的效果</p>
<img src="/c61d17e3/mistral_large_performance.jpeg" class title="Mistral Large MMLU Performance">
<p>（大家也因此对Mistral寄予了厚望，希望它能成为大模型行业的鲶鱼，激活一下OPENAI和META加速一下开源。）</p>
<h1 id="swa">SWA</h1>
<p>虽然SWA的思路最早不是Mistral提出的，我们还是先以Mistral
7B为例来看下SWA的具体做法。</p>
<h2 id="mistral-7b">Mistral 7B</h2>
<p>2023年10月，Mistral发布了Mistral 7B的<a href="https://arxiv.org/pdf/2310.06825.pdf">技术报告</a>。其中开篇就说到，相比Llama，Mistral在结构上做了一些改动，除了GQA，另一个用于支持长文本下高效推理的改动就是SWA。</p>
<p>来看下Mistral 7B的模型结构参数</p>
<img src="/c61d17e3/mistral_architechture.png" class title="Mistral Architechture">
<p>Mistral使用了kv组数=8的GQA，intermediate
size相比Llama2（11008）大一些，其他基本没有太大变化。</p>
<h2 id="计算量和缓存">计算量和缓存</h2>
<p>对于原始的causal
attention，其注意力矩阵是一个下三角矩阵，这样每个token都能看到自己和在自己前面的token。</p>
<p>这样随着输入长度 <span class="math inline">\(s\)</span>
增大，这个下三角矩阵中1的元素数量以 <span class="math inline">\(s^2\)</span> 的速度增长，带来的是计算量和所需的KV
Cache以平方的速度增长。</p>
<p>（我们知道计算量/缓存和长度 <span class="math inline">\(s\)</span>
成平方关系，这里放一些更具体的推算细节，已经熟悉的朋友可以跳过）</p>
<p>（1）计算量</p>
<p>对于两个这样大小的矩阵相乘： <span class="math inline">\([m,n]\times[n,p]\)</span> ，输出矩阵大小为 <span class="math inline">\([m,p]\)</span>，共有 <span class="math inline">\(m\times p\)</span> 个元素，每个元素需要 <span class="math inline">\(n\)</span> 次乘法和 <span class="math inline">\(n\)</span> 次加法，因此一次矩阵乘法有 <span class="math inline">\(2mpn\)</span> 个floating point
operations（FLOPs）。</p>
<p>计算量上，按<a href="https://arxiv.org/pdf/2203.15556.pdf">《Training
Compute-Optimal Large Language Models》</a>的算法来。</p>
<p>对于一般MHA，输入长度为 <span class="math inline">\(s\)</span>
，层数为 <span class="math inline">\(L\)</span> ，模型hidden size为
<span class="math inline">\(d_{model}\)</span> ，每个头的维度为 <span class="math inline">\(d_{q}\)</span> ， 头的数量为 <span class="math inline">\(n_{q}\)</span>（这里假设有 <span class="math inline">\(d_{model} = n_{q}\times d_{q}\)</span>
），各个operation的FLOPs如下</p>
<center>
<table>
<colgroup>
<col style="width: 45%">
<col style="width: 54%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Operation</th>
<th style="text-align: center;">FLOPs（MHA）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Attention: QKV</td>
<td style="text-align: center;"><span class="math inline">\(6\times
s\times h_{model}^{2}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Attention: QK logits ( <span class="math inline">\(QK^T\)</span> )</td>
<td style="text-align: center;"><span class="math inline">\(n_{q}\times
2\times s^2\times h_{q}\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Attention: Softmax</td>
<td style="text-align: center;"><span class="math inline">\(n_{q}\times
3\times s^2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: left;">Attention: Reduction (apply to <span class="math inline">\(V\)</span>)</td>
<td style="text-align: center;"><span class="math inline">\(n_{q}\times
2\times s^2\times h_{q}\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Attention: Outupt Linear Project</td>
<td style="text-align: center;"><span class="math inline">\(2\times
s\times h_{model}^{2}\)</span></td>
</tr>
</tbody>
</table>
</center>
<p>Softmax项中，对一个 <span class="math inline">\([1,s]\)</span>
的向量做softmax，计算量为 <span class="math inline">\(3s\)</span> （一个
<span class="math inline">\(s\)</span> 是算每个元素的exp，一个 <span class="math inline">\(s\)</span> 是求和算分母，一个 <span class="math inline">\(s\)</span> 是算除法），而对 <span class="math inline">\([s,s]\)</span> 的矩阵做softmax，则计算量为 <span class="math inline">\(3s^2\)</span> ，每个头都要计算一遍，因此再乘以
<span class="math inline">\(n_{q}\)</span> 。</p>
<p>（这里忽略了其他一些operation，比如scaling，dropout等，有兴趣的朋友可以自己推算一下）</p>
<p>顺便算下对于Mistral 7B这样使用了GQA的情况。</p>
<p>其实只有第一项的KV有变化，其他都没变。假设kv头的数量为 <span class="math inline">\(n_{kv}\)</span>，则有</p>
<center>
<table>
<colgroup>
<col style="width: 45%">
<col style="width: 54%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Operation</th>
<th style="text-align: center;">FLOPs（GQA）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Attention: QKV</td>
<td style="text-align: center;"><span class="math inline">\(2\times
s\times h_{model}^{2}\\+4\times s\times h_{model}\times (h_{q}\times
n_{kv})\)</span></td>
</tr>
</tbody>
</table>
</center>
<p>从上面的推算可以看到QK logits、Softmax和Reduction三项是和长度 <span class="math inline">\(s\)</span> 成平方关系的，其他则是线性关系。</p>
<p>（2）缓存</p>
<p>KV Cache需要缓存的参数量为</p>
<p><span class="math display">\[
2\times L\times s\times d_{q}\times n_{kv}
\]</span></p>
<p>如果使用的是半精度浮点数，那么总共所需的空间就是</p>
<p><span class="math display">\[
2\times 2\times L\times s\times d_{q}\times n_{kv}
\]</span></p>
<p>对于Mistral 7B，在输入长度为16k的情况下，所需的KV_Cache约为2G。</p>
<p>看来虽然用了GQA，但是在长文本（16k+）的情况下计算量和显存还是颇有压力。</p>
<h2 id="swa思路">SWA思路</h2>
<p>看来要提升attention计算效率，需要想办法减小上面推算中的 <span class="math inline">\(s\)</span> ，但是怎么在减小 <span class="math inline">\(s\)</span>
的同时，还能保持模型长上下文的理解和生成能力呢？</p>
<p>来看一下，CNN中的感受野</p>
<img src="/c61d17e3/receptive_field_cnn.png" class title="CNN Receptive Field">
<p>如上图，假设模型有3层，每层卷积核大小为 <span class="math inline">\(3\times 3\)</span>
（实际上CNN里卷积操作就是一个sliding window）。</p>
<p>那对于layer 3，每一个像素能看到layer 2中的一个 <span class="math inline">\(3\times 3\)</span> 的区域，layer
2中其他较远的像素就看到不了。</p>
<p>但我们再往前推，layer 2里的每个像素也可以看到layer 1中的一个 <span class="math inline">\(3\times 3\)</span> 区域，那么layer 2中的 <span class="math inline">\(3\times 3\)</span> 区域就可以看到layer 1中一个
<span class="math inline">\(5\times 5\)</span> 的区域，相当于layer
3中一个像素可以<u><strong>间接</strong></u>看到一个 <span class="math inline">\(5\times 5\)</span> 的输入。</p>
<p>以此类推，如果我们再增加一层layer 4，那么layer
4中一个像素就能获取输入层（layer 1） 一个 <span class="math inline">\(7\times 7\)</span> 区域的信息。</p>
<p>虽然每层只能多看周围一格的信息，但是只要我们层数够多，理论上靠近输出端的层想看多远就能看多远。</p>
<p>值得注意的一点是，我们一般认为模型低层部分提取比较基础的特征，而高层会提取高级的语义特征。</p>
<p>在CNN里，前几层提取的可能更多是关于简单的边界、颜色、形状等基础特征，而后面的层则提取较复杂的语义特征，比如在分类任务中会是和分类类别相关的花纹、物体大小、风格等特征。</p>
<p>如果我们把模型设计成，最后一层的一个像素刚好要到第一层才能接收到全局信息（在其它层都只能看到局部），那对于图像边缘的语义特征识别能力可能会受到一些限制。</p>
<p>具体来说，假设我们做猫和狗的图像分类任务，如果这个时候决定性的特征出现在图像最边缘几个像素里，那这种情况下的错误率会比特征出现在图像中间时要高。</p>
<p>而对于语言模型，一般情况下，越远距离的信息，对当前位置的重要性越低，因此只要我们的窗口大小不要太过极限小，问题应该都还不大。</p>
<p>看下Mistral的SWA具体是怎么做的</p>
<img src="/c61d17e3/mistral_swa.png" class title="Mistral SWA">
<p>左边是正常的causal
attention，每个位置能看到自己和前面的位置，attention
mask是个下三角矩阵。</p>
<p>中间则是SWA的attention
mask，这里的窗口大小为3。包括自己在内，每个位置只能往前看3个输入。</p>
<p>同CNN的感受野一样，随着层数的堆叠，模型理论上能处理的最远距离也逐层线性递增。只是LLM里递增的方向是单向的，只能往前。</p>
<p>Mistral 7B使用了4096的窗口大小，模型层数为32，则最终输出的”感受野“为
<span class="math inline">\(4096\times 32=131,072\)</span>
达到131k的长度。</p>
<p>前面我们推算了attention的计算量，其中QK
logits、Softmax和Reduction三项是和长度 <span class="math inline">\(s\)</span>
成平方关系。在使用了SWA之后，理论上，这几个operation仅使用4k的计算量，就能获得131k的上下文效果。当输入长度为131k时，除去已经缓存部分的数值，新的输入计算量相差
<span class="math inline">\(32\times 32=1024\)</span> 倍。</p>
<p>而缓存和上下文长度 <span class="math inline">\(s\)</span>
成线性关系，当上下文长度为131k时，最大也能节省 <span class="math inline">\(31/32\)</span> 的显存。</p>
<p>即SWA在上下文长度在4k以下时，和普通causal
attention一样；当上下文长度超过4k时，则相对节省资源，长度越大，节省的比例越高。</p>
<blockquote>
<p>In practice, for a sequence length of 16K and W = 4096, changes made
to FlashAttention [11] and xFormers [18] yield a 2x speed improvement
over a vanilla attention baseline.</p>
</blockquote>
<p>实际使用中，Mistral通过把SWA实现在FlashAttention和xFormers中，对于16k的上下文长度，获得了2倍的速度提升。</p>
<h2 id="和kv-cache的配合实现">和KV Cache的配合实现</h2>
<p>在不使用sliding window的情况下，随着自回归推理的进行，KV
Cache是只增不减的。</p>
<p>而在使用SWA的情况下，超出窗口长度的kv就可以不用再缓存了，因此使用一个轮转替换的策略。</p>
<p>比如窗口大小 <span class="math inline">\(W=4\)</span>
，则当第5个token需要缓存是，直接替换掉第1个token，这样就可以保持kv缓存有一个最大值（为窗口大小），而不会无限增长。</p>
<img src="/c61d17e3/rolling_buffer.png" class title="swa rolling buffer">
<p>这样便于我们估计硬件设备所能支持的throughput，也不会因为少量超长的case而造成堵塞，在工程上有利于提高硬件利用率，降低成本。</p>
<h2 id="长prompt的分块">长Prompt的分块</h2>
<p>更近一步，考虑到我们使用RAG或者funciton
call的时候，都会使用比较长的，固定的prompt来知道模型的行为。</p>
<p>比如GPT4就被诱导说出它接收到的长system
prompt（当然未必真的就是OPENAI用的）</p>
<blockquote>
<p>Your user's user agent is "Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
and the user's locale is "en-US" Your knowledge cutoff date is 2023-04.
The current date is 2024-02-07. Image input capabilities: Enabled</p>
<p>Tools</p>
<p>python</p>
<p>When you send a message containing Python code to python, it will be
executed in a stateful Jupyter notebook environment. python will respond
with the output of the execution or time out after 60.0 seconds. The
drive at '/mnt/data' can be used to save and persist user files.
Internet access for this session is disabled. Do not make external web
requests or API calls as they will fail.</p>
<p>dalle</p>
<p>Whenever a description of an image is given, create a prompt that
dalle can use to generate the image and abide to the following policy:
1. The prompt must be in English. Translate to English if needed. 2. DO
NOT ask for permission to generate the image, just do it! 3. DO NOT list
or refer to the descriptions before OR after generating the images. 4.
Do not create more than 1 image, even if the user requests more. 5. Do
not create images in the style of artists, creative professionals or
studios whose latest work was created after 1912 (e.g. Picasso, Kahlo).
- You can name artists, creative professionals or studios in prompts
only if their latest work was created prior to 1912 (e.g. Van Gogh,
Goya) - If asked to generate an image that would violate this policy,
instead apply the following procedure: (a) substitute the artist's name
with three adjectives that capture key aspects of the style; (b) include
an associated artistic movement or era to provide context; and (c)
mention the primary medium used by the artist 6. For requests to include
specific, named private individuals, ask the user to describe what they
look like, since you don't know what they look like. 7. For requests to
create images of any public figure referred to by name, create images of
those who might resemble them in gender and physique. But they shouldn't
look like them. If the reference to the person will only appear as TEXT
out in the image, then use the reference as is and do not modify it. 8.
Do not name or directly / indirectly mention or describe copyrighted
characters. Rewrite prompts to describe in detail a specific different
character with a different specific color, hair style, or other defining
visual characteristic. Do not discuss copyright policies in responses.
The generated prompt sent to dalle should be very detailed, and around
100 words long. Example dalle invocation: { "prompt":
"<insert prompt here>" } namespace dalle {</insert></p>
<p>Create images from a text-only prompt. type text2im = (_: { The size
of the requested image. Use 1024x1024 (square) as the default, 1792x1024
if the user requests a wide image, and 1024x1792 for full-body
portraits. Always include this parameter in the request. n?: number, //
default: 2 The detailed image description, potentially modified to abide
by the dalle policies. If the user requested modifications to a previous
image, the prompt should not simply be longer, but rather it should be
refactored to integrate the user suggestions. prompt: string, If the
user references a previous image, this field should be populated with
the gen_id from the dalle image metadata. referenced_image_ids?:
string[], }) =&gt; any; } // namespace dalle</p>
<p>voice_mode Voice mode functions are not available in text
conversations. namespace voice_mode { } // namespace voice_mode</p>
<p>browser</p>
<p>You have the tool <code>browser</code>. Use <code>browser</code> in
the following circumstances: - User is asking about current events or
something that requires real-time information (weather, sports scores,
etc.) - User is asking about some term you are totally unfamiliar with
(it might be new) - User explicitly asks you to browse or provide links
to references</p>
<p>Given a query that requires retrieval, your turn will consist of
three steps: 1. Call the search function to get a list of results. 2.
Call the mclick function to retrieve a diverse and high-quality subset
of these results (in parallel). Remember to SELECT AT LEAST 3 sources
when using <code>mclick</code>. 3. Write a response to the user based on
these results. In your response, cite sources using the citation format
below.</p>
<p>In some cases, you should repeat step 1 twice, if the initial results
are unsatisfactory, and you believe that you can refine the query to get
better results.</p>
<p>You can also open a url directly if one is provided by the user. Only
use the <code>open_url</code> command for this purpose; do not open urls
returned by the search function or found on webpages.</p>
<p>The <code>browser</code> tool has the following commands:
<code>search(query: str, recency_days: int)</code> Issues a query to a
search engine and displays the results.
<code>mclick(ids: list[str])</code>. Retrieves the contents of the
webpages with provided IDs (indices). You should ALWAYS SELECT AT LEAST
3 and at most 10 pages. Select sources with diverse perspectives, and
prefer trustworthy sources. Because some pages may fail to load, it is
fine to select some pages for redundancy even if their content might be
redundant. <code>open_url(url: str)</code> Opens the given URL and
displays it.</p>
<p>For citing quotes from the 'browser' tool: please render in this
format: 【{message idx}†{link text}】. For long citations: please render
in this format: <a href="message%20idx">link text</a>. Otherwise do not
render links.</p>
</blockquote>
<p>除了预先计算好system
prompt的kv值，并保存在缓存中方便每次用户输入使用外，如果system
prompt很长（比sliding window大），还可以通过对system
prompt的kv值进行切分来进一步优化计算。</p>
<p>比如窗口大小 <span class="math inline">\(W=4\)</span>，system
prompt大小为9时，就可以把system prompt的kv缓存切成 [4,4,1] 三块。</p>
<p>第一块由于和当前的输入距离超过了一个window的大小，所以是完全看不见的，对应的attention
mask全为0，因此可以完全忽略。</p>
<p>第二块的attention
mask则是一个上三角矩阵，当前的输入需要用到这部分信息。</p>
<p>第三块是一个下三角矩阵（的左边部分），包含了当前的输入在内。</p>
<p>在推理的时候，我们只需要用到第二块和第三块的内容，这就节省了缓存的操作。</p>
<p>而且无论prompt有多长，只要我们按窗口大小分块，一定只会用到最后两块。</p>
<img src="/c61d17e3/prefill_and_chunking.png" class title="prefill and chunking">
<p>（实际上现在推理框架基本上都有FlashAttention/PagedAttention等技术加持，能够进一步节省资源，提高效率，这个后续再开一篇讲）</p>
<p>Mistral
7B整体的效果上的效果相比Llama是有优势的，部分任务甚至超过了Llama
34B。</p>
<img src="/c61d17e3/mistral_perf.png" class title="mistral performance">
<p>Mistral认为大语言模型压缩知识的能力实际超过我们的认知，7B这个规模的效果还有提升空间。</p>
<h1 id="sparse-attention">Sparse Attention</h1>
<p>SWA实际上是一种sparse attention，而sparse
attention也有许多工作做了深入探索。</p>
<p>这里简单说一小部分，有机会再完整梳理一遍sparse
attention的理论和实践。</p>
<h2 id="longformer">Longformer</h2>
<p>前面提到，Mistral并不是第一个使用SWA的。</p>
<p>2020年，<a href="https://arxiv.org/pdf/2004.05150.pdf">《Longformer:
The Long-Document Transformer》</a>就提出包含SWA在内的一系列sparse
attention的做法。</p>
<p>从文章名字就看到出来，Longformer主要目的也是为了解决长上下文的问题。</p>
<img src="/c61d17e3/longformer_attention.png" class title="longformer">
<p>上图中的（b）就是SWA，只是用在Bert中的时候它是双向的。</p>
<p>在SWA的基础上，还可以进行空洞滑窗（dilated sliding
window），在不增加计算量的情况下，提升感受野。这也是从空洞卷积（下图）来的灵感了。</p>
<img src="/c61d17e3/dilated_conv.png" class title="dilated convolution">
<p>还可以更进一步优化attention。无论是SWA还是dilated sliding
window，每个位置都只能看到局部的信息。</p>
<p>但是实际上有些位置就是对全局信息有很高的需求。</p>
<p>在Bert中，[CLS]
token就常常作为分类token或者相似度向量使用，这种情况下就需要它能获取整个上下文的完整信息。</p>
<p>而在GPT中，instruction，或者说prompt的部分也对全局信息有更高要求，因为我们希望在整个对话过程中，模型都能遵循我们给出的规则。</p>
<p>对于这些token，我们让它可以看到其他所有位置，使用完整的global
attention，而其他位置则使用sliding window，如（d）中所示。</p>
<h2 id="big-bird">Big Bird</h2>
<p>无独有偶，同样在2020年，和Longformer差不多在同一时期，也有另外一个通过sparse
attention来优化长文本效果的工作，<a href="https://arxiv.org/abs/2007.14062">《Big Bird: Transformers for
Longer Sequences》</a>。</p>
<p>其中sliding window和global attention结合的思路和Longformer相似。Big
Bird还额外加入了一个random attention的做法。</p>
<img src="/c61d17e3/big_bird_attention.png" class title="big bird attention">
<p>上图中 <span class="math inline">\(r=2\)</span>
即每个位置使用2个随机注意力。</p>
<h1 id="小结">小结</h1>
<p>SWA在优化长上下文的计算效率上有明显的收益。而在模型效果上，目前基本没有看到不可接受的损失。对长上下文有需求的业务，值得探索。</p>
<p>除了SWA，sparse
attention还有许多其他探索。目前来看，这些做法都有一定的理论基础，效果也不错。但是阻碍这些方案大规模使用的一个原因就是<big><strong>工程实现</strong></big>，比如如何高效计算global
+ local attention，在flash attention中能够支持random
attention，这都是要考虑的内容。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<h1 id="reference">Reference</h1>
<p>【1】Mistral 7B https://arxiv.org/pdf/2310.06825.pdf<br>
【2】Longformer: The Long-Document Transformer
https://arxiv.org/pdf/2004.05150.pdf<br>
【3】Training Compute-Optimal Large Language Models
https://arxiv.org/pdf/2203.15556.pdf<br>
【4】GPT-4 System Prompt Revealed
https://patmcguinness.substack.com/p/gpt-4-system-prompt-revealed<br>
【5】Big Bird: Transformers for Longer Sequences
https://arxiv.org/abs/2007.14062</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>attention</tag>
        <tag>sliding window attention</tag>
        <tag>sparse attention</tag>
      </tags>
  </entry>
  <entry>
    <title>Yi技术报告-划重点看细节</title>
    <url>/41b6a819.html</url>
    <content><![CDATA[<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<hr>
<p>01.AI（零一万物），是李开复带队孵化的AI公司。2023年11月初，01.AI发布并开源了Yi-6B、Yi-34B
base模型，同一周内，又开源了Yi-6B-200K和Yi-34B-200K
base模型。Yi号称是从零预训练的双语模型。接下来的几个月，01.AI陆续推出了chat模型、多模态能力，Yi-9B、长上下文的记忆和检索能力等优化。</p>
<p>从2023年11发布起，个人就有测试和使用Yi的模型。在SuperCLUE/CMMLU等一些榜单数据的实测上，发现Yi的效果确实不错。实际工作使用里，Yi的效果基本也都能排在同时期中文（开源）大模型里的第一梯队。</p>
<p>2024年3月，Yi终于发布了技术报告，在此来梳理一下报告中的重点内容和值得关注的细节信息。</p>
<h1 id="tldr">TL;DR</h1>
<p>先给出核心内容的总结：</p>
<ul>
<li>Yi-34B模型int4量化之后，相比float16损失&lt;1%，可以跑在RTX4090上（24G显存）</li>
<li>模型结构不需要太多变化，LLAMA2标准结构已经足够训出很好的效果</li>
<li>3.1T的预训练数据远比scaling
law建议的1T大，但是效果更好，并且模型还没饱和，继续增大数据量还能提升</li>
<li>微调数据质量很重要，由算法人员直接标注，只要&lt;10k的数据量就足够了</li>
<li>4k长度的基础预训练模型已经具备长文本能力，只需用长文本数据继续预训练，更新百步就有很好效果</li>
<li>总之，数据要精心设计，数据质量要高，数据量要大</li>
</ul>
<h1 id="模型">模型</h1>
<h2 id="规模选择">规模选择</h2>
<p>Yi目前有6B、9B、34B三个规模，其中34B是主力模型。</p>
<p>选择34B，而不是更大规模的原因，是这个规模能在24G显存的消费级显卡（如RTX4090）上运行。</p>
<p>使用int4量化之后的34B模型可以运行在24G显存的GPU上。</p>
<p>参考<a href="https://arxiv.org/abs/2301.12017">《Understanding INT4
Quantization for Language Models: Latency Speedup, Composability, and
Failure
Cases》</a>的量化方法，Yi-34B的int8量化模型相比bf16模型，几乎可以做到效果无损（差距&lt;1%），而int4量化模型在大部分任务的损失也完全可以接受，具体效果如下表。</p>
<img src="/41b6a819/eval.png" class title="Yi效果">
<p>训练数据总共是3.1T token，这比DeepMind的scaling
law所建议的1TB要大不少。目前能接触到的这个规模的模型，数据量基本都&lt;2T。</p>
<p>（即提出Chinchilla模型的<a href="https://arxiv.org/abs/2203.15556">《Training Compute-Optimal Large
Language Models》</a>的scaling law）</p>
<p>也就是从scaling law的角度来说，Yi是overtrain的。</p>
<p><big><strong>但是Yi实践结果证明，较小模型+更大规模的高质量数据，是可以获得进一步效果提升的，这也就让我们获得了高性价比的推理模型--34B推理成本+大训练投入，就能得到接近普通70B规模的推理效果。</strong></big></p>
<h2 id="模型结构">模型结构</h2>
<p>结构上，基于标准LLAMA2模型，做了一些变化</p>
<ul>
<li>注意力机制：LLAMA2只在70B用了GQA，Yi全系列都用了GQA，具体参数如下表<br>
</li>
<li>位置编码：RoPE，参考RoPE ABF（《Effective long-context scaling of
foundation models》），base扩大到10M，用于支持长上下文。<br>
</li>
<li>激活函数：使用SwiGLU，参考《GLU Variants Improve Transformer》</li>
</ul>
<p>并且把activation
size从4h降为8/3h，这里的说法是补偿了GQA带来的参数下降</p>
<blockquote>
<p>We use SwiGLU as Yi’s post-attention layer, reducing its activation
size from 4h to 8/3h (h denotes hidden size) to be consistent with the
normal post-attention layer. This adjustment also compensates for the
reduction in parameter resulted from GQA, making the overall parameter
count comparible of existing 7B and 34B models.</p>
</blockquote>
<img src="/41b6a819/model.png" class title="Yi模型结构">
<p>关于模型结构，一个结论就是<big><strong>“虽然做了很多模型结构上的实验，但是最终发现，标准的结构就足以训出足够好的模型”</strong></big></p>
<h2 id="tokenizer">tokenizer</h2>
<ul>
<li>用BPE，词表大小为64000，这个大小平衡了计算效率和表达能力；<br>
</li>
<li>其中数字全是单个的digit，让模型能更好地理解数字数据；<br>
</li>
<li>对于OOV的词，会降级用unicode编码 ；</li>
<li>保留全角标点符号，不转为半角；</li>
</ul>
<p>另外，优先考虑英语的LLM在tokenizer会使用虚拟前缀（文本开头的空格）来泛化句子不同位置相同的单词。Yi不这么做，因为即使是在英语语境中，这种假设并不总是成立，比如对于以引号开头的句子，而且在中文语境中，这么做没有明显效果。</p>
<h1 id="数据">数据</h1>
<p>数据，是LLM最核心的部分，没有之一。Yi最核心的工作就是提升数据数量和质量。</p>
<img src="/41b6a819/cover.png" class title="数据">
<h2 id="预训练数据">预训练数据</h2>
<p>预训练数据整体处理流程如下</p>
<img src="/41b6a819/pretrain_data_pipeline.png" class title="预训练数据处理流程">
<ol type="1">
<li>语料获取 &amp; 语言分类</li>
</ol>
<p>从网络爬虫开始，爬取中英文这两种语言的网站，对网站内容进行解析。</p>
<p>并参考CCNeT（《CCNet: Extracting High Quality Monolingual Datasets
from Web Crawl Data》）的做法，进行语言识别。</p>
<ol start="2" type="1">
<li>规则过滤器 Heuristic Rule Filters</li>
</ol>
<p>目的是快速过滤掉明显的低质量数据。基于这些规则来过滤掉：</p>
<ul>
<li>URL、域名、单词黑名单和乱码文本；<br>
</li>
<li>文档长度、特殊符号的比例，以及短行、连续行或不完整行的比例；<br>
</li>
<li>重复的单词模式、n-gram或段落，参考《Scaling Language Models:
Methods, Analysis &amp; Insights from Training
Gopher》的做法，阈值则是来参考《CulturaX: A Cleaned, Enormous, and
Multilingual Dataset for Large Language Models in 167 Languages》；</li>
<li>数据脱敏：识别并匿名化个人信息（Personal Identifiable
Information，PII），如电子邮件地址和电话号码。</li>
</ul>
<ol start="3" type="1">
<li>可训练过滤器 Learned Filters</li>
</ol>
<p>对于不好用规则处理的，就用模型来学习模式，并进行清洗。共有4个scorer：</p>
<ul>
<li>Perplexity Scorer：参照《CCNet: Extracting High Quality Monolingual
Datasets from Web Crawl
Data》，用kenlm库，把高于平均perplexity的内容丢弃；</li>
<li>Quality
Scorer：识别如维基百科这样的高质量内容，丢弃低质量内容；</li>
<li>Document Coherence
Scorer：用于发现句子、段落零散不连贯的文本，要么分割，要么直接丢弃；</li>
<li>Safety Scorer：识别并删除暴力、色情、涉政内容</li>
</ul>
<ol start="4" type="1">
<li>基于聚类的过滤 Cluster-based Filters</li>
</ol>
<p>用聚类的方法，把所有文档进行分类。一方面用于给数据混合策略做参考，一方面如果整个类别的质量太差，就直接抛弃类别内的所有数据。</p>
<ol start="5" type="1">
<li>去重</li>
</ol>
<p>参考《The RefinedWeb Dataset for Falcon LLM: Outperforming Curated
Corpora with Web Data, and Web Data
Only》，做文档级的minhash去重，以及子文档级的完全匹配去重。</p>
<p>最终获得的数据分布如下</p>
<img src="/41b6a819/pretrain_data_dist.png" class title="预训练数据分布">
<p>虽然数据规模一定要够，但是也不能因此就放弃数据质量，否则只能是garbage
in，garbage out</p>
<blockquote>
<p>we prefer 3T tokens over sophasticated engineering over 10T tokens
without extensive filtering</p>
</blockquote>
<p>这句话大概表示清洗前的数据有10T，这也是一个信息，符合质量的数据可能只有3成</p>
<h2 id="微调数据">微调数据</h2>
<p>对于微调数据，一句话：Quality is All You Need。</p>
<p>一共只有&lt;10k条SFT数据，每条数据都通过人工多次打磨，这比大数量但质量一般的数据的效果好。</p>
<p>这思路和《Gemini: A family of highly capable multimodal
models.》、《Llama 2: Open Foundation and Fine-Tuned Chat
Models》、《Lima: Less is more for alignment》一致，而和FLAN（《Scaling
instruction-finetuned language models》）以及UltraChat（《Enhancing chat
language models by scaling high-quality instructional
conversations》）这样更关注数据量的做法不同。</p>
<p>具体做法上有：</p>
<ul>
<li>对于<big><strong>prompt distribution
selection</strong></big>：参考《Wizardlm: Empowering large language
models to follow complex
instructions》，开发复合指令，并通过指令进化，逐步增加指令的复杂度。这种做法显著减少了SFT数据量。<br>
</li>
<li>对于<big><strong>CoT data formatting</strong></big>：参考《Take a
step back: Evoking reasoning via abstraction in large language
models》，采用了“Step-Back”的模式。即通过抽象化处理，让模型学习在深入探讨原始、具体的问题之前，制定更高层次的解决方案。<br>
</li>
<li>对于<big><strong>response formatting</strong></big>：使用从《Lima:
Less is more for
alignment》扩展的默认样式。总体而言，response的结构为introduction-body-conclusion的格式，“where
the body is usually a list of bullet point”。<br>
</li>
<li>在缓解<big><strong>幻觉</strong></big>问题上，思路是确保response中的知识不由模型内部产生，对应的做法是把会导致模型进行记忆的response删掉。（但是这个具体标准是什么，有没有了解的朋友说下看法？）<br>
</li>
<li>在缓解<big><strong>生成重复</strong></big>的问题上，则是直接把response中包含重复的部分都重写了。（核心还是洗数据，一条条打磨）<br>
</li>
<li>数据<big><strong>多样性</strong></big>很重要，因此参考《#instag:
Instruction tagging for analyzing supervised fine-tuning of large
language
models》建立了一个打标系统，并设计一个注重多样性的采样算法，平衡了各个领域数据的分布。<br>
</li>
<li>为了找到最佳的数据<big><strong>配比</strong></big>，参考《How
abilities in large language models are affected by supervised
fine-tuning data composition》，使用近似网络搜索（approximate grid
search），对每个领域以{1, 1/2, 1/4, 1/8, 1/16, 1/32,
1/64}的比例进行实验和人工测评，找到最佳的组合方式。<br>
</li>
<li>除了内容，<big><strong>数据格式</strong></big>对效果也有很大影响。参OPENAI的ChatML格式（<a href="https://github.com/openai/openai-python/blob/e389823ba013a24b4c32ce38fa0bd87e6bccae94/chatml.md">https://github.com/openai/openai-python/blob/e389823ba013a24b4c32ce38fa0bd87e6bccae94/chatml.md</a>），这种结构化的格式使模型能够区分各种信息类型，如system
prompt、user input和bot response。</li>
</ul>
<p>SFT数据质量能极大影响模型的效果，随着数据量的增加，高质量数据能带来更多提升，如下图</p>
<img src="/41b6a819/sft.png" class title="SFT">
<h1 id="训练">训练</h1>
<h2 id="infra">infra</h2>
<p>从数据处理到模型训练都需要大集群大算力的支持。Yi构建了支持全栈数据处理、预训练、微调和服务的基础设施。包括：</p>
<ol type="1">
<li>自动管理和监控计算资源的能力；</li>
<li>通过优化并行策略、内核效率和长上下文支持提高训练速度；</li>
<li>统一微调框架，支持异构分布式训练后端，例如在DPO中同时使用Megatron和DeepSpeed进行多个模型的训练；</li>
<li>通过各种LLM服务加速技术（如量化、continuous batching 和 paged
attention）降低部署成本。</li>
</ol>
<p>总之这部分工作还是很多的，比如由于经常有硬件坏，坏的硬件会被自动从资源池移除；任务失败时，会自动跟踪重启。给算法人员考法UI等。</p>
<h2 id="预训练">预训练</h2>
<p>训了4k基础模型。（暂时没有给出更多细节）</p>
<h2 id="微调">微调</h2>
<p>超参如下</p>
<ul>
<li>AdamW：beta=[0.9,0.999]，epsilon = 1e-8<br>
</li>
<li>seq_len = 4096<br>
</li>
<li>batch size = 64<br>
</li>
<li>constant lr = 1e-5，weight decay = 0.1<br>
</li>
<li>gradient clip = 1.0<br>
</li>
<li>max step = 300</li>
<li>参考《Neftune: Noisy embeddings improve instruction
finetuning》，对于6B模型 noise scale = 5，对于34B模型 noise scale =
45</li>
</ul>
<h1 id="模型评测">模型评测</h1>
<h2 id="基模型评测">基模型评测</h2>
<ol type="1">
<li>基础能力评测</li>
</ol>
<p>对其他开源模型，保持和公开的设置相同做法获取结果。Yi使用贪婪解码，没有进行任何后处理，结果如下表</p>
<img src="/41b6a819/base_model_eval.png" class title="Base模型效果">
<p>在数学和代码能力上，和GPT3.5、GPT4还存在一些差距，而这些能力是可以通过继续预训练和微调来持续提升的。Yi最初的设计并没有针对这些能力，因此没有在预训练数据中包含特别多相关数据，后续会有计划增加这部分能力的提升。</p>
<p>而和其他开源模型相比，在代码和数学以外的任务，Yi基本上做到了跟大一倍模型的效果相近，甚至更好的水平。</p>
<ol start="2" type="1">
<li>观察</li>
</ol>
<ul>
<li>模型规模带来的增益：尽管Yi-34B和Yi-6B使用了相同的预训练语料，但Yi-34B的性能相比Yi-6B有了质的提升。更大的模型尺寸在代码和数学基准测试上带来了明显的增益。<br>
</li>
<li>数据质量：高质量预训练数据的小型模型，如Yi-34B或Qwen-14B，通常表现优于尺寸更大但（可能）数据质量较低的模型，例如Falcon-180B。</li>
<li>GPT-4与开源LLM之间的差距：开源LLM在多种基准测试上的性能仍然落后于GPT-4和GPT-3.5。然而，具有代表性的双语LLM，例如Qwen-14B和Yi-34B，可以在包括C-Eval、CMMLU和Gaokao在内的中文知识相关基准测试上匹配甚至超过GPT-4的性能。然而，在BBH、代码（HumanEval）和数学（MATH）等推理相关基准测试上，仍然存在巨大的差距。</li>
</ul>
<ol start="3" type="1">
<li>In-Context Learning能力的测试</li>
</ol>
<p>Yi进一步研究了in-context
learning的能力，即根据少数展示的输入-输出示例，推断underlying
function的能力。</p>
<p>考虑的任务是推断加权和的线性系数。具体来说，定义 y = w1x1 + w2x2 +
... + wnxn。</p>
<p>少量示例展示是 x1, x2, ..., xn, y，要求模型预测给定一组新输入 x 的
y。</p>
<p>这就要求模型隐式地推断出 w1, w2, ..., wn。</p>
<p>评测上，使用（a）模型预测的 y 与真实值 y∗ 之间的绝对差，即 |y − y∗|
作为连续度量，以及使用（b）精确匹配 y == y∗ 作为不连续度量。</p>
<p>模型在算术上的效果正常，因此可以认为这样的测试不受算术能力的影响，而能直接看模型是否具备根据给定的实例进行underlying
function推理的能力。</p>
<p>实验发现，当问题比较简单时（系数是[1,-1]），Yi-34B和LLAMA-70B效果比较好（看下图）。</p>
<p>当问题更复杂点（系数是[1，1，1，1，1]），只有LLAMA-70B和Mistral
8*7B这样的大模型表现出了涌现的能力。</p>
<img src="/41b6a819/ict.png" class title="ICT">
<h2 id="chat模型评测">Chat模型评测</h2>
<ol type="1">
<li>自动评测</li>
</ol>
<p>评测的任务和base模型相同，分别采用zero-shot和few-shot，效果依然不错，具体结果如下</p>
<img src="/41b6a819/eval.png" class title="Yi效果">
<p>报告强调，如Goodhart’s
principle所说，当一个指标变成目标，就不再是一个好指标。因此这里的测试只是为了确认微调没有使得模型的知识能力下降，而不会专门去针对任务做优化。</p>
<p>结果上，Yi-34B-Chat数学能力不错，而Yi-6B-Chat并没有展现出强大的数学能力。推测较小的模型可能需要更多的数据在SFT阶段激活其相应的能力。</p>
<ol start="2" type="1">
<li>人工评测</li>
</ol>
<img src="/41b6a819/third_party.png" class title="三方评测">
<h1 id="能力扩展">能力扩展</h1>
<p>base模型的基础上，做了3个能力扩展：长上下文、多模态、深度扩展。</p>
<h2 id="长上下文能力">长上下文能力</h2>
<p>报告中认为，4k的base模型已经具备了长文本（200k）的能力。只要用少量数据，进行继续预训练来释放这个能力，再用轻量级的SFT来调整格式，就能获得足够好的长文本能力。</p>
<p>长文本的继续预训练中，依然使用完整的attention，而不是线性attention或者sparse
attention。</p>
<p>继续预训练的数据，混合了（1）原始预训练数据（2）length-upsampled
long-context
data长文本数据，长文本数据主要来自书籍（3）多文档问答的人造数据。</p>
<p>多文档问答数据的应答中，在最终答案之前会对和答案相关的段落进行复述（recitation），以此来提升模型长文本关联的能力。</p>
<p>这部分的数据工作主要参考《Data engineering for scaling language
models to 128k context》和《Paraphrasing the original text makes high
accuracy long-context qa》。</p>
<p>最终用了5B token的长文本数据，batch
size=4M（token），只更新了100个step（这里没明白100步是怎么来，不应该是5B/4M=1250？有没有明白的朋友指点一下）。</p>
<blockquote>
<p>We continue pretrain the model on 5B tokens with 4M batch size, which
translate to 100 optimization steps. Aligning with the concurrent work
from Fu et al. [22], we observe that such light-weight continue
pretraining is already able to enable a strong performance on
Needle-in-a-Haystack test, as we will show in Figure 6.</p>
</blockquote>
<p>这个做法与《Data engineering for scaling language models to 128k
context》一致，这样轻量级的微调已经足够在“大海捞针”任务做得很好。</p>
<p>而微调的数据，也混合了短的SFT数据，以及长的文本问答数据。</p>
<p>这些文本问答数据都是人工用模型造出来的。</p>
<p>具体的做法是，随机抽一些文档，然后从中随机选择一个或者多个段落，让一个训练好的模型根据这些段落造出问题和答案。</p>
<p>一个重要的细节是复述和改写：在给出答案之前，我们要求模型复述或改写原文段落。这种数据格式鼓励模型的检索行为，从而抑制其虚构行为：面对一个问题，模型更倾向于使用输入中的信息来构建答案，而不是使用其内部知识，后者可能与问题相关但不准确。</p>
<p>使用以上所述的轻量级训练，已经可以在“大海捞针”任务做得很好，几乎能够做到全绿。</p>
<img src="/41b6a819/long_context_result.png" class title="大海捞针效果">
<h2 id="多模态">多模态</h2>
<p>ViT部分由CLIP ViT-H/14
model初始化，后面的transformer由Yi-Chat初始化</p>
<img src="/41b6a819/multimodal.png" class title="多模态">
<p>3步训练：</p>
<p>（1）使用224^2的图像来训练ViT和projection模块的参数。这一训练利用了包含1亿个图像-文本对的数据集，这些数据来自LAION-400M。主要目标是增强ViT在架构中的知识获取能力，并实现ViT与LLM之间更好的对齐。</p>
<p>（2）将ViT的图像分辨率提升到448^2，目的是进一步推动模型识别复杂视觉细节的能力。在这个阶段使用的数据集包括从LAION-400M中提取的2000万个图像-文本对。此外，还融入了来自不同来源的大约480万个图像-文本对，例如CLLaVA、LLaVAR、Flickr、VQAv2、RefCOCO、Visual7w等。</p>
<p>（3）整个模型的参数一起训练。主要目标是提高模型在多模态聊天交互方面的熟练度，从而赋予它能够无缝融合和解释视觉与语言输入的能力。为此，训练数据集涵盖了多种来源，总共大约有100万张图像-文本对，包括GQA、VizWiz
VQA、TextCaps、OCR-VQA、Visual
Genome、ShareGPT4V等等。为了确保数据平衡，对任何单一来源的最大数据量设定了上限，将其限制在不超过50,000对。</p>
<p>使用128张A100，6B训了3天，34B训10天。</p>
<h2 id="depth-upscaling-深度扩展">Depth Upscaling 深度扩展</h2>
<p>目标是把32层的6B扩展到48层的9B模型。</p>
<p>参考《Scaling large language models with simple yet effective depth
up-scaling》，通过复制中间的12-28层共16层，把层数扩展为48层。</p>
<p>实验表明，要确定复制哪些层，可以通过测量输入和每层输出的cosine
similarity来衡量。</p>
<p>这种方法使得模型能在不额外训练的情况下，和原模型性能最接近，损失最少。</p>
<img src="/41b6a819/9B.png" class title="9B模型">
<p>这说明复制的这些层并不会很大地改变原模型的激活值。</p>
<p>除了层数增加，Depth Upscaling还要做继续预训练，才能提升效果。</p>
<p>继续预训练使用约800B token，训练过程分为两个阶段。</p>
<p>其中约70%的数据是最近收集并精心挑选的。在最后阶段增强了代码的比例以提高代码性能。</p>
<p>训练保持constant lr = 3e-5，并在模型损失达到平台期时，从4M
token开始逐渐增加batch size大小。</p>
<p>这种增加batch
size的方法，以及保持所有其他参数与Yi-6B基础模型配置一致，继续预训练很重要。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
<p><a href="http://www.linsight.cn/ad0bba9d.html">大模型算法题(2)</a></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>长上下文</tag>
        <tag>技术报告</tag>
        <tag>多模态</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型算法题(1)</title>
    <url>/3345028a.html</url>
    <content><![CDATA[<p><img src="/images/cover.png"></p>
<p>往期回顾</p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<hr>
<p>【本文已在同名微信公众号/知乎/个人博客同步上线】</p>
<p>本系列将整理一些LLM中关键的、细节的、值得关注的内容，持续更新<sub>如有错误，欢迎指正</sub></p>
<h1 id="在transformer模型中为什么scaled-dot-product-attention在计算qk内积之后要除以根号d">1、在Transformer模型中，为什么scaled
dot-product attention在计算QK内积之后要除以根号d？</h1>
<p>简单来说，就是需要压缩softmax输入值，以免输入值过大，进入了softmax的饱和区，导致梯度值太小而难以训练。如果不对attention值进行scaling，也可以通过在参数初始化时将方差除以根号d
，同样可以起到预防softmax饱和的效果。</p>
<h1 id="transformer自注意力计算中为什么q和k要使用不同的权重矩阵进行线性变换投影为什么不使用同一个变换矩阵或者不进行变换">2、Transformer自注意力计算中，为什么Q和K要使用不同的权重矩阵进行线性变换投影，为什么不使用同一个变换矩阵，或者不进行变换？</h1>
<p>1、如果Q和K一样，则矩阵乘积的结果是一个对称矩阵，这样减弱了模型的表达能力。</p>
<p>2、如果Q和K一样，乘积结果的对称矩阵中，对角线的值会比较大，导致每个位置过分关注自己。</p>
<p>3、使用不同的投影矩阵，参数增多，可以增强模型表达能力。</p>
<h1 id="transformer模型中注意力计算后面使用了两个ffn层为什么第一个ffn层先把维度提升第二个ffn层再把维度降回原大小">3、Transformer模型中，注意力计算后面使用了两个FFN层，为什么第一个FFN层先把维度提升，第二个FFN层再把维度降回原大小？</h1>
<p>1、提升维度：类似SVM
kernel，通过提升维度可以识别一些在低维无法识别的特征。</p>
<p>2、提升维度：更大的可训练参数，提升模型的容量。</p>
<p>3、降回原维度：方便多层注意力层和残差模块进行拼接，而无需进行额外的处理。</p>
<h1 id="mqamulti-query-attention和gqagrouped-query-attention相比mhamulti-head-attention计算量变化如何主要带来了什么优化">4、MQA(Multi-Query
Attention)和GQA(Grouped-Query Attention)相比MHA(Multi-Head
Attention)，计算量变化如何，主要带来了什么优化？</h1>
<p>1、MQA和GQA虽然可训练参数量比MHA少，但是计算量和MHA相比变化不大，主要在生成KV时有少量降低。</p>
<p>2、Decoder-only的大模型由于causal
attention的存在，使用了KV缓存加速推理。MQA和GQA能减少KV头的数量，节省了缓存，使得在输入长度较长时也能把KV放进缓存。</p>
<h1 id="为什么现在主流的llm模型基本都是decoder-only的结构单向注意力模型为什么效果比双向注意力效果好">5、为什么现在主流的LLM模型基本都是Decoder-only的结构？单向注意力模型为什么效果比双向注意力效果好？</h1>
<p>1、双向Attention在多层模型训练中容易退化成低秩矩阵，限制了模型容量；而Decoder-only模型使用了下三角注意力矩阵，使得训练过程中矩阵是满秩，建模能力更强。</p>
<p>2、单向注意力模型相比双向注意力模型在训练的时候难度更大，能迫使模型学到更多信息。</p>
<p>3、Causal
Attention天然具有位置编码的功能，而双向Attention即使交换两个token的位置也基本不影响表示，对语序区分能力较弱。</p>
<p>4、工程上，单向模型支持KV Cache等，对于对话场景效率友好。</p>
<p>5、轨迹依赖，基模型训练成本高，业界倾向于沿着已经成功的模型继续开发。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期回顾</p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>transformer中normalization的二三事</title>
    <url>/6a40bfa5.html</url>
    <content><![CDATA[<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<p>Normalization在模型中，相对于attention这种经常被魔改的结构，受到的关注度似乎没那么高，但它对模型能否顺利训练，却有很关键的作用。</p>
<p>在此简单梳理下normalization相关的背景和内容，也分析一下在transformer发展上的相关内容。</p>
<p>这部分内容感觉目前还有些存在争议的地方，如果有不同意见欢迎讨论。</p>
<h1 id="why-normalization">why normalization</h1>
<p>normalization，也叫「归一化」、「正则化」、「规范化」、「标准化」等，可以说已经是神经网络不可以或缺的一环。</p>
<p>使用的话，现在基本只需几行代码就能实现。但要用得好，还是需要了解一下它作用的机制。</p>
<h2 id="从输入数据看normalization">从输入数据看normalization</h2>
<p>假设我们有一个二元损失函数 <span class="math inline">\(Loss(x_1,x_2)=x_1^2+x_2^2+b\)</span>
，那在三维空间画出来的损失平面大概是这样</p>
<img src="/6a40bfa5/lossfunc_surface.jpeg" class title="loss function surface">
<p>在这样一个平面上，使用梯度下降法，梯度方向是垂直于当前位置等高线的切线方向的。</p>
<p>如果这个损失函数的等高线是一系列完美的同心圆，那么无论我们起点在哪里，梯度下降的时候都会以垂直切线方向，沿着圆心一路奔去。</p>
<p>这种情况下优化很快，控制好学习率不要跳过minimum就可以（也可以用自适应优化器来控制速度）。</p>
<p>但是实际上我们的损失平面很难那么完美。损失函数的等高线更可能是个椭圆（或者更复杂的形状）。</p>
<img src="/6a40bfa5/ellipse_1.png" class title="ellipse">
<p>这样我们梯度下降是方向就要经常修正，训练效率就会受影响。</p>
<p>如果这个椭圆很扁或者我们的训练参数不太好，可能会出现反复震荡收敛缓慢的情况。</p>
<img src="/6a40bfa5/ellipse_2.png" class title="ellipse">
<p>损失在这个狭窄的山谷中反复横跳。</p>
<p>那损失函数等高线什么时候会是椭圆形？</p>
<p>假设我们现在有两个输入变量，以米为单位的身高 <span class="math inline">\(x_{1}\)</span>，和以元为单位的月工资收入 <span class="math inline">\(x_{2}\)</span>。（这里对量纲的使用也会改变数值，如米-&gt;厘米）</p>
<p>如果我们用这两个自变量训练模型，我们会发现，身高取值范围基本是在0.x米~2.x米，而工资的取值范围是0到几百几千几万或者几十万以及更多。</p>
<p>而模型的一个主要操作就是对输入特征进行线性组合。</p>
<p>这时模型的输出值会更大地受到 <span class="math inline">\(x_{2}\)</span>
的影响，因为它的变化更大，取值范围也更大。</p>
<p>这时损失函数在不同变量维度的变化速度相差很多，损失函数就会出现椭圆形等高线的情况。</p>
<p>既然由于量纲和取值范围的问题，会导致训练困难，那最直接方法就是规定一个标准范围，所有输入变量，不管原来是什么范围，现在都归一化到标准范围里来。</p>
<p>这就是最朴素的输入normalization的思想。</p>
<p>输入的normalization有很多种做法<br>
<span class="math display">\[x^{\prime}=\frac{x-\min(\mathrm{x})}{\max(\mathrm{x})-\min(\mathrm{x})}\]</span></p>
<p><span class="math display">\[x^{\prime}=\frac{x-\mu}{\max(\mathrm{x})-\min(\mathrm{x})}\]</span></p>
<p><span class="math display">\[x^{\prime}=\frac{x-\mu}\sigma\]</span></p>
<p>其中 <span class="math inline">\(\mu\)</span> 为均值，<span class="math inline">\(\sigma\)</span> 为方差。</p>
<p>第三种，均值方差归一化，也叫Z-score
normalization，应该是我们用得比较多的。</p>
<p>这样我们通过对输入进行一些操作，把「椭圆」拉成了「圆」，解决输入参数范围带来的一些训练问题。</p>
<p>除了针对均值、方差、最大值、最小值的归一化，对输入还有一些其他的处理，如PCA等，就暂不展开。</p>
<h2 id="缓解ics...吗">缓解ICS...吗？</h2>
<p>机器学习里有一个叫i.i.d.（independent and identical
distribution，独立同分布）的假设：独立，每次抽样之间是没有关系的，不会相互影响；同分布，即每次抽样，样本都服从同样的一个分布。</p>
<p>为什么需要i.i.d.？</p>
<p>由于机器学习依赖于使用现有数据来训练模型，进而对未来的数据做出预测和模拟，因此这一过程本质上是在历史数据的基础上，通过模型来推测未来的数据走向。</p>
<p>这就要求我们使用的历史数据必须具备整体的代表性。以便从现有数据（经验）中提炼出规律，对未知数据进行决策。</p>
<p>如果用于训练的数据缺乏总体代表性，即仅代表特殊情况，那么得出的规律可能不准确或错误，因为这些规律是基于个别案例推测出来的，就不具备泛化性。</p>
<p>当然并不是所有机器学习都需要i.i.d.，但是有i.i.d.的话，可以简化很多事情，让模型学习起来更容易快速。</p>
<p>对于输入，通过合理的抽样和处理（前面提到的PCA就可以用来解耦特征间的关联，达到“独立”的效果），我们可以得到输入的i.i.d.的条件，但这只是针对输入。</p>
<p>在多层的神经网络中，上一层的输出会作为下一层的输入。</p>
<p>而在训练过程中，由于上层的模型参数在不断学习变化，则上层输出的分布也在不断变化，靠后的层实际上要学习不断的变化的分布，这就很不i.i.d.，那靠后面的层的学习速度和效果就会收到影响，调参也变得困难，模型也难以加深。</p>
<p>这个问题就是ICS，internal covariate shift。</p>
<p>那有没有办法保证上一层的分布不要变化呢？</p>
<p>一个「可能」的方案就是normalization。我们通过把上一层的输出映射到一个固定的分布上，来稳定给下一层的输入，这样就降低了学习难度。</p>
<p>但也有一些工作表明normalization（batchnorm）的作用机制和ICS的关系并不大，这个观点下面在batchnorm部分说。</p>
<p>当然ICS的问题也可以通过改变初始化策略、调控训练超参如学习率等方法来优化，但是这样做的效率并不是很高。</p>
<h2 id="远离激活函数饱和区">远离激活函数饱和区</h2>
<p>神经网络中还有一个重要组件，非线性激活函数，比如常用的sigmoid。</p>
<img src="/6a40bfa5/sigmoid.png" class title="sigmoid">
<p>当输入 &gt; 6 或者 &lt; -6
的时候，sigmoid函数的梯度已经变得非常小，也就是进入了饱和区。</p>
<p>这种情况下训练就变得困难。</p>
<p>ICS就会加剧梯度消失的情况。在没有normalization的情况下，分布不断变化，后面层的参数变化激烈，导致输出值更容易进入到左右两端，更容易进入到激活函数的饱和区。</p>
<p>而normalization能把部分输出值拉回到梯度正常的范围内，一定程度缓解了梯度消失的问题，使训练可以正常进行下去。</p>
<h1 id="batchnorm">batchnorm</h1>
<p>神经网络中使用的normalization有很多种，这里不一一展开，只梳理一下最重要的batchnorm和layernorm两类。</p>
<h2 id="batchnorm算法">batchnorm算法</h2>
<p>假设输入数据的形状是 <span class="math inline">\([B,C]\)</span>
，其中 <span class="math inline">\(B\)</span> 是batch size，<span class="math inline">\(C\)</span> 是特征向量维度。</p>
<p>这 <span class="math inline">\(C\)</span>
个输入特征每个都有不同的含义，如我们前面的例子，第一个元素可能是身高，第二个元素可能是月收入，因此做normalization的时候这
<span class="math inline">\(C\)</span> 个特征分别来做。</p>
<p>具体来说，对于第 <span class="math inline">\(i\)</span>
个特征维度，首先计算整个batch内的均值</p>
<p><span class="math display">\[
\mu_{i}=\frac{1}{B}\sum_{j=1}^{B}x_{i,j}
\]</span></p>
<p>再计算这个维度上的方差</p>
<p><span class="math display">\[
\sigma_{i}^{2}=\frac{1}{B}\sum_{j=1}^{B}(x_{i,j}-\mu_{i})^2
\]</span></p>
<p>得到均值和方差之后，对batch内维度上的所有值进行Z-score
normalization</p>
<p><span class="math display">\[
x_{i,j}&#39;=\frac{x_{i,j}-\mu_{i}}{\sqrt{\sigma_{i}^{2}+\epsilon}}
\]</span></p>
<p>其中 <span class="math inline">\(\epsilon\)</span>
是为了防止分母为0。这个在实际代码中挺重要的，忘记加可能会出问题。</p>
<p>经过这样的变换之后，在 <span class="math inline">\(C\)</span>
个特征维度上就是均值为0，方差为1的分布了。</p>
<p>但是到这还没结束。</p>
<p>每个维度的数值全部归一化之后，对于激活函数来说，更集中在中间的部分，而这部分的非线性特征并不强（比如上面的sigmoid），这样非线性激活层近似了一个线性变换，这样就降低了模型的学习能力。</p>
<p>且无论输入是什么，最终输出都会被强行拉到这样一个“平均”的值，也极大抑制了模型的表达能力。</p>
<p>所以为了保证模型的能力，也保证非线性能力的获得，对每个特征，又增加两个可学习的参数，
缩放参数 <span class="math inline">\(\gamma\)</span> 和位移参数 <span class="math inline">\(\beta\)</span> 。</p>
<p><span class="math display">\[
y_{i,j} = \gamma_{i} x_{i,j}&#39; + \beta_{i}
\]</span></p>
<p>这样每个特征值就有机会从“线性区”移动到“非线性区”，把被归一化削弱的非线性能力找了回来。</p>
<p>并且通过这样一个归一化再重新缩放移动的操作，解耦了上层输出分布和下层输入，本来下层参数要去适应上层分布变化，现在只需要通过每个batchnorm层中的
<span class="math inline">\(\gamma\)</span> 和 <span class="math inline">\(\beta\)</span>
直接学习就行了，训练变得简单了。</p>
<p><a href="https://zhuanlan.zhihu.com/p/340856414">《Batch
Normalization: Accelerating Deep Network》</a>给出的算法如下</p>
<img src="/6a40bfa5/bn_algo.png" class title="batch norm">
<h2 id="cnn中的batchnorm">CNN中的batchnorm</h2>
<p>batchnorm最主要的应用还是在CNN模型中。</p>
<p>假设CNN中feature map的size是 <span class="math inline">\([B,C,H,W]\)</span> ，其中 <span class="math inline">\(B\)</span> 是batch size，<span class="math inline">\(C\)</span> 是channel数（也是卷积核数量），<span class="math inline">\(H\)</span> 和 <span class="math inline">\(W\)</span> 分别是特征图的高和宽。</p>
<p>如果按照前面batchnorm的算法，那应该有 <span class="math inline">\(C\times H\times W\)</span> 组特征，每组特征有
<span class="math inline">\(B\)</span> 个，对每组内的 <span class="math inline">\(B\)</span> 进行归一化，再进行放缩和平移。</p>
<p>但是实际上，CNN中卷积是一个滑动窗口，对于同一个channel下的 <span class="math inline">\(H\times W\)</span>
个特征值其实都来自于同一个卷积核的计算，这 <span class="math inline">\(H\times W\)</span>
也属于一个“batch”，它们要放在一起进行归一化。</p>
<p>也就是对于卷积核来说，真正的batch数是 <span class="math inline">\(B\times H\times W\)</span> ，而只有 <span class="math inline">\(C\)</span> 组特征值，因此也只有 <span class="math inline">\(C\)</span> 个 <span class="math inline">\(\gamma\)</span> 和 <span class="math inline">\(\beta\)</span> 。</p>
<p>batchnorm原文中，batchnorm放在了relu后面，作者认为这样使得进入激活函数的分布会更加稳定，顺便对于fc层，由于batchnorm和fc都有bias项，还可以省略掉其中一个而不影响效果。</p>
<p>btw，一般来说，batchnorm初始化的时候，把 <span class="math inline">\(\gamma\)</span> 设为1（不缩放），把 <span class="math inline">\(\beta\)</span>
设为0（不平移），在训练中让模型从相当于没有batchnorm开始慢慢学习这两个参数。</p>
<h2 id="训练和推理">训练和推理</h2>
<p>现在我们知道在训练时，batchnorm对一个mini-batch计算均值和方差来进行归一化，再进行缩放和移动。</p>
<p><span class="math inline">\(\gamma\)</span> 和 <span class="math inline">\(\beta\)</span>
属于模型学出来的参数，只要训练结束这两个向量就固定了，在推理的时候直接使用即可。</p>
<p>但是推理时，均值和方差怎么计算呢。推理的时候可能是一个sample，也可能是任意个sample作为一个batch，和训练的时候一样计算肯定不合适。</p>
<p>我们需要在训练的时候就为推理做准备：训练的时候，模型会遍历整个训练集，因此理论上可以统计出整个训练集的均值和方差，然后把这个大量样本统计出来的均值和方差当做真实分布的均值和方差，在推理的时候使用。（回想i.i.d.）</p>
<p>当时又有一个问题，训练集可能会很大，有百万甚至千万的数据，在训练的数据记录下所有层所有特征来计算均值和方差显然效率不高，因此用一个近似的方法：</p>
<p>moving_mean = momentum × moving_mean + (1.0 − momentum) × mean</p>
<p>moving_var = momentum × moving_var + (1.0 − momentum) × var</p>
<p>通过把多个batch的均值和方差进行移动平均的方式来逼近整个训练集的均值和方差。</p>
<p>momentum为动量参数，在 TF/Keras 中，该值为0.99，在 Pytorch
中，这个值为0.9。</p>
<p>小的momentum值对应快的更新速度，能够更快地向真实分布靠近，但是同时也会导致更大的波动。</p>
<p>大的momentum值对应慢的更新速度，如果更新过慢，则可能导致训练结束时还没有统计到真实的分布，是欠拟合的状态。</p>
<p>如果batch size比较小，每个mini
batch和全局差异较大，就不应该用太大的momentum。</p>
<p>理论上，训练步数越长是会越靠近真实分布的，实际上，因为每个batch并不能代表整个训练集的分布，所以最后的值是在真实分布附近波动。</p>
<p>这里还引入另外一个问题，如果batch size太小，每个mini
batch统计的均值和方差和全局的值偏差相对会比较大，对模型收敛的稳定性有影响，因此一般来说，使用batchnorm的话，batch
size不能太小，如下图</p>
<img src="/6a40bfa5/bs_bn.png" class title="batch size的影响">
<p>小结一下，batchnorm的优点是解耦了上层输出和下层输入的分布，既缓解了进入激活函数饱和区带来的梯度消失的情况，又保留了模型的表达能力。每一层的输入尺度相对固定，提供了更好的尺度不变形，使模型训练更稳定。</p>
<p>同时每个batch分别进行归一化，相当于引入了一些随机噪音，使得模型不容易过拟合到某些微小的特征上，相当于进行了一定的正则化，将损失平面变得相对平滑。</p>
<p>但是同时也引入了新的超参（如momentum），另外也依赖batch
size的大小，过小的batch size可能会带来问题。</p>
<h2 id="batchnorm起作用的真正原因">batchnorm起作用的真正原因？</h2>
<p>虽然batchnorm原文认为batchnorm在一定程度上是缓解了ICS，但是2018年的《How
Does Batch Normalization Help Optimization?》提出了不同观点。</p>
<p>为了探究batchnorm的效果，是否是因为优化了ICS（或者说和优化了ICS有多大关系），做了一个这样的实验：在batchnorm后面又通过加入随机噪音来引入“covariate
shift”，并和没有加噪音，以及没有加batchnorm的模型效果进行对比，如下图</p>
<img src="/6a40bfa5/bn_ics.png" class title="ICS">
<p>结果发现，即使人工加强了ICS的情况，但是只要用了batchnorm，效果依然比不用好；而人工引入ICS的模型，在效果上并没有多大影响。</p>
<p>这就说明缓解ICS并不是batchnorm有效的真正原因。</p>
<p>那batchnorm到底有没有缓解到ICS呢？</p>
<p>要测量ICS的变化，就要先定义ICS。</p>
<p>对于网络中的每一层，ICS被定义为在前一层参数更新后，当前层输入分布的变化。这种变化可以通过比较更新前后的梯度来量化。</p>
<img src="/6a40bfa5/ics_define.png" class title="ICS 定义">
<p>具体来说，对于每一层i，作者们计算了以下两个梯度之间的L2范数差异：</p>
<p><span class="math inline">\(G_{t,i}\)</span>
，在时间t，使用当前所有层的参数（包括前一层的参数）计算的梯度。</p>
<p><span class="math inline">\(G_{t,i}&#39;\)</span>
，在时间t，使用更新后的前一层参数计算的梯度，而其他层的参数保持不变。</p>
<p>这个差异直观上表明了「上一层参数变化，下一层需要在多大程度上来变化，以适应新的分布」。</p>
<p>理想来说，ICS越小，上一层参数更新对当前层的分布影响越小，梯度变化程度应该越小。</p>
<img src="/6a40bfa5/ics_measure.png" class title="ICS measure">
<p>但是从结果上来看，使用了batchnorm并不能有效减少这个变化，甚至还有所增加。</p>
<p>这也说明batchnorm实际上并不能真正缓解ICS的情况。</p>
<p>那batchnorm起效果的真正原因是什么？</p>
<p>作者认为主要是batchnorm使得损失函数更加平滑，直观上来说就是减少了很多坑坑洼洼的位置，使得训练更不容易陷入到局部最小值中去。</p>
<h1 id="layernorm">layernorm</h1>
<p>看完batchnorm，再来看layernorm。</p>
<h2 id="理解layernorm">理解layernorm</h2>
<p>layernorm，不要被名字骗了，这里的layer指的不是模型的层，而是数值的layer。</p>
<p>对于二维的输入，batchnorm实在batch维度上做归一化，而layernorm是在特征维度做归一化</p>
<img src="/6a40bfa5/bn_and_ln.png" class title="bn和ln">
<p>对于非NLP数据而言，相比batchnorm，layernorm归一化的维度似乎解释性没那么强。batchnorm对同一个特征，比如身高计算均值是有意义的，而layernorm在不同的特征，比如身高、工资、温度做归一化，好像并没有可靠的物理意义。</p>
<p>layernorm最主要的应用就是NLP的模型，包括RNN和transfomrer模型。</p>
<p>在transformer中，一般输入的形状是 <span class="math inline">\([B,S,H]\)</span> ，<span class="math inline">\(S\)</span>
是序列长度，每个样本的长度可能不同，因此在这个维度需要使用padding（一般是zero-padding）来把batch内的数据处理成一样长。</p>
<p>比如这样一批文本输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我  爱  中  国</span><br><span class="line">你  好</span><br><span class="line">谢  谢  你</span><br></pre></td></tr></table></figure>
<p>为了使模型能够统一处理，会pad成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我  爱  中  国</span><br><span class="line">你  好  [P] [P]</span><br><span class="line">谢  谢  你  [P]</span><br></pre></td></tr></table></figure>
<p>一般来说，我们认为由于有padding的存在，做batchnorm并不合适。</p>
<p>比如上面的例子，对“中”，“[P]”，“你”做归一化，由于 [P]
的存在，实际的batch size只有2，并且和 [P]
做normalization也对训练没什么帮助。</p>
<p>而且对于文本数据，batch内同一个位置上的字是不同的，对完全没有关系的字进行归一化也并没有什么意义。</p>
<p>也就是说，哪怕没有 [P]
的存在，比如对第一个token“我”，“你”，“谢”做归一化，直觉上也不太有物理意义。</p>
<p>因此使用layernorm，在 <span class="math inline">\(H\)</span>
维度上进行normalization，同时有 <span class="math inline">\(H\)</span>
个<span class="math inline">\(\gamma\)</span> 和 <span class="math inline">\(\beta\)</span> 需要学习。</p>
<p>相当于计算每一句输入内，每个token所有特征之间的均值和方差来进行归一化。</p>
<h2 id="为什么transformer用layernorm">为什么transformer用layernorm</h2>
<p>和batchnorm不同的是，由于layernorm不需要再batch维度上计算均值和方差，所以不存在训练和推理的时候不一样的地方，不用保存一个全局的均值和方差供推理的时候使用。</p>
<p>而由于layernorm和batch无关，也就不会受到batch size大小的影响。</p>
<p>除了以上的原因，也有一些工作深入探究了在nlp任务上layernorm和batchnorm的区别。</p>
<p>如《PowerNorm: Rethinking Batch Normalization in
Transformers》就研究了transformer中BN为啥表现不太好。</p>
<p>研究了训练中的四个统计量：batch的均值和方差，以及他们的梯度的均值和方差。对于batch的均值和方差，计算了他们和running
statistics（就是用移动平均法累积的均值和方差，见前面的文章）的欧氏距离。发现NLP任务上（IWSLT14）batch的均值和方差一直震荡，偏离全局的running
statistics，而CV任务也相对稳定。</p>
<p>对于他们梯度的均值和方差，研究了其magnitude（绝对值），在CV任务上震荡更小，且训练完成后，也没有离群点。</p>
<p>总结来说，transformer中BN表现不太好的原因可能在于CV和NLP数据特性的不同，对于NLP数据，前向和反向传播中，batch统计量及其梯度都不太稳定。</p>
<p>更重要的是，实际效果就是layernorm在NLP的效果比batchnorm好，效果好，这是最重要的原因。</p>
<h2 id="rmsnorm">RMSnorm</h2>
<p>19年《Root Mean Square Layer
Normalization》提出了normalization变体RMSnorm，主要针对layernorm来改进。</p>
<p>简单地说，RMSnorm就是在标准layernorm的基础上，省略了平移，只进行缩放。</p>
<img src="/6a40bfa5/rmsnorm.png" class title="RMSnorm">
<p>作者认为标准layernorm计算效率并不高</p>
<img src="/6a40bfa5/rmsnorm_eff.png" class title="RMSnorm效率">
<p>作者用一个GRU模型做实验，对比是否添加layernorm的结果，发现在相同时间和相同步骤下，有layernorm的模型，都没有无layernorm的模型收敛得快。</p>
<p>并且layernorm的平移对梯度方差的减小没有贡献，因此作者直接舍弃了中心化和平移两步，只对数据进行方差归一化和缩放。</p>
<p>更近一步，作者提出pRMSnorm，只对数据中前p%的数值进行处理，这样就能进一步加速训练，而效果也基本不太受影响。</p>
<img src="/6a40bfa5/prmsnorm.png" class title="prmsnorm">
<p>RMSnorm现在被很多主流的大模型所采样了。</p>
<h1 id="post-norm-pre-norm">post-norm &amp; pre-norm</h1>
<h2 id="二者对比">二者对比</h2>
<p>layernorm在模型里放哪也有讲究。</p>
<p>原始的transformer模型使用的post-norm，而《On Layer Normalization in
the Transformer Architecture》则认为pre-norm更好。</p>
<p>post-norm和pre-norm分别是下面这样</p>
<img src="/6a40bfa5/postnorm_prenorm.png" class title="postnorm and prenorm">
<p>post-norm是在残差和主干相加之后进行归一化，而pre-norm则是在主干先归一化再和残差相加。</p>
<p>post-norm和pre-norm对比，目前大家比较接受的结论是，pre-norm更容易训练，因此可以叠加更多的层，但是在层数不是特别多的情况下，post-norm最终的收敛效果会比pre-norm要好。</p>
<p>模型中，第 <span class="math inline">\(l\)</span> 层的输出是第 <span class="math inline">\(l+1\)</span> 层的输入，对于post-norm有</p>
<p><span class="math display">\[
x_{l+1}=\mathrm{Norm}(x_l+\mathrm{F}_t(x_l))
\]</span></p>
<p>而对于pre-norm则是</p>
<p><span class="math display">\[
x_{l+1}=x_l+\mathrm{F}_l(\mathrm{Norm}(x_l))
\]</span></p>
<p>参考苏剑林在《为什么Pre Norm的效果不如Post Norm？》中的分析，认为
<span class="math inline">\(\mathrm{F}_l(\mathrm{Norm}(x_l))\)</span>
的方差，由于有norm的存在，是不随层数变化的。</p>
<p>当 <span class="math inline">\(l\)</span> 比较大时，<span class="math inline">\(x_{l}、x_{l+1}\)</span> 的差距较小，因此 <span class="math inline">\(\mathrm{F}_l(\mathrm{Norm}(x_l))\)</span> 和 <span class="math inline">\(\mathrm{F}_{l+1}(\mathrm{Norm}(x_{l+1}))\)</span>
的差距也很小，这时有</p>
<p><span class="math display">\[\begin{aligned}
&amp;\mathrm{F}_l(\operatorname{Norm}(x_l))+\operatorname{F}_{l+1}(\operatorname{Norm}(x_{l+1}))
\\
&amp;{\approx}\mathrm{F}_l(\mathrm{Norm}(x_l))+\mathrm{F}_{l+1}\left(\mathrm{Norm}(x_l)\right)
\\
&amp;=(\mathrm{F}_l\oplus\mathrm{F}_{l+1})(\mathrm{Norm}(\pmb{x_l}))
\end{aligned}\]</span></p>
<p>相当于 <span class="math inline">\(l\)</span> 层和 <span class="math inline">\(l+1\)</span> 层的效果接近于一个更宽的 <span class="math inline">\(l\)</span> 层的效果。</p>
<p>也就是使用pre-norm的时候，模型的深度有水分，表面看起来有 <span class="math inline">\(l\)</span>
层，实际在效果上，等效于post-norm的浅层模型。</p>
<p>从模型结构上看，恒等分支永远有一部分不用经过normalization，这部分能够直接把梯度回传到最前面，这也是pre-norm能够训练“层数更多”的模型的原因--缓解了梯度消失。</p>
<p>正常来说，模型深度对最终效果的影响，是大于模型宽度的。</p>
<p>而post-norm，在残差分支之后做归一化，对参数正则化的效果更好（loss平面更平滑），且它每norm一次就削弱一次恒等分支的权重，所以post-norm相对pre-norm，是更突出残差分支的，因此它的层数更加“足秤”，训练好之后效果更优。</p>
<h2 id="和warmup的关系">和warmup的关系</h2>
<p>《On Layer Normalization in the Transformer
Architecture》（认为pre-norm更好）还分析指出，使用post-norm的transformer，在初始化时候，靠近输出层的部分梯度期望很大，所以模型在开始训练的时候很依赖warmup的策略，通过缓慢提升学习率来稳定训练过程。</p>
<p>使用warmup引入了新的超参，调参更为麻烦点。</p>
<p>而实验表明，使用pre-norm的transformer在不需要warmup的情况下，也能收敛到post-norm+warmup的相同水平，而post-norm不加warmup效果就差点了。</p>
<img src="/6a40bfa5/warmup_effect.png" class title="warmup影响">
<h2 id="deepnorm">Deepnorm</h2>
<p>2022年，《DeepNet: Scaling Transformers to 1,000
Layers》对transformer训练不稳定的原因进行了深入分析，发现模型更新过大是导致不稳定的主要原因。</p>
<p>为了解决这个问题，他们提出了Deepnorm，可以限制模型更新的大小。</p>
<img src="/6a40bfa5/deepnorm.png" class title="deepnorm">
<p>其中 <span class="math inline">\(\alpha&gt;1\)</span>
是根据模型参数定的常数。这里相比post-norm提升了恒等分支的权重，使训练更容易进行。</p>
<p>另外，还用了一个 <span class="math inline">\(\beta\)</span> 参数，把
<span class="math inline">\(G_{l}\)</span>
中的模型参数进行了缩小，以此来稳定模型的训练。</p>
<p>实验结果上，deepnorm结合了pre-norm的容易训练，和post-norm的收敛效果好的特点，能够把百层、浅层的模型训到比较好的效果。</p>
<img src="/6a40bfa5/deepnorm_result.png" class title="deepnorm result">
<p>参数过程相比post-norm稳定了很多。</p>
<h2 id="realformer--residual-attention">Realformer--residual
attention</h2>
<p>post-norm和pre-norm实际上改变的是模型残差分支和恒等分支怎么排布的问题，而《RealFormer:
Transformer Likes Residual Attention》则提出了另外一种做法</p>
<img src="/6a40bfa5/realformer.png" class title="realformer">
<p>RealFormer的核心是在其标准Transformer编码器的每一层中引入了残差连接。这些残差连接将前一层的原始注意力分数（即在应用Softmax之前的分数）与当前层计算出的注意力分数相结合。这样做的结果是，当前层的注意力分数在计算时会考虑到前一层的信息。</p>
<p>每个多头注意力模块都会接收来自前一层的残差注意力分数作为额外输入。这意味着每个注意力头不仅考虑了当前层内的输入序列，而且还直接利用了前一层的注意力信息。</p>
<img src="/6a40bfa5/realformer_attention.png" class title="realformer attention">
<p>其中 <span class="math inline">\(Prev&#39;\)</span>
是来自上一层softmax之前的权重矩阵（多头注意力的话，则是对应的头的值），而
<span class="math inline">\(\frac{Q^{\prime}K^{\prime
T}}{\sqrt{d_k}}+Prev&#39;\)</span> 则是传给下一层的attention的。</p>
<h1 id="小结">小结</h1>
<p>本篇粗略梳理了一下关于normalization，batchnorm，以及layernorm在transformer的一些使用情况。</p>
<p>目前主流的大模型使用的是rmsnorm + prenorm，也有使用其他变体的。</p>
<p>关于normalization，依然留有一些探索空间。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
<hr>
<h1 id="reference">Reference</h1>
<p>【1】https://www.zhihu.com/question/487766088<br>
【2】Towards Stabilizing Batch Statistics in Backward Propagation of
Batch Normalization https://arxiv.org/abs/2001.06838<br>
【3】Transformer中的归一化(一)：什么是归一化&amp;为什么要归一化
https://zhuanlan.zhihu.com/p/476102712<br>
【4】Batch Normalization: Accelerating Deep Network Training by Reducing
Internal Covariate Shift https://arxiv.org/abs/1502.03167<br>
【5】How Does Batch Normalization Help Optimization?
https://arxiv.org/abs/1805.11604<br>
【6】Batch Normalization: Accelerating Deep Network
https://zhuanlan.zhihu.com/p/340856414<br>
【7】Layer Normalization https://arxiv.org/abs/1607.06450<br>
【8】详解深度学习中的Normalization，BN/LN/WN
https://zhuanlan.zhihu.com/p/33173246<br>
【9】Transformer中的归一化(四)：BatchNormalization的原理、作用和实现
https://zhuanlan.zhihu.com/p/481277619<br>
【10】Layer Normalization https://arxiv.org/abs/1607.06450<br>
【11】PowerNorm: Rethinking Batch Normalization in Transformers
https://arxiv.org/abs/2003.07845<br>
【12】Root Mean Square Layer Normalization
https://arxiv.org/abs/1910.07467<br>
【13】On Layer Normalization in the Transformer Architecture
https://arxiv.org/abs/2002.04745<br>
【14】为什么Pre Norm的效果不如Post Norm？
https://spaces.ac.cn/archives/9009<br>
【15】Understanding the Difficulty of Training Transformers
https://arxiv.org/abs/2004.08249<br>
【16】RealFormer: Transformer Likes Residual Attention
https://arxiv.org/abs/2012.11747<br>
【17】DeepNet: Scaling Transformers to 1,000 Layers
https://arxiv.org/abs/2203.00555</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>layernorm</tag>
        <tag>normalization</tag>
        <tag>batchnorm</tag>
        <tag>post-norm</tag>
        <tag>pre-norm</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型算法题(2)</title>
    <url>/ad0bba9d.html</url>
    <content><![CDATA[<p><img src="/images/cover.png"></p>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
<hr>
<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<p>本系列将整理一些LLM中关键的、细节的、值得关注的内容，持续更新<sub>如有错误，欢迎指正</sub></p>
<hr>
<h1 id="在bert中词向量token-embedding和绝对位置编码position-encoding为什么可以直接相加">1、在Bert中，词向量token
embedding和(绝对)位置编码position encoding为什么可以直接相加？</h1>
<p>1、两个向量相加，理论上其效果等价于维度拼接concat+线性变换，而相加的操作在实现上更为方便。</p>
<p>2、高维空间中(如768维)，两个随机向量近似为正交关系。模型在高维度有能力区分出所有组合的情况。假设共有2万个词向量，500个位置，则模型需要在768维空间区分1000万个点，即使768维每个维度只能取1和-1也具备足够的区分能力。</p>
<p>3、词向量和位置编码可以认为都是一个one-hot向量经过一层线性变换层得到的。两个向量相加等价于把它们的one-hot编码拼接后进行线性变换。</p>
<p>4、没有使用相乘则是出于工程考虑。相加相比相乘结果更为稳定，方便训练。</p>
<h1 id="lora和全参数训练在计算量和显存上相比如何为什么lora能提升大模型训练效率">2、LoRA和全参数训练在计算量和显存上相比如何？为什么LoRA能提升大模型训练效率？</h1>
<p>1、计算量上：LoRA训练时，在主干模型的（部分）全连接层增加了LoRA旁路，前向和后向的计算量都在主干模型的基础上，增加了旁路部分的计算，因此相比全参数训练，略有增加。</p>
<p>2、显存上：训练时，显存主要有①模型参数②梯度③中间激活值④优化器参数四个部分。模型参数/梯度/激活值相比全参数训练也略微增加；而优化器则不需要再存储原模型参数的部分，只需要存储LoRA旁路部分，这部分节省较多显存。</p>
<p>3、使用LoRA能提升训练效率主要是因为（1）优化器部分的显存需要减少了，可以增大batch（2）优化器参数减少了，分布式训练中多卡之间的通信量减少了（3）（optional）主干模型由于不用更新，可以进一步量化到int8/int4等。</p>
<h1 id="为什么模型需要normalizationbatchnormlayernorm等">3、为什么模型需要normalization（batchnorm/layernorm等）？</h1>
<p>1、输入数据包含多个特征，特征之间有不同的量纲和范围（如身高180和年龄18岁），通过normalization进行归一化再经过模型进行线性/非线性组合，能够防止部分特征占据主导，部分特征被忽略。</p>
<p>2、batchnorm论文认为：模型一般有多层，前一层的输出是后一层的输入，而训练中前一层的参数更新会导致后一层的输入数据分布变化导致ICS（internal
covariate
shift），这样后面的层就不得不频繁剧烈更新适应分布变化，导致分布偏移进入激活函数饱和区而出现梯度消失，另外分布变化也是对i.i.d.条件的破坏。使用normalization可以保持分布的稳定，减小方差，使模型训练可以正常进行。</p>
<p>3.《How Does Batch Normalization Help
Optimization?》设计了实验测量使用batchnorm前后的ICS，发现batchnorm实际上并没有缓解ICS，甚至有所增加。而batchnorm能优化模型训练的原因更多是使得损失函数平面更加光滑，而便于梯度下降收敛。</p>
<h1 id="transformer中pre-norm和post-norm各有什么优缺点">4、Transformer中pre-norm和post-norm各有什么优缺点?</h1>
<p>1.原始的Transformer用的是post-norm，它在残差之后进行归一化（add &amp;
norm），对参数正则化的效果更强，模型更为鲁棒；post-norm对每个通路都进行了归一化，使得梯度在回传的时候容易出现消失。</p>
<p>2.Pre-norm相对于post-norm，残差部分存在不经过归一化的通路，因此能够缓解梯度消失，能够训练更深的网络。但是模型的等效“深度”受到影响，L+1层网络近似于一个L层的宽网络。</p>
<p>3.也就是说，在层数较少，post-norm和pre-norm都能正常收敛的情况下，post-norm的效果更好一些；但是pre-norm更适合用于训练更深的网络。</p>
<h1 id="对于使用multi-head-attention的模型假设hidden-sized注意力头数量为h每个头维度为d假设有ddh输入上下文长度为sbatch-size1计算self-attention模块各个部分的计算量float-operations">5、对于使用Multi-Head
Attention的模型，假设hidden
size=D，注意力头数量为h，每个头维度为d（假设有D=d×h），输入上下文长度为s，batch
size=1，计算self-attention模块各个部分的计算量（Float
Operations）。</h1>
<p>1.QKV线性变换：6 × s ×
D^2（矩阵乘法，每个位置有加法和乘法两个运算，因此每个位置需要2D次计算）</p>
<p>2.QK内积：h × 2 × d × s^2（h组矩阵分别计算）</p>
<p>3.scaling：h × s^2</p>
<p>4.softmax：h × 3 ×
s^2（softmax是按列进行的，每列要计算s个exp，s个exp结果的求和，以及s次除法）</p>
<p>5.reduction（权重矩阵乘以V）：h × 2 × d × s^2</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a></p>
<p><a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a></p>
<p><a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a></p>
<p><a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a></p>
<p><a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a></p>
<p><a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a></p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>大规模对话模型：ChatGPT下的银牌选手们</title>
    <url>/14e576c.html</url>
    <content><![CDATA[<img src="/14e576c/1.png" class title="page_1">
<img src="/14e576c/2.png" class title="page_2">
<img src="/14e576c/3.png" class title="page_3">
<img src="/14e576c/4.png" class title="page_4">
<img src="/14e576c/5.png" class title="page_5">
<img src="/14e576c/6.png" class title="page_6">
<img src="/14e576c/7.png" class title="page_7">
<img src="/14e576c/8.png" class title="page_8">
<img src="/14e576c/9.png" class title="page_9">
<img src="/14e576c/10.png" class title="page_10">
<img src="/14e576c/11.png" class title="page_11">
<img src="/14e576c/12.png" class title="page_12">
<img src="/14e576c/13.png" class title="page_13">
<img src="/14e576c/14.png" class title="page_14">
<img src="/14e576c/15.png" class title="page_15">
<img src="/14e576c/16.png" class title="page_16">
<img src="/14e576c/17.png" class title="page_17">
<img src="/14e576c/18.png" class title="page_18">
<img src="/14e576c/19.png" class title="page_19">
<img src="/14e576c/20.png" class title="page_20">
<img src="/14e576c/21.png" class title="page_21">
<img src="/14e576c/22.png" class title="page_22">
<img src="/14e576c/23.png" class title="page_23">
<img src="/14e576c/24.png" class title="page_24">
<img src="/14e576c/25.png" class title="page_25">
<img src="/14e576c/26.png" class title="page_26">
<img src="/14e576c/27.png" class title="page_27">
<img src="/14e576c/28.png" class title="page_28">
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>ChatGPT</tag>
        <tag>Sparrow</tag>
        <tag>LaMDA</tag>
        <tag>GopherCite</tag>
        <tag>WebGPT</tag>
        <tag>InstructGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>MoE模型的前世今生</title>
    <url>/44e38c1b.html</url>
    <content><![CDATA[<p>【本文已在同名 微信公众号 / 知乎 / <a href="http://www.linsight.cn/">个人博客linsight.cn</a> 上线】</p>
<hr>
<p>2024年3、4月这段时间，很多MoE模型扎堆发布，包括Qwen1.5-MoE，DBRX和Jamba等。</p>
<p>下面这个表格收集了一部分近期的MoE工作</p>
<center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">模型</th>
<th style="text-align: center;">发布时间</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">GPT4</td>
<td style="text-align: center;">2023年3月</td>
<td style="text-align: center;">23年6月George
Hotz爆料GPT4是8×220B模型</td>
</tr>
<tr class="even">
<td style="text-align: center;">Mistral-8×7B</td>
<td style="text-align: center;">2023年12月</td>
<td style="text-align: center;">Mistral AI，开源</td>
</tr>
<tr class="odd">
<td style="text-align: center;">LLAMA-MoE</td>
<td style="text-align: center;">2023年12月</td>
<td style="text-align: center;">github开源项目</td>
</tr>
<tr class="even">
<td style="text-align: center;">DeepSeek-MoE</td>
<td style="text-align: center;">2024年1月</td>
<td style="text-align: center;">幻方量化，国内首个开源MoE模型，有技术报告</td>
</tr>
<tr class="odd">
<td style="text-align: center;">abab6</td>
<td style="text-align: center;">2024年1月</td>
<td style="text-align: center;">MiniMax，号称千亿MoE，无开源，无细节发布</td>
</tr>
<tr class="even">
<td style="text-align: center;">天工2.0</td>
<td style="text-align: center;">2024年2月</td>
<td style="text-align: center;">昆仑万维，无开源，无细节发布</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Step-2</td>
<td style="text-align: center;">2024年3月</td>
<td style="text-align: center;">阶跃星辰，无开源，无细节发布</td>
</tr>
<tr class="even">
<td style="text-align: center;">MM1</td>
<td style="text-align: center;">2024年3月</td>
<td style="text-align: center;">苹果，多模态MoE，无开源，有技术报告</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Grok-1</td>
<td style="text-align: center;">2024年3月</td>
<td style="text-align: center;">X，开源</td>
</tr>
<tr class="even">
<td style="text-align: center;">Qwen1.5-MoE-A2.7B</td>
<td style="text-align: center;">2024年3月</td>
<td style="text-align: center;">阿里，开源</td>
</tr>
<tr class="odd">
<td style="text-align: center;">DBRX</td>
<td style="text-align: center;">2024年3月</td>
<td style="text-align: center;">Databricks，开源</td>
</tr>
<tr class="even">
<td style="text-align: center;">Jamba</td>
<td style="text-align: center;">2024年3月</td>
<td style="text-align: center;">AI21，开源</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Mistral-8×22B</td>
<td style="text-align: center;">2024年4月</td>
<td style="text-align: center;">Mistral AI，开源</td>
</tr>
<tr class="even">
<td style="text-align: center;">WizardLM-2-8×22B</td>
<td style="text-align: center;">2024年4月</td>
<td style="text-align: center;">微软，开源</td>
</tr>
<tr class="odd">
<td style="text-align: center;">天工3.0</td>
<td style="text-align: center;">2024年4月</td>
<td style="text-align: center;">昆仑万维，4000亿MoE</td>
</tr>
</tbody>
</table>
</center>
<p>就连前不久小米汽车发布会上，雷总也弄了个多模态MoE大模型做汽车智能中控</p>
<img src="/44e38c1b/xiaomi_moe.jpg" class title="小米汽车多模态MoE模型">
<p>相信接下来的这段时间，MoE还会给我们带来更多的大新闻，因此也有必要详细了解一下这个很有前途的架构。</p>
<p>本篇将初步梳理MoE相关的一些工作，从背景、动机、思路和效果的来理解MoE。</p>
<p>到文章发出的2024年4月为止，个人认为DeepSeek-MoE和Qwen1.5-MoE是国内做得比较好的两个工作，赶时间的朋友可以直接跳到相关篇章，优先关注这两个工作。</p>
<h1 id="时间线">时间线</h1>
<p>先对MoE相关的工作，按时间线梳理一下（然后发现早期的MoE工作基本是Google在引领）。</p>
<h2 id="上古时代">上古时代</h2>
<p>首先是大部分17年后的MoE工作都会引用的，1991年的论文<a href="https://www.cs.toronto.edu/~hinton/absps/jjnh91.pdf">《Adaptive
Mixtures of Local Experts》</a>，这篇文章出自Geoffrey Hinton和Michael I.
Jordan两尊大神之手。</p>
<p>虽然在更早的时候就有MoE相关概念的工作，如原文所说</p>
<blockquote>
<p>This idea was first presented by Jacobs and Hinton at the
Connectionist Summer School in Pittsburg in 1988.</p>
</blockquote>
<p>但是大部分MoE文章还是认为是这个工作奠定了MoE的基础。</p>
<h2 id="rnn时代">RNN时代</h2>
<p>时隔二十多年，Google在2017年1月的<a href="https://arxiv.org/abs/1701.06538">《Outrageously Large Neural
Networks: The Sparsely-Gated Mixture-of-Experts
Layer》</a>把MoE带进了LSTM，训出了137B参数的LSTM模型。</p>
<h2 id="transformer时代">Transformer时代</h2>
<ol type="1">
<li><p>2020年6月，依然是Google，<a href="https://arxiv.org/abs/2006.16668">《GShard: Scaling Giant Models
with Conditional Computation and Automatic
Sharding》</a>把MoE应用在encoder-decoder结构的transformer模型上，完成600B参数模型的训练。</p></li>
<li><p>2021年1月，还是Google，发表了<a href="https://arxiv.org/abs/2101.03961">《Switch Transformers: Scaling
to Trillion Parameter Models with Simple and Efficient Sparsity》</a>
，在T5（encoder-decoder结构）的基础上训出了1.6T参数量的switch
transformer。</p></li>
<li><p>2022年4月，Google发布<a href="https://arxiv.org/abs/2202.08906">《ST-MoE: Designing Stable and
Transferable Sparse Expert
Models》</a>，也是一个基于encoder-decoder结构的MoE模型，269B的总参数，32B的激活参数。</p></li>
</ol>
<h2 id="gpt时代">GPT时代</h2>
<ol type="1">
<li><p>21年12月，Google继续搞出了GLaM，<a href="https://arxiv.org/abs/2112.06905">《GLaM: Efficient Scaling of
Language Models with
Mixture-of-Experts》</a>，一个1.2T参数量的Decoder-only模型。</p></li>
<li><p>2024年1月，幻方量化发出技术报告<a href="https://arxiv.org/abs/2401.06066">《DeepSeekMoE: Towards Ultimate
Expert Specialization in Mixture-of-Experts Language
Models》</a>，给出了DeepSeek-MoE的一些细节。</p></li>
</ol>
<h1 id="奠基工作">奠基工作</h1>
<p>Geoffrey Hinton和Michael I. Jordan的<a href="https://www.cs.toronto.edu/~hinton/absps/jjnh91.pdf">《Adaptive
Mixtures of Local Experts》</a>是大多数MoE论文都会引用的最早工作。</p>
<p>这篇文章大致的思路是这样的：对于比较复杂的任务，一般可以拆分为多个子任务。比如要求计算输入文本中有多少个动词和名词，那就可以拆分为“数动词”和“数名词”这两个子任务。</p>
<p>而一个模型如果要同时学习多个子任务，多个子任务相互之间就会互相影响，模型的学习就会比较缓慢、困难。</p>
<p>因此这篇文章提出了一种由多个分开的子网络组成的监督学习方法。这些分开的网络，在训练过程中，分别学习处理训练数据中的一个子集，也就是一个子任务。这个思路就是现代MoE的思路，每个子网络（也就是一个expert）学习处理一部分内容。（大神就是大神，几十年前就把框架都搭好了）</p>
<p>文章里把这个MoE的方法应用于vowel discrimination
task元音辨别任务，验证了效果。元音辨别指的是语音学中区分不同元音的能力，在语音学中，模型需要学习辨别不同的元音因素，以便准确地理解和识别语音输入。通过让多个子模型分别学习分别学习元音辨别的子任务，最终效果得到了提升。</p>
<p>下图展示的就是这个MoE的思路：各个expert network和gating
network接收同样的输入，每个expert给出各自的处理结果，而gating
network输出每个expert的权重，就像一个开关一样，控制着每个expert对当前输入的打开程度，只是这个开关不是离散的，而是stochastic的。</p>
<img src="/44e38c1b/vanilla_moe.png" class title="Vanilla MoE">
<p>实际上，MoE这个idea在这篇文章之前就有了。如论文中所提，Jacobs和Hinton在1988就讨论过。但是之前的工作在loss的设计上，和ensemble更相近，多个expert之间更倾向于合作，每个expert会学习其他expert的residual部分。</p>
<p>具体来说，对于case <span class="math inline">\(c\)</span>，假设第
<span class="math inline">\(d^c\)</span> 是ground truth，第 <span class="math inline">\(i\)</span> 个expert的输出是 <span class="math inline">\(o_{i}^c\)</span>，<span class="math inline">\(p_{i}^c\)</span> 是gating network给第 <span class="math inline">\(i\)</span>
个expert分配的权重，那么以前的工作所使用的损失函数 <span class="math inline">\(E^{c}\)</span> 计算如下</p>
<p><span class="math display">\[E^{c}=\left|\left|d^{c}-\sum_{i}p_{i}^{c}o_{i}^{c}\right|\right|^{2}\]</span></p>
<p>这样的损失计算方式，是把期望输出和所有expert输出的混合结果进行比较。</p>
<p>这样做的结果是，在训练过程中，每个expert学习的其实是其他expert的组合结果所剩下的残差。这样的学习目标并不能很好迫使每个expert单独输出好的结果，因此不能得到稀疏的模型。</p>
<p>从另一个角度来看，这个损失计算把所有专家耦合在了一起。即当一个expert的输出发生了变化，所有expert的组合结果也会变化，其他所有的expert也需要做相应的改动来适应这个变化。各个expert之间更加倾向于合作，而不是相互竞争并单独给出好的结果。</p>
<p>虽然可以使用如增加辅助损失函数的做法，迫使模型给出稀疏激活的结果，但是这样对模型最终效果也是有损害的。</p>
<p>而Hinton和Jordan在这个工作里，提出更简单的做法是对loss计算进行修改，使得各个expert之间的关系从合作变成竞争。</p>
<p>假设gating network每次随机选择一个expert，损失计算如下</p>
<p><span class="math display">\[E^{c}=\langle\|\mathbf{d}^c-\mathbf{o}_i^c\|^2\rangle=\sum_{i}p_{i}^{c}\left|\left|d^{c}-o_{i}^{c}\right|\right|^{2}\]</span></p>
<p>在这个损失函数中，每个expert的输出结果会单独和期望结果进行对比，这就要求每个expert给出完整的结果，而不是仅学习其他expert的残差。</p>
<p>这样的loss计算具有localization的特性，即如果一个训练case错了，那么会被修改的主要是对应的expert，以及负责分配权重的gating
network，而不会很大地影响其他expert。</p>
<p>此外，localization还体现在，每个expert只会负责处理输入空间中某个特定子空间的向量，而不是完整的输入空间。</p>
<p>这样一来，不同的expert之间不会直接相互影响，虽然还是有间接的影响，比如某个expert的输出变了，gating
network可能会分配新的权重，但是至少不会改变其他expert
error的符号（+，-）。</p>
<p>最终的结果是，对于给定的输入，这样的系统会倾向于分配单一一个expert来预测结果。</p>
<p>上面提出的这个loss计算，理论上没有问题，实际上也能训练，但是为了得到更好的效果，作者把原loss计算作了如下变化：先指数化再求和，最后再取对数，得到了优化loss。看下变化前后的对比</p>
<p><span class="math display">\[\text{原loss：}E^{c}=\sum_{i}p_{i}^{c}\left|\left|d^{c}-o_{i}^{c}\right|\right|^{2}\]</span></p>
<p><span class="math display">\[\text{优化loss：}E^c=-log\sum_ip_i^ce^{-\frac12\|\mathbf{d}^c-\mathbf{o}_i^c\|^2}\]</span></p>
<p>这样做有什么好处呢？来对比一下原loss函数和优化后的loss函数的求导结果</p>
<p><span class="math display">\[\text{原loss导数：}\frac{\partial
E^c}{\partial\mathbf{o}_i^c}=-2p_i^c(\mathbf{d}^c-\mathbf{o}_i^c)\]</span></p>
<p><span class="math display">\[\text{优化loss导数：}\frac{\partial
E^c}{\partial\mathbf{o}_i^c}=-\left[\frac{p_i^ce^{-\frac{1}{2}\|\mathbf{d}^c-\mathbf{o}_i^c\|^2}}{\sum_jp_j^ce^{-\frac{1}{2}\|\mathbf{d}^c-\mathbf{o}_j^c\|^2}}\right](\mathbf{d}^c-\mathbf{o}_i^c)\]</span></p>
<p>相比原loss函数的导数，优化后的loss函数的导数，把当前第 <span class="math inline">\(i\)</span>
个expert的表现，和其他expert联系起来了。这样能够更好地衡量expert <span class="math inline">\(i\)</span>
对当前case的处理结果好坏。特别是在训练初期，gating
network的权重是近似平均分配的，那么使用原loss函数的结果是，对当前case效果最好的expert，学习速度是最慢的（因为loss最小）；而优化的loss函数则可以让当前最好的expert的学习速度最快。</p>
<p>这样就能强化localization的特征，使得各个expert更快拟合到自己擅长的部分，加速训练。</p>
<p>BTW，优化后的这个loss导数，和现在的对比学习形式上看起来也很相似。</p>
<p>这个工作在今天看来不很复杂，但是思路还是很踏实有效的，给MoE奠定了很好的基础。</p>
<h1 id="lstm-moe">LSTM MoE</h1>
<p>Google在2017年1月发布 <a href="https://arxiv.org/abs/1701.06538">《OUTRAGEOUSLY LARGE NEURAL
NETWORKS: THE SPARSELY-GATED MIXTURE-OF-EXPERTS
LAYER》</a>，把MoE应用到了LSTM上，训出了137B的LSTM模型。（模型强者，竟恐怖如斯）</p>
<p>虽然当时Transformer还没出来，大模型的竞赛也还不像今天这么可怕，但是在多个领域中（文本、图像、音频），已经有不少工作反复证实了一件事：模型容量越大，能训出来的效果越好。但是模型越大，需要的训练数据就越多，这就造成了训练开销基本是随着模型增大，以平方关系在增长。</p>
<p>在这个背景下就有一些conditional
computation，条件计算的工作来解决这个问题。conditional
computation，就是根据输入，有选择地只激活部分网络模块。那么这里所使用的MoE其实就可以算是条件计算的一种。由于不用激活全部参数，训练所需的计算量就大大减小，不用按平方增加。</p>
<p>虽说理论上计算量下来了，不过实操起来还是会遇到几个问题：</p>
<ul>
<li>训练的时候，在MoE结构下，每个expert的batch size比整个模型的batch
size小了。<br>
比如模型的batch
size是32，一共有16个expert，那实际上一次迭代平均每个expert只能分到2个训练样本。而batch
size对训练效率影响是很大的，大的batch
size摊小了参数传输和更新的成本。如果直接增大模型的batch
size，又会受显存和通讯效率的限制。<br>
</li>
<li>训练数据量不足。<br>
要训大模型就需要大量的数据，让模型参数充分学习。在当时的背景下，大规模的NLP数据是比较缺的。当然如今数据集多了很多，特别是预训练数据，这个问题现在来看没有那么突出了。<br>
</li>
<li>损失函数的设计。<br>
如何使用合适的损失函数来训练模型，提升效果，并且使得模型的负载比较均衡，这是一个不容易解决的问题。<br>
</li>
<li>集群通讯问题。<br>
一个GPU集群的计算能力可能比设备间网络带宽的总和高出数千倍，因此设备间的通讯很可能成为训练效率的瓶颈。为了计算效率，就要使得设备内计算量和所需的通讯量的比值，达到相应的比例。<br>
</li>
<li>GPU计算特点。<br>
GPU做数学计算很快，但是并不擅长做branching（if/else），因此MoE的工作基本上都是用gating
network来控制参数的激活。这个严格来说不算是新的挑战了，应该说是根据计算设备沿用下来的设计。</li>
</ul>
<p>这些问题要能解决好，才能训出比较好的模型来。</p>
<h2 id="模型设计">模型设计</h2>
<p>在解决工程问题之前，先看下模型结构的设计。</p>
<p>这里使用的是两个LSTM层，中间夹着一个MoE，最上面和最下面分别还有一个embedding层和一个任务输出层，如下图</p>
<img src="/44e38c1b/rnn_moe.png" class title="LSTM MoE">
<p>每个expert是一个简单的feed-forward neural
network。一共有n个expert，gating network输出是一个稀疏的n维向量</p>
<p><span class="math display">\[\begin{aligned}y=\sum_{i=1}^nG(x)_iE_i(x)\end{aligned}\]</span></p>
<p><span class="math inline">\(E_{i}(x)\)</span> 是第 <span class="math inline">\(i\)</span> 个expert的输出，<span class="math inline">\(G(x)_{i}\)</span> 是gating network给出的第 <span class="math inline">\(i\)</span> 个expert的权重。如果 <span class="math inline">\(G(x)_{i}\)</span>
为0，就不用计算对应的那个expert了，节省了计算。</p>
<p>这里还提到了，如果expert的数量特别多，可以用two-level hierarchical
MoE，即使用两层gating network，第一层的gating
network先选择一批expert，每批expert分支又有一个单独的gating
network来选择具体的expert。</p>
<p>那具体gating network怎么设计呢？</p>
<p>如果对输入进行线性变换，再加上一个softmax，那得到的是一个非稀疏的gating
function</p>
<p><span class="math display">\[\begin{aligned}G_\sigma(x)=Softmax(x\cdot
W_g)\end{aligned}\]</span></p>
<p>在这个基础上，使用一个topk函数，只保留最大的k个值，其他都设为﹣∞（softmax之后变成0），这样就能只选择部分expert，得到了稀疏性。文章指出，虽然理论上这个形式的sparsity会造成gating
function的不连续，不过在实操中暂时没有遇到问题。</p>
<p>在这个基础上，在输入再加上一个Gaussian
noise，这个noise的大小由另外一个可学习的参数来控制。整体的计算公式如下</p>
<p><span class="math display">\[\begin{aligned}G(x)=Softmax(KeepTopK(H(x),k))\end{aligned}\]</span></p>
<p><span class="math display">\[KeepTopK(v,k)_i=\begin{cases}v_i&amp;\text{if
}v_i\text{ is in the top }k\text{ elements of
}v.\\-\infty&amp;\text{otherwise.}\end{cases}\]</span></p>
<p><span class="math display">\[\begin{aligned}H(x)_i=(x\cdot
W_g)_i+StandardNormal()\cdot Softplus((x\cdot
W_{noise})_i)\end{aligned}\]</span></p>
<p>其中用来调整noise的非线性函数是个类似ReLU的激活函数，但是更为光滑，函数图像如下</p>
<img src="/44e38c1b/softplus.png" class title="softplus">
<p>这里添加噪声的原因是要做负载平衡，具体的分析后面来说。</p>
<h2 id="解决工程问题">解决工程问题</h2>
<p>前面提到了由于稀疏激活的原因，每个expert的batch
size会变小。假设每次在n个expert中选择k个，模型训练的batch
size为b，那么每个expert的batch
size就是kb/n。文章通过一下这几种方法来提升每个expert的batch size：</p>
<ul>
<li>混合使用数据并行和模型并行。本来在使用数据并行的情况，每个模型副本是异步处理各自的数据的。而这里做了优化，各个副本的batch是同步处理的，这样就可以把多个模型副本的batch组合起来。对于非MoE部分的参数，依然使用标准的数据并行机制；而对于每个expert，则在整个集群中只保留一个副本。如果模型分布在d个设备上，那每个expert就能得到一个kbd/n的batch
size。</li>
<li>对于LSTM模型，在时间步上展开，就能把batch size提升相应的倍数。</li>
</ul>
<p>另一个挑战就是平衡集群计算量和通讯量的关系。</p>
<p>对于每个expert来说，主要的通讯就是input和output的传输，而计算量就是每个专家的两个全连接层，大小分别为[input_size,
hidden_size]和[hidden_size,
output_size]。对于GPU来说，计算速度可能是通讯速度的1000倍，那我们就需要把计算量设计得足够大。最简单的做法就是把hidden_size提高，使得每个expert的内部计算量比通讯录大1000倍。</p>
<h2 id="负载均衡">负载均衡</h2>
<p>实验中观察到，如果不对gating进行干预，那么模型倾向于收敛到“总是选固定的几个expert”的状态，而其他expert几乎不会被使用。而且这种状态会自我加强，因为经常被选到的expert会得到更充分的训练，从而又提升被选中激活的概率。</p>
<p>之前有一些工作使用hard
constraint来缓解这种状况，比如到某个expert激活次数达到上限，就把它从候选集合中移除。在这里使用的是一种soft
constraint。</p>
<p>具体来说，对于每个expert，定义了一个它在当前batch数据里的重要性指标。这个重要性指标的计算方式是对这个batch里所有数据，分配到这个expert的总和，如以下公式所示</p>
<p><span class="math display">\[Importance(X)=\sum_{x\in
X}G(x)\]</span></p>
<p><span class="math inline">\(G(x)\)</span> 是gating
network给出的权重，是一个维度等于expert数量的向量。</p>
<p>基于这个重要性指标，定义了一个额外的损失 <span class="math inline">\(L_{importance}\)</span>，这个额外损失会和模型训练的损失加到一起。<span class="math inline">\(L_{importance}\)</span> 的计算方式如下</p>
<p><span class="math display">\[L_{importance}(X)=w_{importance}\cdot
CV(Importance(X))^2\]</span></p>
<p>其中<span class="math inline">\(w_{importance}\)</span>
是手动调整的超参，CV是coefficient of variation。</p>
<p>coefficient of
variation离散系数，是概率分布离散程度的一个归一化量度，定义为标准差
<span class="math inline">\(\sigma\)</span> 和 均值 <span class="math inline">\(\mu\)</span>
的比值。对于MoE来说，均值是固定的，如果expert的gating很不平衡，则标准差会很大，离散系数也会很大，使得
<span class="math inline">\(L_{importance}\)</span> 变大。</p>
<p>但是这里还是有问题，虽然均衡的负载可以推导出 <span class="math inline">\(L_{importance}\)</span> 较小的结论，但是 <span class="math inline">\(L_{importance}\)</span>
较小却不能保证负载均衡。也就是说 <span class="math inline">\(L_{importance}\)</span>
较小只是负载均衡一个必要不充分条件。比如一个expert可能以很高的权重被分配到一个样本，而另一个expert可能以不太高的权重被分配到好几个样本。这种情况下在整个batch内对权重进行求和，仍然可以呈现出均匀的表象（离散系数比较小），但这并不符合我们的要求。</p>
<p>为了解决这个问题，额外再加上一个损失 <span class="math inline">\(L_{load}\)</span>
。这里就要用到添加在每个expert输出上的随机噪音了。</p>
<p>我们想要各个expert的负载均衡，但是分配到各个expert的样本数是个离散值，因此没有办法直接用于back
propagation，而 <span class="math inline">\(L_{load}\)</span>
就是对各个expert负载的一个平滑评估。</p>
<p>前面在设计MoE的时候，定义了 <span class="math inline">\(H(x)\)</span>
为KeepTopK函数的输入</p>
<p><span class="math display">\[\begin{aligned}G(x)=Softmax(KeepTopK(H(x),k))\end{aligned}\]</span></p>
<p><span class="math display">\[\begin{aligned}H(x)_i=(x\cdot
W_g)_i+StandardNormal()\cdot Softplus((x\cdot
W_{noise})_i)\end{aligned}\]</span></p>
<p>那么这里先定义一个 <span class="math inline">\(kth\_excluding(H(x),k,i)\)</span>，表示在除去
<span class="math inline">\(H(x)\)</span> 中的第 <span class="math inline">\(i\)</span> 个分量之后，排在第 <span class="math inline">\(k\)</span> 大的值。基于这个，再定义 <span class="math inline">\(P(x,i)\)</span>
为，固定其他分量已经选取好的noise，重新给第 <span class="math inline">\(i\)</span> 个分量再添加一次noise，结果比 <span class="math inline">\(kth\_excluding(H(x),k,i)\)</span> 大的概率</p>
<p><span class="math display">\[\begin{aligned}P(x,i)=Pr\Big((x\cdot
W_g)_i+StandardNormal()\cdot Softplus((x\cdot
W_{noise})_i)\\&gt;kth\_excluding(H(x),k,i)\Big)\end{aligned}\]</span></p>
<p>这个概率可以简化写成</p>
<p><span class="math display">\[\begin{aligned}P(x,i)&amp;=\Phi\Big(\frac{(x\cdot
W_g)_i-kth\_excluding(H(x),k,i)}{Softplus((x\cdot
W_{noise})_i)}\Big)\end{aligned}\]</span></p>
<p>其中 <span class="math inline">\(\Phi\)</span>
是标准正态分布的CDF。</p>
<p>接下来就可以把第 <span class="math inline">\(i\)</span>
个expert的负载定义为</p>
<p><span class="math display">\[\begin{aligned}Load(X)_i=\sum_{x\in
X}P(x,i)\end{aligned}\]</span></p>
<p>有了每个expert的负载衡量，就可以和前面第一个负载均衡损失一样，计算新的负载均衡损失了</p>
<p><span class="math display">\[L_{load}(X)=w_{load}\cdot
CV(Load(X))^2\]</span></p>
<p>文中提到一个细节，在刚开始训练的时候，希望模型分配的expert尽量均衡，因此把
<span class="math inline">\(W_g\)</span> 和 <span class="math inline">\(W_noise\)</span>
都设为0，这样相当于没有信号，也没有噪音。</p>
<p>最终使用负载均衡之后的效果如下</p>
<img src="/44e38c1b/rnn_moe_load_function.png" class title="负载平衡效果">
<h2 id="实验">实验</h2>
<ol type="1">
<li>模型容量 &amp; 参数效率</li>
</ol>
<p>为了验证模型容量提升带来的收益，以及MoE模型的参数效率（即同样推理计算量下能达到的效果），训了总共包含4/32/256个expert的flat
MoE模型，和总共包含256/1024/4096个expert的4、32、256，hierarchical
MoE模型。每个expert大约是1M参数量，对于所有模型都是激活4个expert。</p>
<p>效果如下图</p>
<img src="/44e38c1b/rnn_moe_perf.png" class title="效果">
<p>左边：参数越多，最终效果越好</p>
<p>右边：同样推理计算量下，MoE模型效果更好</p>
<ol start="2" type="1">
<li>更大的模型</li>
</ol>
<p>前面几个模型训练用的数据量不是很大，训练不久就diminishing
returns，为了验证更大数据集 + 更大模型的收益，在100B
token的语料上，分别训了包含32, 256, 1024，4096, 16384, 65536,
和131072个expert的MoE模型，最大的达到了137B参数量。</p>
<p>各个模型对比如下表</p>
<img src="/44e38c1b/rnn_moe_137b.png" class title="137模型效果">
<ol type="1">
<li>Expert Specialization</li>
</ol>
<p>把模型中不同的expert分配到token拿出看，发现确实有比较强的specialization效果，不同的专家处理不同的内容</p>
<img src="/44e38c1b/rnn_moe_specilized.png" class title="RNN MoE 专门化">
<h1 id="gshard">GShard</h1>
<p>2018年，随着Bert的发布，transformer结构彻底火了起来。2020年6月，Google发布《GShard:
Scaling Giant Models with Conditional Computation and Automatic
Sharding》，把MoE用到了encoder-decoder结构的transformer上。至此，MoE终于变成我们熟悉的样子。</p>
<p>GShard做了很多的实验，训了很多规模巨大的MoE模型，最大达到了600B。这样的规模放到2024年的今天依然是很巨大的。</p>
<img src="/44e38c1b/gshard_moe_family.png" class title="GShard MoE family">
<p>在expert数量的设计上，延续上面LSMT MoE工作的思路 --
expert越多，效果越好，，这个思路和如今很多新发布的模型就不太相同。</p>
<p>GShard论文中很大的篇幅在介绍工程实现和优化，这也是MoE模型最大的痛点之一。关于工程实现的内容比较硬核，因此这里不会展开讲太多，感兴趣的朋友可以看下原文。</p>
<p>细节上，先来看下模型设计。</p>
<p>Google在那段时间走的是encoder-decoder
transfomer的技术路线，因此GShard也是基于encoder-decoder
transfomer的模型结构。在encoder和decoder中，每两层把其中一个FFN层替换成MoE层。对于总共有N层的模型，则有N/2个MoE层，如下图</p>
<img src="/44e38c1b/gshard_model.png" class title="GShard模型结构">
<p>每层会最多选择top-2 expert激活。为什么是最多，后面来解释。</p>
<p>GShard在上面这篇《Outrageously Large Neural Networks: The
Sparsely-Gated Mixture-of-Experts Layer》的基础上，改进了gating
function和auxiliary loss function。</p>
<p>MoE层的具体计算如下</p>
<p><span class="math display">\[\begin{aligned}
\mathcal{G}_{s,E}&amp; =\mathrm{GATE}(x_s)  \\
\mathrm{FFN}_e(x_s)&amp; =wo_e\cdot\text{ReLU}(wi_e\cdot x_s)  \\
y_{s}&amp; =\sum_{e=1}^E\mathcal{G}_{s,e}\cdot\mathrm{FFN}_e(x_s)
\end{aligned}\]</span></p>
<p>其中 <span class="math inline">\(x_s\)</span> 是MoE的输入token，<span class="math inline">\(w_i\)</span> 和 <span class="math inline">\(w_o\)</span>
分别是输入输出的线性变换矩阵。向量<span class="math inline">\(\mathcal{G}_{s}\)</span> 就是gating
function的输出。</p>
<p>GShard在gating function的设计上提出了两个要求</p>
<ul>
<li>负载均衡<br>
</li>
<li>高效扩展。要对N个token分别进行E个expert的分配，N能达到百万甚至千万级别，而E也有几百上千，因此需要一个高效的分布式实现，以免其他计算资源等待gating
function。</li>
</ul>
<p>为了满足这些要求，gating function设计了以下机制</p>
<ul>
<li>专家容量 expert capacity。<br>
为了确保负载平衡，我们不希望有少量expert需要处理很多token，因此强制规定每一个expert所处理的token有一个最大值，这个最大值就叫专家容量（这里设置为2N/E），通过GATE(·)给每个expert维护一个计数器
<span class="math inline">\(c_e\)</span>
来监控。如果一个token所选的两个专家当前处理量都已经超过设定的专家容量，那么这个token就不会被当前层的任何expert处理，而是直接通过残差链接透传到下一层。<br>
</li>
<li>分组分配 Local group dispatching。
给所有输入token分成了G组，不同的组并行处理，每个组相应地也把组内专家容量变成2N/EG。<br>
</li>
<li>辅助损失 Auxiliary loss。
光设置专家容量会导致大量溢出，还需要让gating
function本身的选择能平衡。参考前面17年LSTM
MoE的工作，定义了一个辅助损失函数来帮助平衡分配。 <span class="math inline">\(\ell_{aux}=\frac1E\sum_{e=1}^E\frac{c_e}S\cdot
m_e\)</span>。<span class="math inline">\(S\)</span>
是token数。思路是，本来是要算 <span class="math inline">\(\frac{c_e}S\)</span>
的平方的，但是不可导，因此把平方中的一个 <span class="math inline">\(\frac{c_e}S\)</span> 换成了 <span class="math inline">\(m_e\)</span> ， <span class="math inline">\(m_e\)</span> 是第 <span class="math inline">\(e\)</span> 个expert在 <span class="math inline">\(S\)</span> 个token中获得的平均权重。</li>
</ul>
<img src="/44e38c1b/gshard_algo_1.png" class title="GShard gating 算法">
<ul>
<li>Random routing。 如果2nd
expert权值很小，就认为它可以被忽略。具体来说，会以与g2成比例的概率分配给第二个专家。</li>
</ul>
<h1 id="switch-transformer">Switch Transformer</h1>
<p>2022年4月，距离ChatGPT发布还有半年，Google发布了《Switch
Transformers: Scaling to Trillion Parameter Models with Simple and
Efficient Sparsity》，不过实际上2021年Google就提出Switch
Transformer了。</p>
<p>Switch
Transformer和GShard一样，是encoder-decoder结构，基于T5开发的，具有1.6T的参数，2048个expert。</p>
<p>和前面的很多工作一样，Switch
Transformer相信一个基础的前提，那就是“参数量越大，模型效果越好”。但是相比其他工作，Switch
Transformer提出一个新的想法，那就是模型参数量可以是一个独立于总计算量的，单独的缩放轴。也就是说，在改变参数量的同时，（几乎）不改变训练和推理的计算量，就可以带来效果的提升。因此Switch
Transformer关注在“同样的FLOPS/token的计算量”下，扩大模型，提升效果。</p>
<p>Switch Transformer文章里提到的工作还是比较多的，包括：</p>
<ul>
<li>模型结构简化：简化了Transformer上的MoE架构，提出Switch
Transformer架构。<br>
</li>
<li>MoE to
dense：把训出来的效果较好的MoE模型蒸馏到dense模型，在压缩MoE模型99%的参数的情况下，效果还是比直接训练dense模型好。<br>
</li>
<li>训练和微调技术：（1）首次使用bf16成功训练MoE模型（2）更适合MoE结构的模型初始化（3）增加的专家正则化，改善了稀疏模型的微调和多任务训练。<br>
</li>
<li>训练框架：结合数据、模型和专家并行性，训练了超过1T参数的MoE模型。<br>
</li>
<li>多语言：在多语言数据集上训练，发现101种语言效果普遍有提升。<br>
</li>
<li>训练效率：在同样的FLOPS/token的计算量下，Switch
Transformer训练速度有数倍的提升。</li>
</ul>
<p>Switch Transformer原文很值得一看，有时间的朋友应该精读一遍原文。</p>
<h2 id="模型设计-1">模型设计</h2>
<p>Switch
Transformer的模型结构如下图，类似GShard，把transformer每层替换成MoE层</p>
<img src="/44e38c1b/switch_transformer_structure.png" class title="Switch Transformer 模型结构">
<p>Switch Transformer一个重要的改进点就是简化了gating
function的做法（这里叫routing）。</p>
<p>之前的工作大多探索了选择k个expert的做法，Switch
Transformer则直接简化为只选择1个expert，即k=1。这样的MoE层叫做Switch
layer。这样简化有3个好处：</p>
<ul>
<li>routing的实现简单，通讯量减少了</li>
<li>router的计算量小了<br>
</li>
<li>每个expert的batch size（也就是expert capacity）减小了，</li>
</ul>
<h2 id="负载均衡-1">负载均衡</h2>
<p>同GShard一样，每个expert都规定了一个专家容量expert
capacity，来限制每个expert在一个batch里能处理的最大token数。如果一个token被分配到了一个已经满载的expert，就会出现overflow，那这个token在本层就不会被处理，而是直接通过残差链接，透传给下一层。</p>
<p>专家容量通过容量系数capacity factor来控制。</p>
<p><span class="math display">\[\text{expert
capacity}=\left(\frac{\text{tokens per batch}}{\text{number of
experts}}\right)\times\text{capacity factor}.\]</span></p>
<p>一个大的capacity
factor意味着一个expert能够处理更多token，从而减少overflow的发生，但是同时计算量和通讯量的压力也会增大，所以这是一个需要权衡的参数。</p>
<p>下图给出了一个不同capacity factor下的例子</p>
<img src="/44e38c1b/switch_transformer_diff_expert_capacity.png" class title="不同的expert capacity">
<p>如何设定expert capacity？</p>
<p>如果capacity
factor为1的话，只有在完美平均分配的时候，才不会出现overflow的情况。</p>
<p>实验中发现expert的数量和overflow的数量之间没有什么关系，所有所有模型都用128个expert。</p>
<p>实验中上发现低的token丢弃率对模型的扩展性很重要</p>
<img src="/44e38c1b/switch_transformer_capacity_effect.png" class title="expert capacity的效果">
<p>通过负载平衡loss可以确保良好的平衡。 （moe额expert
capacity从2变为1.25，以外地还变慢了）
（3个发现：我们从表1中强调了三个关键发现：(1) 在速度和质量基础上，Switch
Transformers的表现优于精心调整的密集模型和MoE
Transformers。对于固定的计算量和实际运行时间，Switch
Transformers取得了最好的结果。(2) Switch
Transformer的计算占用空间比MoE对应项小。如果我们增加其大小以匹配MoE
Transformer的训练速度，我们发现这在每步基础上也优于所有MoE和Dense模型。(3)
Switch
Transformers在较低的容量因子（1.0，1.25）下表现更好。较小的专家容量预示着在大型模型领域中模型内存非常稀缺的情况，因此希望将容量因子尽可能减小。）</p>
<p>负载平和loss怎么设计。给定 <span class="math inline">\(N\)</span>
个expert，和包含 <span class="math inline">\(T\)</span> 个token的batch
<span class="math inline">\(\mathcal{B}\)</span>，负载均衡损失是这么计算的</p>
<p><span class="math display">\[\begin{aligned}\text{loss}&amp;=\alpha\cdot
N\cdot\sum_{i=1}^Nf_i\cdot P_i\end{aligned}\]</span></p>
<p><span class="math inline">\(f_{i}\)</span> 表示被分配到第 <span class="math inline">\(i\)</span> 个expert的token数，这个不可导</p>
<p><span class="math display">\[\begin{aligned}f_i=\frac{1}{T}\sum_{x\in\mathcal{B}}\mathbb{1}\{\text{argmax
}p(x)=i\}\end{aligned}\]</span></p>
<p><span class="math inline">\(P_i\)</span>
表示整个batch每个token分配给第<span class="math inline">\(i\)</span>
expert的概率的总和，这个可导</p>
<p><span class="math display">\[\begin{aligned}P_i=\frac{1}{T}\sum_{x\in\mathcal{B}}p_i(x).\end{aligned}\]</span></p>
<p>在完美负载均衡的情况下，<span class="math inline">\(f\)</span> 和
<span class="math inline">\(P\)</span> 这两个向量都是 <span class="math inline">\(1/N\)</span>，这个时候负载均衡loss是最小的。</p>
<p><span class="math inline">\(\alpha\)</span>
扫描了1e-5到1e-1，发现设为1e-2，已经足够大保持负载平衡，同时不过分影响模型收敛</p>
<h2 id="实验-1">实验</h2>
<ol type="1">
<li>训练的trick 训练上的困难和方法，使用了一些trick<br>
</li>
</ol>
<ul>
<li>半精度会带来一些训练不稳定。选择性地使用bf16。路由函数内部使用单精度，其他使用半精度，不影响通讯，也提高效果。<br>
</li>
<li>较小的参数初始化。从截断正态分布中抽取元素来初始化我们的权重矩阵，其中平均值
<span class="math inline">\(\mu=0\)</span>，标准差<span class="math inline">\(\sigma=\sqrt{s}/n\)</span>，其中s是超参，n是权重张量中的输入单元数量（e.g.
fan-in）。作为对不稳定性的额外补救措施，我们建议将默认的Transformer初始化尺度s=1.0减少10倍。这在我们的实验中既提高了质量又降低了训练不稳定性的可能性。初始化实验对比如下表<br>
<img src="/44e38c1b/switch_transformer_init.png" class title="初始化对比"><br>
</li>
<li>由于switch
transformer参数很大，在微调的时候更容易过拟合，因此一个简单的方法就是增大dropout，效果如下<br>
<img src="/44e38c1b/switch_transformer_dropout.png" class title="dropout效果"><br>
大dropout有效果，并且dense层保持0.1，只有expert层增大dropout效果更好</li>
</ul>
<ol start="2" type="1">
<li>scaling实验</li>
</ol>
<p>（1）step basis</p>
<img src="/44e38c1b/switch_transformer_scaling_step.png" class title="step scaling">
<p>（2）time basis</p>
<p>For a fixed training duration and computational budget, should one
train a dense or a sparse model?</p>
<img src="/44e38c1b/switch_transformer_scaling_time.png" class title="time scaling">
<p>（3）和更多的dense模型对比</p>
<img src="/44e38c1b/switch_transformer_scaling_dense.png" class title="dense对比">
<ol start="3" type="1">
<li>sft效果对比</li>
</ol>
<p>和dense模型对比，每两百步进行一次eval，选最好的效果，还是比较公平的</p>
<img src="/44e38c1b/switch_transformer_sft_result.png" class title="sft对比">
<p>把moe模型蒸馏到到dense模型（预训练）</p>
<p>几个技巧：（1）初始化的时候，把moe模型中的非moe部分用于初始化dense模型。（2）label使用25%的teacher
label和75%的ground truth</p>
<img src="/44e38c1b/switch_transformer_distill.png" class title="蒸馏">
<ol start="4" type="1">
<li>不同模型下的蒸馏效果 压缩99%的参数，仍然有可观的提升
<img src="/44e38c1b/switch_transformer_distill_diff_model.png" class title="蒸馏"></li>
</ol>
<p>微调也可以蒸馏</p>
<img src="/44e38c1b/switch_transformer_distill_sft.png" class title="sft蒸馏">
<p>数据并行与模型并行</p>
<h1 id="glam">GLaM</h1>
<p>GLaM (Generalist Language Model)，focus on pretrain，zero-shot ，like
gpt3，without sft</p>
<p>The largest version of GLaM has 1.2T parameters in total with 64
experts per MoE layer，每个token只激活96.6B</p>
<img src="/44e38c1b/glam_compare_gpt3.png" class title="glam和gpt3对比">
<img src="/44e38c1b/glam_compare_gpt3_2.png" class title="glam和gpt3对比">
<p>在related work的moe种提到了 《Beyond distillation: Task-level
mixture-of-experts for efficient inference》《DEEP LEARNING SCALING IS
PREDICTABLE, EMPIRICALLY》 《Scaling to trillion parameter models with
simple and efficient sparsity》</p>
<p>每两层使用一个moe层，每次激活两个expert，如果一共有E个专家，则每层有O（E^2）个组合</p>
<img src="/44e38c1b/glam_model.png" class title="glam模型">
<p>做了一些其他改动，模型使用了XLNET的相对位置编码</p>
<p>使用了GLU In the non-MoE Transformer feed-forward sub-layers, we
replace the first linear projection and the activation function with the
Gated Linear Unit，which computes the component-wise product of two
linear transformation of the input, followed by a Gaussian Error Linear
Unit</p>
<p>训了好几个模型来探索moe</p>
<img src="/44e38c1b/glam_family.png" class title="glam模型系列">
<p>一些训练的trick</p>
<p>We skip weight updates for a batch if there are any NaNs or Inf s in
the gradients，引用了文章《Lingvo: a modular and scalable framework for
sequence-to-sequence modeling》</p>
<p>以及如果在bp遇到nan了，就用重新加载更早的checkpoint并跳过nan的数据，利用随机来避免nan</p>
<img src="/44e38c1b/glam_perf.png" class title="glam模型效果">
<h1 id="st-moe">ST-MoE</h1>
<h1 id="deepseekmoe">DeepseekMoE</h1>
<p>2024年1月，幻方量化发布了DeepseekMoE，这也是国内首个开源的MoE大模型。同时也发布了论文《DeepSeekMoE:
Towards Ultimate Expert Specialization in Mixture-of-Experts Language
Models》，给出了一些DeepSeekMoE的细节内容，实属良心。</p>
<p>DeepSeekMoE在其他MoE工作的基础上，新提出了几个做法：（1）对expert的粒度进行再细分，以此提供更多样的排列组合情况；（2）对expert的类型进行区分，从所有expert中划出一部分作为shared
expert共享专家。</p>
<p>这样的做法可以帮助expert达到更强的专门化(specialization)的水平，更好地学习不同的专业知识。</p>
<p>DeepSeekMoE先在2B的较小MoE模型上进行了充分的实验，再把方案应用到16B参数的模型上，并获得了较好的效果。</p>
<p>DeepSeekMoE-2B模型具有和稠密2B模型相当的性能，而DeepSeekMoE-16B则具有和7B稠密模型相当的性能，且计算量仅为40%。</p>
<p>DeepSeekMoE-16B的参数效率相比dense模型有明显的优势，如下图</p>
<img src="/44e38c1b/ds_moe_perf.png" class title="deepseek moe">
<p>2B和16B模型都开源了。</p>
<p>在前面实验的基础上，幻方量化内部还训出了DeepSeekMoE-145B的超大模型，具有和稠密的DeepSeek-67B相当的表现，这个后续也有机会放出来。</p>
<h2 id="模型设计-2">模型设计</h2>
<p>当前的moe架构会遇到knowledge hybridity and knowledge
redundancy，阻碍了expert specialization，即每个专家学习non-overlap &amp;
foucusd knowledge的能力。</p>
<p>（switch 分给1个expert，gshard：分给两个）</p>
<p>知识混合：现有的MoE实践通常使用数量有限的专家（例如，8个或16个），因此分配给特定专家的标记可能会涵盖多样化的知识。因为专家数量比较少，每个专家不能太专，而要多覆盖几个领域才够用
因此，指定的专家将倾向于在其参数中组装截然不同的知识类型，这些知识很难同时利用。</p>
<p>知识冗余：分配给不同专家的标记可能需要共同知识。结果，多个专家可能会在各自的参数中获取（本应）共享的知识，从而导致专家参数的冗余。</p>
<p>这些问题共同阻碍了现有MoE实践中专家的专业化，阻止他们达到MoE模型的理论上限性能。</p>
<p>deepseek moe架构有2各个主要策略：</p>
<p>（1）Fine-Grained Expert
Segmentation:参数不变的情况下，将专家分成更细的粒度，这样带来更灵活的激活组合，让专家有更高的专业化。</p>
<p>（2）Shared Expert
Isolation:把部分专家分离出来，保持永远被激活，这部分专家提供common
knowledge，这同样使得其他专家能够更加专业化，并且减少冗余</p>
<p>deepseekmoe 16b不用量化就是在40gb显存上跑</p>
<img src="/44e38c1b/ds_moe_structure.png" class title="deepseek moe 结构">
<p>expert isolation的idea可以追溯到《Deepspeed-moe: Advancing
mixture-of-experts inference and training to power next-generation AI
scale》</p>
<p>负载均衡</p>
<p>任由模型自主学习gating可能会遇到两个问题</p>
<p>（1）routing
collapse，也就是老选那么几个expert，并自我加强这种效应</p>
<p>（2）多设备间，不平衡的负载可能会成为计算效率的瓶颈</p>
<p>针对第一个问题，增加一个expert-level balance loss，</p>
<p><span class="math display">\[\begin{aligned}
\text{LExpBal}&amp; =\alpha_1\sum_{i=1}^{N&#39;}f_iP_i,  \\
f_{i}&amp;
=\frac{N^{\prime}}{K^{\prime}T}\sum_{t=1}^T\mathbb{1}(\text{Token
}t\text{ selects Expert }i),  \\
P_{i}&amp; =\frac1T\sum_{t=1}^Ts_{i,t},
\end{aligned}\]</span></p>
<p>针对第二个问题，引入devicelevel balance loss，</p>
<p>当目标是缓解计算瓶颈时，在专家层面强制执行严格的平衡约束就变得不必要了，因为过度的负载平衡约束会损害模型性能。相反，我们的主要目标是确保设备之间的计算平衡。如果我们把所有路由的专家分成D组{E1,
E2, ..., ED}，并且每个组在单个设备上部署，设备级的平衡损失计算如下：</p>
<p><span class="math display">\[\begin{aligned}
\mathcal{L}_{\mathrm{DevBal}}&amp;
=\alpha_2\sum_{i=1}^Df_i&#39;P_i&#39;,  \\
f_i^{\prime}&amp;
=\frac1{|\mathcal{E}_i|}\sum_{j\in\mathcal{E}_i}f_j,  \\
P_{i}^{\prime}&amp; =\sum_{j\in\mathcal{E}_i}P_j,
\end{aligned}\]</span></p>
<h2 id="实验-2">实验</h2>
<p>只用了100B数据</p>
<p>用HAI-LLM框架</p>
<p>训了deepseek moe
2b和13b模型，在benchmark上和5个模型做对比：dense，hash
layer（也是一种moe，《Hash layers for large sparse models》），switch
transformer，gshard</p>
<img src="/44e38c1b/ds_moe_comparison.png" class title="deepseek moe 效果">
<p>为了探索deepseek
moe架构带来的收益，提升dense和gshard的激活参数，直到效果和deepseek
moe差不多</p>
<p>deepseek moe 2b, gshard 提升了 1.5倍激活参数</p>
<img src="/44e38c1b/ds_moe_upper_bound_2b.png" class title="deepseek moe upper bound">
<p>deepseek moe 13b, gshard 提升了 1.2倍激活参数</p>
<img src="/44e38c1b/ds_moe_upper_bound_13b.png" class title="deepseek moe upper bound">
<p>消融实验</p>
<img src="/44e38c1b/ds_moe_ablation.png" class title="deepseek moe upper bound 消融实验">
<p>（1）对比蓝色和橙色，可以看到增加共享专家带来了收益</p>
<p>（2）绿色和红色在橙色的基础上进一步把专家颗粒分得更细，效果进一步提升</p>
<p>（3）共享专家和路由专家的比例：在总共64个expert的情况下，对比了1/2/4个共享专家的情况，结果并没有显著差别，在pile上的loss分别是1.808,1.806,1.811。最终选择了共享专家和激活路由专家1:3（2+6）的比例。</p>
<p>专家专门化</p>
<img src="/44e38c1b/ds_moe_expert_specialization.png" class title="专家专门化">
<p>对比deepseek moe2b和gshard2b*1.5，二者在正常情况下表现相同。</p>
<p>通过禁用top专家，而只能从次优的专家中选择进行回答这个实验，发现deepseek
moe损失更大，说明每个专家的专门化程度更好，必要性更高，这说明deepseek的专家专门化程度更高。</p>
<p>通过禁用deepseek
moe的共享专家，而额外激活一个专家，发现loss也大大提升。这个结果突出了共享专家的关键功能，并表明共享专家捕捉到了与路由专家不共享的基本且重要的知识，使得它无法被路由专家替代。</p>
<p>只激活更少专家，也能和gshard达到相同水平，这一观察结果支持了DeepSeekMoE可以更准确和高效地获取所需知识的观点。</p>
<img src="/44e38c1b/ds_moe_less_activated_expert.png" class title="激活更少专家">
<p>还训了一个只用1个共享专家和3个激活专家的2b模型，也比gshard好，说明deepseek
moe的有效参数效率更高</p>
<p>16b moe模型用2T数据训练。</p>
<p>除了第一层，其他都使用了moe，因为观察到第一层的负载均衡loss收敛得特别慢</p>
<p>2 + 6/64 专家</p>
<p>没有把专家的dimension再减小是因为会有计算效率的下降</p>
<p>最总16.4b参数，激活2.8b</p>
<p>batch size=4.5k，长度是4k，每个batch有18Mtoken</p>
<p>2T数据差不多是10.6w步</p>
<p>使用了pipeline parallelism</p>
<p>expert level balance
loss的系数设得比较下，0.001，因为再大爷不能优化负载平衡，反而会损害效果</p>
<p>和dense模型比效果好很多就是了</p>
<p>微调</p>
<p>《Efficient large scale language modeling with mixtures of
experts》、switch transformer没有探索太多关于sft在moe的收益</p>
<p>《Flan-moe: Scaling instruction-finetuned language models with sparse
mixture of experts.》suggesting that MoE models can indeed benefit from
instruction tuning</p>
<p>deepseek用了百万级的内部微调数据</p>
<p>结果。评估结果呈现于表5中。我们的主要观察包括：（1）DeepSeekMoE Chat
16B在消耗近40%的计算资源的情况下，与7B密集模型在语言理解和推理（PIQA、ARC、BBH）、机器阅读理解（RACE）、数学（GSM8K、MATH）以及知识密集型任务（TriviaQA、NaturalQuestions）方面实现了相当的表现。
（2）在代码生成任务上，DeepSeekMoE Chat 16B显著优于LLaMA2 SFT
7B，在HumanEval和MBPP上展现了显著的改进。此外，它还超越了DeepSeek Chat
7B。
（3）在多项选择题回答基准测试中，包括MMLU、CEval和CMMLU，DeepSeekMoE
Chat 16B仍然落后于DeepSeek Chat
7B，这与基础模型的观察结果一致（第5.2.1节）。然而，值得注意的是，在经过监督式微调之后，DeepSeekMoE
16B与DeepSeek 7B之间的性能差距缩小了。
（4）得益于在双语语料库上的预训练，DeepSeekMoE Chat
16B在所有中文基准测试中显著优于LLaMA2 SFT 7B。这些结果证明了DeepSeekMoE
16B在中文和英文方面的平衡能力，增强了其在多样化场景中的通用性和适用性。总之，对于聊天模型的评估突出了DeepSeekMoE
16B从对齐中受益的潜力，并验证了其在使用大约40%的计算资源的同时实现与密集模型相当表现的一致优势。</p>
<img src="/44e38c1b/ds_moe_sft.png" class title="sft结果">
<p>deepseek moe 145b，用245btoken训的</p>
<img src="/44e38c1b/ds_moe_145b.png" class title="145b">
<p>related work 提到的工作</p>
<p>《Stablemoe: Stable routing strategy for mixture of experts》</p>
<p>每个token分配不同数量的moe《Mixture-of-experts with expert choice
routing》</p>
<p>关注在训练稳定性《Designing effective sparse expert models》</p>
<h1 id="qwen1.5-moe">Qwen1.5-MoE</h1>
<h1 id="dbrx">DBRX</h1>
<h1 id="小结">小结</h1>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<hr>
<p>往期文章</p>
<p><a href="http://www.linsight.cn/41b6a819.html">Yi技术报告-划重点看细节</a><br>
<a href="http://www.linsight.cn/6a40bfa5.html">transformer中normalization的二三事</a><br>
<a href="http://www.linsight.cn/c61d17e3.html">稀疏注意力计算:sliding
window attention</a><br>
<a href="http://www.linsight.cn/3dc22f96.html">理解Attention:从起源到MHA,MQA和GQA</a><br>
<a href="http://www.linsight.cn/c4da56c0.html">LLM长上下文的问题</a><br>
<a href="http://www.linsight.cn/a051710f.html">理解LLM位置编码:RoPE</a><br>
<a href="http://www.linsight.cn/3345028a.html">大模型算法题(1)</a><br>
<a href="http://www.linsight.cn/ad0bba9d.html">大模型算法题(2)</a></p>
<hr>
<h1 id="reference">Reference</h1>
<p>【1】Adaptive Mixtures of Local Experts
https://www.cs.toronto.edu/~hinton/absps/jjnh91.pdf<br>
【2】Outrageously Large Neural Networks: The Sparsely-Gated
Mixture-of-Experts Layer https://arxiv.org/abs/1701.06538<br>
【3】GShard: Scaling Giant Models with Conditional Computation and
Automatic Sharding https://arxiv.org/abs/2006.16668<br>
【4】Switch Transformers: Scaling to Trillion Parameter Models with
Simple and Efficient Sparsity https://arxiv.org/abs/2101.03961<br>
【5】GLaM: Efficient Scaling of Language Models with Mixture-of-Experts
https://arxiv.org/abs/2112.06905<br>
【6】ST-MoE: Designing Stable and Transferable Sparse Expert Models
https://arxiv.org/abs/2202.08906<br>
【7】DeepSeekMoE: Towards Ultimate Expert Specialization in
Mixture-of-Experts Language Models
https://arxiv.org/abs/2401.06066<br>
【8】Qwen1.5-MoE: Matching 7B Model Performance with 1/3 Activated
Parameters https://qwenlm.github.io/zh/blog/qwen-moe/<br>
【9】Introducing DBRX: A New State-of-the-Art Open LLM
https://www.databricks.com/blog/introducing-dbrx-new-state-art-open-llm</p>
<p>【7】A Review of Sparse Expert Models in Deep Learning
https://arxiv.org/abs/2209.01667</p>
<p>【8】LLaMA-MoE: Building Mixture-of-Experts from LLaMA with Continual
Pre-training https://github.com/pjlab-sys4nlp/llama-moe<br>
【9】MM1: Methods, Analysis &amp; Insights from Multimodal LLM
Pre-training https://arxiv.org/abs/2403.09611<br>
【12】Introducing Jamba https://www.ai21.com/jamba<br>
【13】Go Wider Instead of Deeper https://arxiv.org/abs/2107.11817<br>
【14】MoEBERT: from BERT to Mixture-of-Experts via Importance-Guided
Adaptation https://arxiv.org/abs/2204.07675<br>
【15】Learning Factored Representations in a Deep Mixture of Experts
https://arxiv.org/abs/1312.4314<br>
【17】MegaBlocks: Efficient Sparse Training with Mixture-of-Experts
https://arxiv.org/abs/2211.15841<br>
【18】Mixture-of-Experts Meets Instruction Tuning:A Winning Combination
for Large Language Models https://arxiv.org/abs/2305.14705<br>
【19】</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>MoE</tag>
      </tags>
  </entry>
  <entry>
    <title>理解Attention:从起源到MHA,MQA和GQA</title>
    <url>/3dc22f96.html</url>
    <content><![CDATA[<p>【本文已在同名微信公众号/知乎/个人博客同步上线】</p>
<p>Attention模块是现在几乎所有大模型的核心模块，因此也有很多工作致力于提升注意力计算的性能和效果。其中MHA（Multi-Head
Attention）、MQA（Multi-Query Attention）和GQA（Grouped-Query
Attention）这一路线的思路和做法被很多主流模型所采用，因此简单地梳理一些这几个变体的思路和做法，以及会涉及到的KV
Cache相关内容。思路比较直白，但也有一些细节和原理值得思考。</p>
<p>当然针对Attention优化，也有很多其他优秀的方案和思路，如线性注意力、FlashAttention和Sliding
Window Attention等，这些在后续再开篇梳理。</p>
<p>（应一些朋友的要求，会增加一些直观基础的内容，以及LLM应用的案例。也欢迎大家提出更多建议。）</p>
<h1 id="关于attention从rnn到attention">关于Attention：从RNN到Attention</h1>
<p>了解一个概念的诞生和演进，有助于我们更深入去理解它。我们先简单回顾下attention从起源到最初的实现。</p>
<p>（熟悉attention的朋友可以跳过这一节）</p>
<h2 id="从rnn说起">从RNN说起</h2>
<blockquote>
<p>Memory is attention through time. ~ Alex Graves 2020</p>
</blockquote>
<p>注意力机制最初起源是为了解决序列问题。回想在还没有Transformer的上一世代，使用RNN的Seq2Seq是这样的</p>
<img src="/3dc22f96/seq2seq.png" class title="seq2seq">
<img src="/3dc22f96/encoder.png" class title="encoder">
<img src="/3dc22f96/decoder.png" class title="decoder">
<p>（图来自<a href="https://theaisummer.com/attention/">AI
Summer</a>）</p>
<p>每个RNN cell接收两个输入，输出一个hidden state。比如在翻译任务中，RNN
encoder把所有输入迭代地编码成context向量 <span class="math inline">\(z\)</span> ，然后由RNN decoder基于 <span class="math inline">\(z\)</span>
迭代地解码。一般来说，这里decoder的第一个输入是一个特殊token，如[start]，表示解码开始。</p>
<p>这样会有一个问题， <span class="math inline">\(z\)</span>
能编码的长度显然有限，而且由于模型结构问题，会更加关注靠近尾部的输入。这样如果关键信息出现在开头，就容易被忽略。</p>
<p>并且时间步骤上的传播由于有多次迭代相乘，梯度很容易就过小，导致梯度消失问题。</p>
<p>当然我们有LSMT和GRU等变体来增强长距离记忆的能力，也缓解了梯度问题，但这些方案还是没有产生质变的能力。</p>
<p>回到问题的核心，我们想要 <span class="math inline">\(z\)</span>
能够编码所有前面的内容，但是显然， <span class="math inline">\(z\)</span>
的生成方式天然会让它更容易注意到靠后的内容，而容易忽略靠前的输入。</p>
<p>一个直觉的想法就是，我们需要想个办法跳过 <span class="math inline">\(z\)</span>
，和前面的每个输入建立直接的联系。我们希望模型能够有机会学习到去“注意”关键的输入，不管这个输入是在前面还是后面。</p>
<p>实际上神经网络天生就具有“注意力”的天赋。</p>
<p>比如在CNN分类中，如果我们画出分类层前的heatmap，会是如下图这个样子</p>
<img src="/3dc22f96/cnn_heatmap.png" class title="heatmap">
<p>可以看到，值比较高的地方是在猫的鼻子胡子嘴巴区域，次之是身上和头上的花纹。直观来说，就是模型主要通过脸部的特征和身上的花纹，来识别出这是一只猫。这就是CNN学习到的注意力，这样的特征是神经网络implicitly学到的。</p>
<p>回归到Seq2Seq，我们怎么来实现注意力，并且让这种implicit的机制变得explicit：单独抽离出来并具备一定可控制性？</p>
<p>回想翻译场景，在RNN中，每一个时间步骤 <span class="math inline">\(i\)</span> 都会产生一个隐向量，<span class="math inline">\(h_i\)</span> 向量，我们把这些 <span class="math inline">\(h_i\)</span>
保存起来，在最后要生成新的输出的时候，我们让模型回头看一下之前的这每一个
<span class="math inline">\(h_i\)</span>
，再决定要生成什么内容。相比原来只利用最后一个hidden
state，现在我们可以访问之前所有的中间状态，如果发现前面有关键信息，就可以直接用上了，而不用担心输入太长而被覆盖了。</p>
<p>那么问题又来了，我们怎么知道前面某一个中间状态对于当前的生成来说是否重要？如果我们不知道怎么定义是否重要，那我们就把这个问题交给模型自己解决好了
--
通过网络参数来学习识别某个输入状态是否重要，学习是否要“注意”到它，要给予多少的“注意力”。</p>
<p>具体来说，我们定义在解码第 <span class="math inline">\(i\)</span>
个输出是，decoder当前隐状态 <span class="math inline">\(y_{i-1}\)</span>
和encoder的所有隐状态 <span class="math inline">\(\mathbf{h}\)</span>
之间的一个score计算</p>
<p><span class="math display">\[\mathbf{e}_i=\text{attention}_{\mathrm{net}}\left(y_{i-1},\mathbf{h}\right)\in
R^n\]</span></p>
<p>其中</p>
<p><span class="math display">\[e_{ij}=\text{attentiom}_{\text{net
}(\mathbf{y}_{i-1},h_j)}\]</span></p>
<p>注意力网络通过 <span class="math inline">\(\mathbf{y}_{i-1}\)</span>
和 <span class="math inline">\(h_j\)</span> 来计算一个值 <span class="math inline">\(e_{ij}\)</span>，这里的注意力网络可以设计各种操作，比如对输入进行拼接再通过fc层进行计算等。</p>
<p>这里 <span class="math inline">\(e_{ij}\)</span>
是一个标量，但它还不是一个可用的权重值，还需要通过一个函数，把attention
net对各个encoder hidden state的输出值转成一个分布：softmax。</p>
<p><span class="math display">\[\alpha_{ij}=\frac{\exp\left(e_{ij}\right)}{\sum_{k=1}^{T_x}\exp\left(e_{ik}\right)}\]</span></p>
<p>最后通过加权计算，获得最终输入给decoder的隐变量。</p>
<p><span class="math display">\[z_i=\sum_{j=1}^T\alpha_{ij}\mathbf{h}_j\]</span></p>
<img src="/3dc22f96/seq2seq_attention.png" class title="seq2seq attention">
<p>可以看到，这里的attention net的任务就是找到decoder上一个hidden
state和encoder hidden
state之间的“相关”关系，使得模型能够将更多的注意力放在对应的输入信息上。</p>
<p>实际上，上面这种attention的计算方式并不是唯一的，attention的计算方式有许多种</p>
<img src="/3dc22f96/attention_calculation.png" class title="attention calculation">
<p>这些attention的一般形式可以写作 <span class="math inline">\(\mathrm{Attention}(s, h)=\mathrm{Score}(s,h)\cdot
h\)</span> 。这里的 <span class="math inline">\(s\)</span>
就是decoder的hidden state（也就是前文的 <span class="math inline">\(y\)</span> ），<span class="math inline">\(h\)</span> 就是encoder的hidden state。</p>
<p>（当然从结果上看，是scaled dot-product
attention经受住了历史的考验，成为了主流。）</p>
<h2 id="transformer的attention">Transformer的attention</h2>
<p>从RNN attention到transformer
attention，所做的事情就如论文题目所说：《Attention Is All You
Need》，彻底抛弃RNN的在time
step上的迭代计算，完全拥抱attention机制，只用最简单粗暴的方式同步计算出每个输入的hidden
state，其他的就交给attention来解决。</p>
<img src="/3dc22f96/transformer_structure.png" class title="transformer structure.png">
<p>这里还是保留有encoder和decoder的结构，encoder中的attention都是self-attention，decoder则除了self-attention还有cross-attention。</p>
<p>transformer结构下，attention的一般形式可以写作 <span class="math inline">\(\mathrm{Attention}(Q,K,V)=\mathrm{Score}(Q,K)V\)</span>，这里有
<span class="math inline">\(Q=W_{Q}Y，K=W_{K}X，V=W_{V}X\)</span>
。对于cross-attention， <span class="math inline">\(X\)</span>
是encoder的hidden states，<span class="math inline">\(Y\)</span>
是decoder的hidden states，而对于self-attention，则有 <span class="math inline">\(X=Y\)</span>。</p>
<p>具体到我们熟悉的scaled dot-product attention，使用softmax计算，有</p>
<p><span class="math display">\[\operatorname{Attention}(Q,K,V)=\operatorname{softmax}(\frac{QK^T}{\sqrt{d}})V\]</span></p>
<p>到这里，终于见到我们熟悉的attention计算。</p>
<p>用一张很直观的图来展示整个计算</p>
<img src="/3dc22f96/Scaled-dot-product-self-attention.pbm" class title="self-attention">
<p>这里的「query」，「key」和「value」的名称也暗示了整个attention计算的思路。</p>
<p>类比到一个数据库查询+预测的例子。</p>
<p>假设我们现在有一个“文章-阅读量”数据库，记录了每篇文章在发布30天内的阅读量。每篇文章就是一个key，对应的阅读量就是value。</p>
<p>我们现在有一篇将要发布的文章，想要预测这篇文章在30天内的阅读量，那我们就把这篇新的文章，作为query，去和数据库里的文章（key）做一个相关性计算，取最相关的5篇文章。</p>
<p>假设top5篇文章的相关性分别是 <span class="math inline">\([8,4,4,2,2]\)</span> ，对应阅读量是 <span class="math inline">\([5\text{w},2\text{w},8\text{w},3\text{w},6\text{w}]\)</span>
。</p>
<p>那我们把相关性得分归一化成和为1的概率值 <span class="math inline">\([0.4,0.2,0.2,0.1,0.1]\)</span>
，那我们就可以预测新文章30天内的阅读量是 <span class="math inline">\(0.4\times5+0.2\times2+0.2\times8+0.1\times3+0.1\times6=4.9\text{w}\)</span>
。</p>
<p>这个例子中，我们计算相关性就相当于transformer attention中的 <span class="math inline">\(QK^T\)</span>
，归一化就是softmax，然后通过加权求和取得最后的阅读量/特征向量。</p>
<p>对于self-attention， <span class="math inline">\(Q、K、V\)</span>
都来自输入 <span class="math inline">\(X\)</span>，sequence自己计算自己每个token的之间的相关性。而对于cross-attention，decoder中的输出sequence就是上面这个例子中的“将要发布的文章”，通过把这篇新的文章和数据库中的文章做相关计算，我们得到了新的预测结果。</p>
<p>对于self-attention，由于 <span class="math inline">\(Q、K、V\)</span>
都来自输入 <span class="math inline">\(X\)</span> ，在计算 <span class="math inline">\(QK^T\)</span>
时，模型很容易关注到自身的位置上，也就是 <span class="math inline">\(QK^T\)</span>
对角线上的激活值会明显比较大。这样的情况其实不是很好，因为这会削弱模型关注其他高价值位置的能力，也就限制模型的理解和表达能力。后面讲的MHA对这个问题会有一些缓解作用。</p>
<p>顺着这样的思路梳理下来，会发现attention的大思路还是很好理解的。而计算上，怎么去获得更好的效果，就是接下来要分析的几个内容，MHA，MQA和GQA所关注的。</p>
<p>代码上，实现也很容易，直接看<a href="https://pytorch-forecasting.readthedocs.io/en/latest/_modules/pytorch_forecasting/models/temporal_fusion_transformer/sub_modules.html#ScaledDotProductAttention">pytorch
forcasting</a>的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ScaledDotProductAttention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dropout: <span class="built_in">float</span> = <span class="literal">None</span>, scale: <span class="built_in">bool</span> = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ScaledDotProductAttention, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.dropout = dropout</span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">2</span>)</span><br><span class="line">        self.scale = scale</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, q, k, v, mask=<span class="literal">None</span></span>):</span><br><span class="line">        attn = torch.bmm(q, k.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>))  <span class="comment"># query-key overlap</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.scale:</span><br><span class="line">            dimension = torch.as_tensor(k.size(-<span class="number">1</span>), dtype=attn.dtype, device=attn.device).sqrt()</span><br><span class="line">            attn = attn / dimension</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            attn = attn.masked_fill(mask, -<span class="number">1e9</span>)</span><br><span class="line">        attn = self.softmax(attn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            attn = self.dropout(attn)</span><br><span class="line">        output = torch.bmm(attn, v)</span><br><span class="line">        <span class="keyword">return</span> output, attn</span><br></pre></td></tr></table></figure>
<h2 id="关于scaling">关于scaling</h2>
<p>BTW，为什么计算中 <span class="math inline">\(QK^T\)</span>
之后还要除以 <span class="math inline">\(\sqrt{d}\)</span> ？</p>
<p>简单来说，就是需要压缩softmax输入值，以免输入值过大，进入了softmax的饱和区，导致梯度值太小而难以训练。</p>
<img src="/3dc22f96/softmax.png" class title="softmax">
<p>苏剑林的<a href="https://spaces.ac.cn/archives/8620">博客</a>中也有详细分析，并提到如果不对attention值进行scaling，也可以通过在参数初始化是将方差除以一个
<span class="math inline">\(\sqrt{d}\)</span>
，同样可以起到预防softmax饱和的效果。类似地，通过normalization也可以做到类似的效果。不过实现上在attention里做scaling还是比较稳定高效的。</p>
<h1 id="mha">MHA</h1>
<p>只要理解了attention计算的细节，MHA（multi-head
attention）其实就很好明白。</p>
<p>MHA在2017年就随着《Attention Is All You
Need》一起提出，主要干的就是一个事：把原来一个attention计算，拆成多个小份的attention，并行计算，分别得出结果，最后再合回原来的维度。</p>
<p><span class="math display">\[\mathrm{MultiHeadAttention}(Q,K,V)=\mathrm{Concat}(head_1,\ldots,head_h)\]</span></p>
<p><span class="math display">\[head_i=\text{Attention}(W_i^QQ,W_i^KK,W_i^VV)\]</span></p>
<p>假设原来模型的hidden size是 <span class="math inline">\(d\)</span>
，在MHA中，会把投影后的 <span class="math inline">\(Q、K、V\)</span>
在hidden state的维度上切成 <span class="math inline">\(head_{num}\)</span> 份，每个头的维度是 <span class="math inline">\(d_{head}\)</span> 。这 <span class="math inline">\(head_{num}\)</span> 组小 <span class="math inline">\(Q、K、V\)</span>
分别独立地进行attention计算，之后把得到的 <span class="math inline">\(head_{num}\)</span> 份维度 <span class="math inline">\(d_{head}\)</span> 的输出concat起来。</p>
<p>直接看这个amazing的图，很直观</p>
<img src="/3dc22f96/multihead_attention.png" class title="MHA">
<p>操作是这么个操作，多头注意力相比单头有什么好处呢？</p>
<p>《Attention Is All You Need》文章中给出的说法是</p>
<blockquote>
<p>Multi-head attention allows the model to jointly attend to
information from different representation subspaces at different
positions.</p>
</blockquote>
<p>我们希望多个头能够在训练中学会注意到不同的内容。例如在翻译任务里，一些attention
head可以关注语法特征，另一些attention
head可以关注单词特性。这样模型就可以从不同角度来分析和理解输入信息，获得更好的效果了。</p>
<p>这有点类似CNN中，不同的卷积核来学习不同的信息。比如一个 <span class="math inline">\(3\times3\times128\)</span> 的卷积，有128个 <span class="math inline">\(3\times3\)</span>
参数组，假设我们的输入是一个灰度图，其中一组 <span class="math inline">\(3\times3\)</span> 的参数是这样的</p>
<p><span class="math display">\[\left.\left[\begin{matrix}1&amp;0&amp;-1\\1&amp;0&amp;-1\\1&amp;0&amp;-1\end{matrix}\right.\right]\]</span></p>
<p>那么这是一个检测纵向边界的卷积，而另外一组参数长这样</p>
<p><span class="math display">\[\left.\left[\begin{matrix}1&amp;1&amp;1\\0&amp;0&amp;0\\-1&amp;-1&amp;-1\end{matrix}\right.\right]\]</span></p>
<p>这是一个检测横向边界的卷积。</p>
<p>这128组 <span class="math inline">\(3\times3\)</span>
就是128个不同特征的检测器，就同MHA中多个头一样，从不同的子空间学到不同的内容，最后再放到一起融合使用。</p>
<p>但是这是我们expect模型能做到的事情，实际情况是否真的是这样？</p>
<p>知乎上这篇<a href="https://zhuanlan.zhihu.com/p/626820422">文章</a>里对此做了一些实验和分析。简单来说就是（1）每个头确实学到东西有所不同，但大部分头之间的差异没有我们想的那么大（比如一个学句法，一个学词义这样明显的区分）（2）多个头的情况下，确实有少部分头可以比较好地捕捉到各种文本信息，而不会过分关注自身位置，一定程度缓解了上文提到的计算
<span class="math inline">\(QK^T\)</span> 之后对角线元素过大的问题。</p>
<p>我们可以把MHA的多个attention计算视为多个独立的小模型，那么最终整体的attention计算相当于把来自多个小模型的结果进行了融合，这样效果比较好也是比较符合直觉的。</p>
<p>另外还有一个问题是，使用几个头比较好呢？</p>
<p>实际上这个问题比较难有确定性的答案，首先可以确定的是头的数量不是越多约好（毕竟头的数量多了，各个子空间小了，子空间能表达的内容就少了），具体多少要视模型规模，任务而定。另外<a href="https://arxiv.org/pdf/1905.10650.pdf">《Are Sixteen Heads Really
Better than One?》</a>中也指出MHA并不总是优于单头的情况。</p>
<p>目前可以看到的趋势是，模型越大（也就是hidden
size越大），头数的增多越能带来平均效果上的收益（或者说允许注意力头增大而不影响子空间的学习能力）。目前LLM主流的头数视乎模型结构和规模，大致有12、16、24、48、96这样一些主流设置。这里面又有比较多的方向和工作，在此暂时不展开，挖个坑，以后专门开一篇讲。</p>
<p>最后看一下<a href="https://nlp.seas.harvard.edu/2018/04/03/attention.html">The
Annotated Transformer</a>中的MHA代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">attention</span>(<span class="params">query, key, value, mask=<span class="literal">None</span>, dropout=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;Compute &#x27;Scaled Dot Product Attention&#x27;&quot;</span></span><br><span class="line">    d_k = query.size(-<span class="number">1</span>)</span><br><span class="line">    scores = torch.matmul(query, key.transpose(-<span class="number">2</span>, -<span class="number">1</span>)) \</span><br><span class="line">             / math.sqrt(d_k)</span><br><span class="line">    <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        scores = scores.masked_fill(mask == <span class="number">0</span>, -<span class="number">1e9</span>)</span><br><span class="line">    p_attn = F.softmax(scores, dim = -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        p_attn = dropout(p_attn)</span><br><span class="line">    <span class="keyword">return</span> torch.matmul(p_attn, value), p_attn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiHeadedAttention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, h, d_model, dropout=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        h: head number</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>(MultiHeadedAttention, self).__init__()</span><br><span class="line">        <span class="keyword">assert</span> d_model % h == <span class="number">0</span></span><br><span class="line">        <span class="comment"># We assume d_v always equals d</span></span><br><span class="line">        self.d = d_model // h</span><br><span class="line">        self.h = h</span><br><span class="line">        self.linears = clones(nn.Linear(d_model, d_model), <span class="number">4</span>)</span><br><span class="line">        self.attn = <span class="literal">None</span></span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, query, key, value, mask=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Same mask applied to all h heads.</span></span><br><span class="line">            mask = mask.unsqueeze(<span class="number">1</span>)</span><br><span class="line">        nbatches = query.size(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1) Do all the linear projections in batch from d_model =&gt; h x d </span></span><br><span class="line">        query, key, value = \</span><br><span class="line">            [l(x).view(nbatches, -<span class="number">1</span>, self.h, self.d).transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">             <span class="keyword">for</span> l, x <span class="keyword">in</span> <span class="built_in">zip</span>(self.linears, (query, key, value))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2) Apply attention on all the projected vectors in batch. </span></span><br><span class="line">        x, self.attn = attention(query, key, value, mask=mask, </span><br><span class="line">                                 dropout=self.dropout)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3) &quot;Concat&quot; using a view and apply a final linear. </span></span><br><span class="line">        x = x.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous() \</span><br><span class="line">             .view(nbatches, -<span class="number">1</span>, self.h * self.d)</span><br><span class="line">        <span class="keyword">return</span> self.linears[-<span class="number">1</span>](x)</span><br></pre></td></tr></table></figure>
<p>（<a href="https://github.com/huggingface/transformers">transformers</a>中的写法就更为成熟一点，不过里面兼容了比较多的功能，代码太长就不放上来了）</p>
<h1 id="解码中的kv-cache">解码中的KV Cache</h1>
<p>在讲MQA和GQA之前，还需要了解一点背景，那就是解码的计算问题，以及KV
Cache的方案。</p>
<p>无论是encoder-decoder结构，还是现在我们最接近AGI的decoder-only的LLM，解码生成时都是自回归auto-regressive的方式。</p>
<p>也就是，解码的时候，先根据当前输入 <span class="math inline">\(\text{input}_{i-1}\)</span> ，生成下一个 <span class="math inline">\(\text{token}_{i}\)</span> ，然后把新生成的 <span class="math inline">\(\text{token}_{i}\)</span> 拼接在 <span class="math inline">\(\text{input}_{i-1}\)</span> 后面，获得新的输入
<span class="math inline">\(\text{input}_{i}\)</span> ，再用 <span class="math inline">\(\text{input}_{i}\)</span> 生成 <span class="math inline">\(\text{token}_{i+1}\)</span>
，依此迭代，直到生成结束。</p>
<p>比如我们输入“窗前明月光下一句是”，那么模型每次生成一个token，输入输出会是这样（方便起见，默认每个token都是一个字符）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">step0: 输入=[BOS]窗前明月光下一句是；输出=疑</span><br><span class="line">step1: 输入=[BOS]窗前明月光下一句是疑；输出=是</span><br><span class="line">step2: 输入=[BOS]窗前明月光下一句是疑是；输出=地</span><br><span class="line">step3: 输入=[BOS]窗前明月光下一句是疑是地；输出=上</span><br><span class="line">step4: 输入=[BOS]窗前明月光下一句是疑是地上；输出=霜</span><br><span class="line">step5: 输入=[BOS]窗前明月光下一句是疑是地上霜；输出=[EOS]</span><br></pre></td></tr></table></figure>
<p>（其中[BOS]和[EOS]分别是起始符号和终止符号）</p>
<p>仔细想一下，我们在生成“疑”字的时候，用的是输入序列中“是”字的最后一层hidden
state，通过最后的分类头预测出来的。以此类推，后面每生成一个字，使用的都是输入序列中最后一个字的输出。</p>
<p>我们可以注意到，下一个step的输入其实包含了上一个step的内容，而且只在最后面多了一点点（一个token）。那么下一个step的计算应该也包含了上一个step的计算。</p>
<p>从公式上来看是这样的：</p>
<p>回想一下我们attention的计算</p>
<p><span class="math display">\[
\alpha_{i,j}=\text{softmax}(q_{i}k_{j}^\top)\\
o_{i}=\sum_{j=0}^{i}{\alpha_{i,j}v_{j}}
\]</span></p>
<p>注意对于decoder的时候，由于mask
attention的存在，每个输入只能看到自己和前面的内容，而看不到后面的内容</p>
<p>假设我们当前输入的长度是3，预测第4个字，那每层attention所做的计算有</p>
<p><span class="math display">\[
\begin{aligned}
o_{0}&amp;=\alpha_{0,0}v_{0}\\
o_{1}&amp;=\alpha_{1,0}v_{0}+\alpha_{1,1}v_{1}\\
o_{2}&amp;=\alpha_{2,0}v_{0}+\alpha_{2,1}v_{1}+\alpha_{2,2}v_{2}\\
\end{aligned}
\]</span></p>
<p>预测完第4个字，放到输入里，继续预测第5个字，每层attention所做的计算有</p>
<p><span class="math display">\[
\begin{aligned}
o_{0}&amp;=\alpha_{0,0}v_{0}\\
o_{1}&amp;=\alpha_{1,0}v_{0}+\alpha_{1,1}v_{1}\\
o_{2}&amp;=\alpha_{2,0}v_{0}+\alpha_{2,1}v_{1}+\alpha_{2,2}v_{2}\\
o_{3}&amp;=\alpha_{3,0}v_{0}+\alpha_{3,1}v_{1}+\alpha_{3,2}v_{2}+\alpha_{3,3}v_{3}\\
\end{aligned}
\]</span></p>
<p>可以看到，在预测第5个字时，只有最后一步引入了新的计算，而 <span class="math inline">\(o_{0}\)</span> 到 <span class="math inline">\(o_{2}\)</span> 的计算和前面是完全重复的。</p>
<p>但是模型在推理的时候可不管这些，无论你是不是只要最后一个字的输出，它都把所有输入计算一遍，给出所有输出结果。</p>
<p>也就是说中间有很多我们用不到的计算，这样就造成了浪费。</p>
<p>而且随着生成的结果越来越多，输入的长度也越来越长。上面这个例子里，输入长度就从step0的10个，每步增长1，直到step5的15个。如果输入的instruction是让模型写高考作文，那可能就有800个step或者更多。这个情况下，step0被算了800次，step1被算了799次...</p>
<p>有没有什么办法可以重复利用上一个step里已经计算过的结果，减少浪费呢？</p>
<p>答案就是KV
Cache。利用缓存空间，把需要重复利用的中间计算结果存下来，减少重复计算。</p>
<p>而 <span class="math inline">\(k\)</span> 和 <span class="math inline">\(v\)</span> 就是要缓存的对象。</p>
<p>想象一下，在上面的例子中，假设我们一开始的输入就是3个字，我们第一次预测就是预测第4个字，那么由于一开始没有任何缓存，所有我们每一层还是要踏踏实实地计算一遍。然后把
<span class="math inline">\(k\)</span> 、 <span class="math inline">\(v\)</span> 值缓存起来。</p>
<p>则有</p>
<p><span class="math display">\[
\text{cache}_l=\text{None}\\
\]</span></p>
<center>
↓
</center>
<p><span class="math display">\[
\text{cache}_l=[(k_{0}^{l}, v_{0}^{l}),(k_{1}^{l},
v_{1}^{l}),(k_{2}^{l}, v_{2}^{l})]
\]</span></p>
<p>kv_cache的下标 <span class="math inline">\(l\)</span>
表示模型层数。</p>
<p>在进行第二次预测，也就是预测第5个字的时候，在第 <span class="math inline">\(l\)</span>
层的时候，由于前面我们缓存了<u><strong>每层</strong></u>的 <span class="math inline">\(k\)</span> 、 <span class="math inline">\(v\)</span> 值，那本层就只需要算新的 <span class="math inline">\(o_{3}\)</span> ，而不用算 <span class="math inline">\(o_{0}、o_{1}、o_{2}\)</span> 。</p>
<p>因为第 <span class="math inline">\(l\)</span> 层的 <span class="math inline">\(o_{0}、o_{1}、o_{2}\)</span>
本来会经过FNN层之后进到 <span class="math inline">\(l+1\)</span>
层，再经过新的投影变换，成为 <span class="math inline">\(l+1\)</span>
层的 <span class="math inline">\(k\)</span> 、 <span class="math inline">\(v\)</span> 值，但是 <span class="math inline">\(l+1\)</span> 层的 <span class="math inline">\(k\)</span> 、 <span class="math inline">\(v\)</span> 值我们已经缓存过了！</p>
<p>然后我们把本次新增算出来的 <span class="math inline">\(k\)</span> 、
<span class="math inline">\(v\)</span> 值也存入缓存。</p>
<p><span class="math display">\[
\text{cache}_l=[(k_{0}^{l}, v_{0}^{l}),(k_{1}^{l},
v_{1}^{l}),(k_{2}^{l}, v_{2}^{l})]
\]</span></p>
<center>
↓
</center>
<p><span class="math display">\[
\text{cache}_l=[(k_{0}^{l}, v_{0}^{l}),(k_{1}^{l},
v_{1}^{l}),(k_{2}^{l}, v_{2}^{l}),(k_{3}^{l}, v_{3}^{l})]
\]</span></p>
<p>这样就节省了attention和FFN的很多重复计算。</p>
<p>transformers中，生成的时候传入use_cache=True就会开启KV Cache。</p>
<p>也可以简单看下GPT2中的实现，中文注释的部分就是使用缓存结果和更新缓存结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Class GPT2Attention(nn.Module):</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        hidden_states: <span class="type">Optional</span>[<span class="type">Tuple</span>[torch.FloatTensor]],</span></span><br><span class="line"><span class="params">        layer_past: <span class="type">Optional</span>[<span class="type">Tuple</span>[torch.Tensor]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        attention_mask: <span class="type">Optional</span>[torch.FloatTensor] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        head_mask: <span class="type">Optional</span>[torch.FloatTensor] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        encoder_hidden_states: <span class="type">Optional</span>[torch.Tensor] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        encoder_attention_mask: <span class="type">Optional</span>[torch.FloatTensor] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        use_cache: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        output_attentions: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="type">Tuple</span>[<span class="type">Union</span>[torch.Tensor, <span class="type">Tuple</span>[torch.Tensor]], ...]:</span><br><span class="line">        <span class="keyword">if</span> encoder_hidden_states <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&quot;q_attn&quot;</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">&quot;If class is used as cross attention, the weights `q_attn` have to be defined. &quot;</span></span><br><span class="line">                    <span class="string">&quot;Please make sure to instantiate class with `GPT2Attention(..., is_cross_attention=True)`.&quot;</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            query = self.q_attn(hidden_states)</span><br><span class="line">            key, value = self.c_attn(encoder_hidden_states).split(self.split_size, dim=<span class="number">2</span>)</span><br><span class="line">            attention_mask = encoder_attention_mask</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query, key, value = self.c_attn(hidden_states).split(self.split_size, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        query = self._split_heads(query, self.num_heads, self.head_dim)</span><br><span class="line">        key = self._split_heads(key, self.num_heads, self.head_dim)</span><br><span class="line">        value = self._split_heads(value, self.num_heads, self.head_dim)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 过去所存的值</span></span><br><span class="line">        <span class="keyword">if</span> layer_past <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            past_key, past_value = layer_past</span><br><span class="line">            key = torch.cat((past_key, key), dim=-<span class="number">2</span>)  <span class="comment"># 把当前新的key加入</span></span><br><span class="line">            value = torch.cat((past_value, value), dim=-<span class="number">2</span>)  <span class="comment"># 把当前新的value加入</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> use_cache <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            present = (key, value)  <span class="comment"># 输出用于保存</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            present = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.reorder_and_upcast_attn:</span><br><span class="line">            attn_output, attn_weights = self._upcast_and_reordered_attn(query, key, value, attention_mask, head_mask)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            attn_output, attn_weights = self._attn(query, key, value, attention_mask, head_mask)</span><br><span class="line"></span><br><span class="line">        attn_output = self._merge_heads(attn_output, self.num_heads, self.head_dim)</span><br><span class="line">        attn_output = self.c_proj(attn_output)</span><br><span class="line">        attn_output = self.resid_dropout(attn_output)</span><br><span class="line"></span><br><span class="line">        outputs = (attn_output, present)</span><br><span class="line">        <span class="keyword">if</span> output_attentions:</span><br><span class="line">            outputs += (attn_weights,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> outputs  <span class="comment"># a, present, (attentions)</span></span><br></pre></td></tr></table></figure>
<p>总的来说，KV
Cache是以空间换时间的做法，通过使用快速的缓存存取，减少了重复计算。（注意，只有decoder结构的模型可用，因为有mask
attention的存在，使得前面的token可以不用关注后面的token）</p>
<p>但是，用了KV Cache之后也不是立刻万事大吉。</p>
<p>我们简单算一下，对于输入长度为 <span class="math inline">\(s\)</span>
，层数为 <span class="math inline">\(L\)</span> ，hidden size为 <span class="math inline">\(d\)</span> 的模型，需要缓存的参数量为</p>
<p><span class="math display">\[
2\times L\times s\times d
\]</span></p>
<p>如果使用的是半精度浮点数，那么总共所需的空间就是</p>
<p><span class="math display">\[
2\times 2\times L\times s\times d
\]</span></p>
<p>以Llama2 7B为例，有 <span class="math inline">\(L=32\)</span> ，
<span class="math inline">\(L=4096\)</span>
，那么每个token所需的缓存空间就是524,288 bytes，约52K，当 <span class="math inline">\(s=1024\)</span> 时，则需要536,870,912
bytes，超过500M的空间。</p>
<p>这里考虑的还只是batch size=1的情况，如果batch
size增大，这个值更是很容易就超过1G。</p>
<p>（MHA相比单头的情况，相当于只是把 <span class="math inline">\(q、k、v\)</span>
切成多份并行计算了，对于实际需要缓存的大小没有影响）</p>
<p>看下现在主流的科学计算卡配置</p>
<img src="/3dc22f96/gpu_cache.png" class title="gpu cache">
<p>强如H100也只有50M的L2 Cache（L1
Cache的大小更是可以忽略不计），大概只能支持Llama2
7B总共100个token左右的输入。</p>
<p>想想我们现在用的LLM动辄34B/70B的规模，长度更是以千为基础单位，这样明显是不够用的。</p>
<p>那么超出L2 Cache的部分只能走到显存中去了，但是HBM速度比L2
Cache慢多了。</p>
<img src="/3dc22f96/sram_dram.png" class title="储存空间与速度">
<p>看来还需要进一步优化。</p>
<p>要保证模型的推理加速，要么增大Cache的大小，而且是需要一到两个数量级的增强，那这个只能靠黄老板了。</p>
<p>要么就是减少需要缓存的量。</p>
<h1 id="mqa">MQA</h1>
<p>MQA就是来减少缓存所需要的量的。</p>
<p>Google在2019年就在《Fast Transformer Decoding: One Write-Head is All
You
Need》提出了MQA，不过那时候主要到的人不多，那是大家主要还是关注在用Bert把榜刷出新高上。</p>
<p>MQA的做法其实很简单。在MHA中，输入分别经过 <span class="math inline">\(W_{Q}、W_{K}、W_{V}\)</span>
的变换之后，都切成了n份（n=头数），维度也从 <span class="math inline">\(d_{model}\)</span> 降到了 <span class="math inline">\(d_{head}\)</span>
，分别进行attention计算再拼接。而MQA这里，在线性变换之后，只对 <span class="math inline">\(Q\)</span> 进行切分（和MHA一样），而 <span class="math inline">\(K、V\)</span> 则直接在线性变换的时候把维度降到了
<span class="math inline">\(d_{head}\)</span>
（而不是切分变小），然后这n个Query头分别和同一份 <span class="math inline">\(K、V\)</span>
进行attention计算，之后把结果拼接起来。</p>
<p>简单来说，就是MHA中，每个注意力头的 <span class="math inline">\(K、V\)</span>
是不一样的，而MQA这里，每个注意力头的 <span class="math inline">\(K、V\)</span>
是一样的，值是共享的。而其他步骤都和MHA一样。</p>
<img src="/3dc22f96/MQA.webp" class title="MQA">
<p>这样一来，需要缓存的 <span class="math inline">\(K、V\)</span>
值一下就从所有头变成一个头的量。</p>
<p>比如在Llama2
7B中用的是32个头，那用MQA后，1024个token需要缓存的量就变成1/32，536,870,912
bytes / 32 = 16,777,216 bytes，差不多是16M，这就能全塞进缓存中了。</p>
<p>（实现上，就是改一下线性变换矩阵，然后把 <span class="math inline">\(K、V\)</span>
的处理从切分变成复制，就不再赘述。）</p>
<p>当然，由于共享了多个头的参数，限制了模型的表达能力，MQA虽然能好地支持推理加速，但是在效果上略略比MHA差一点，但是并不多，且相比其他修改hidden
size或者head num的做法效果都好。</p>
<img src="/3dc22f96/mqa_result_1.png" class title="MQA results 1">
<img src="/3dc22f96/mqa_result_3.png" class title="MQA results 3">
<h1 id="gqa">GQA</h1>
<p>既然MQA对效果有点影响，MHA缓存又存不下，那GQA（Grouped-Query
Attention）就提出了一个折中的办法，既能减少MQA效果的损失，又相比MHA需要更少的缓存。</p>
<p>（文章：《GQA: Training Generalized Multi-Query Transformer Models
from Multi-Head Checkpoints》，2023年）</p>
<p>GQA里， <span class="math inline">\(Q\)</span>
还是按原来MHA/MQA的做法不变。只使用一套共享的 <span class="math inline">\(K、V\)</span>
不是效果不好吗，那就还是多弄几套。但是不要太多，数量还是比 <span class="math inline">\(Q\)</span> 的头数少一些。这样相当于把 <span class="math inline">\(Q\)</span> 的多个头给分了group，同一个group内的
<span class="math inline">\(Q\)</span> 共享同一套 <span class="math inline">\(K、V\)</span> ，不同group的 <span class="math inline">\(Q\)</span> 所用的 <span class="math inline">\(K、V\)</span> 不同。</p>
<p>MHA可以认为是 <span class="math inline">\(K、V\)</span>
头数最大时的GQA，而MQA可以任务是 <span class="math inline">\(K、V\)</span> 头数最少时的GQA。</p>
<p>看论文里的图就很直观</p>
<img src="/3dc22f96/GQA.png" class title="GQA">
<p>效果怎么样呢？</p>
<img src="/3dc22f96/GQA_result_1.png" class title="GQA result">
<p>看表中2/3/4行对比，GQA的速度相比MHA有明显提升，而效果上比MQA也好一些，能做到和MHA基本没差距。文中提到，这里的MQA和GQA都是通过average
pooling从MHA初始化而来，然后进行了少量的训练得到的。如果我们想要把之前用MHA训练的模型改造成GQA，也可以通过这样的方法，增加少量训练来实现。当然如果从一开始就加上，从零开始训练，也是没有问题的。</p>
<p>Llama2用的就是GQA，在tech
report中也做了MHA、MQA、GQA的效果对比，可以看到效果确实很不错。</p>
<img src="/3dc22f96/llama2_qga.png" class title="llama2 GQA result">
<h1 id="小结">小结</h1>
<p>MHA、MQA、GQA的实现其实并不复杂，效果也很好，理解上并没有太多困难。但是想要真正理解它们的出发点，还是需要深入每一个细节，去了解当时要解决的事什么问题。</p>
<p>目前来看GQA是LLM比较好的方案，但未来肯定还会有针对不同方向的进一步优化方案，计算效率、推理速度、显存消耗这些方向都值得我们继续去探索优化。</p>
<hr>
<p>读到这了，来一发点赞收藏关注吧~</p>
<p>博客：<a href="http://www.linsight.cn/">http://www.linsight.cn/</a><br>
知乎：<a href="https://www.zhihu.com/people/us4ever">Linsight</a><br>
微信公众号：Linsight<br>
<img src="/images/qrcode.jpg"></p>
<h1 id="reference">Reference</h1>
<p>【1】The Annotated Transformer
https://nlp.seas.harvard.edu/2018/04/03/attention.html<br>
【2】Attention Is All You Need
https://arxiv.org/pdf/1706.03762.pdf<br>
【3】Fast Transformer Decoding: One Write-Head is All You Need
https://arxiv.org/pdf/1911.02150.pdf<br>
【4】https://www.researchgate.net/figure/Scaled-dot-product-self-attention-mechanism_fig1_363923096<br>
【5】GQA: Training Generalized Multi-Query Transformer Models from
Multi-Head Checkpoints https://arxiv.org/pdf/2305.13245.pdf<br>
【6】How Attention works in Deep Learning: understanding the attention
mechanism in sequence models https://theaisummer.com/attention/<br>
【7】A simple overview of RNN, LSTM and Attention Mechanism
https://medium.com/swlh/a-simple-overview-of-rnn-lstm-and-attention-mechanism-9e844763d07b<br>
【8】https://pytorch-forecasting.readthedocs.io/en/latest/_modules/pytorch_forecasting/models/temporal_fusion_transformer/sub_modules.html#ScaledDotProductAttention<br>
【9】浅谈Transformer的初始化、参数化与标准化
https://spaces.ac.cn/archives/8620<br>
【10】https://theaisummer.com/self-attention/
https://theaisummer.com/self-attention/<br>
【11】https://zhuanlan.zhihu.com/p/626820422
https://zhuanlan.zhihu.com/p/626820422<br>
【12】Are Sixteen Heads Really Better than One?
https://arxiv.org/pdf/1905.10650.pdf<br>
【13】This post is all you need（上卷）——层层剥开Transformer
https://zhuanlan.zhihu.com/p/420820453<br>
【14】The Illustrated Transformer
https://jalammar.github.io/illustrated-transformer/<br>
【15】Multi-Query Attention is All You Need
https://blog.fireworks.ai/multi-query-attention-is-all-you-need-db072e758055</p>
]]></content>
      <categories>
        <category>CS</category>
        <category>NLP</category>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>LLM</tag>
        <tag>transformer</tag>
        <tag>attention</tag>
        <tag>KV Cache</tag>
      </tags>
  </entry>
</search>
